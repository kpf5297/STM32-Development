
C_UART_STM32F429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000280c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080029b8  080029b8  000039b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029d0  080029d0  00004028  2**0
                  CONTENTS
  4 .ARM          00000008  080029d0  080029d0  000039d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029d8  080029d8  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029d8  080029d8  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029dc  080029dc  000039dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080029e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004028  2**0
                  CONTENTS
 10 .bss          00000068  20000028  20000028  00004028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00004028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008258  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015f3  00000000  00000000  0000c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  0000d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000535  00000000  00000000  0000df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bf6  00000000  00000000  0000e4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008812  00000000  00000000  000300a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf7b  00000000  00000000  000388b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106830  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001aec  00000000  00000000  00106874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00108360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080029a0 	.word	0x080029a0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080029a0 	.word	0x080029a0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f9d8 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f814 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f89c 	bl	8000624 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f870 	bl	80005d0 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, tx_buffer, 27, 10);
 80004f0:	230a      	movs	r3, #10
 80004f2:	221b      	movs	r2, #27
 80004f4:	4904      	ldr	r1, [pc, #16]	@ (8000508 <main+0x2c>)
 80004f6:	4805      	ldr	r0, [pc, #20]	@ (800050c <main+0x30>)
 80004f8:	f001 fa74 	bl	80019e4 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80004fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000500:	f000 fa3a 	bl	8000978 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, tx_buffer, 27, 10);
 8000504:	bf00      	nop
 8000506:	e7f3      	b.n	80004f0 <main+0x14>
 8000508:	20000000 	.word	0x20000000
 800050c:	20000044 	.word	0x20000044

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	@ 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fa12 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <SystemClock_Config+0xb8>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a22      	ldr	r2, [pc, #136]	@ (80005c8 <SystemClock_Config+0xb8>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <SystemClock_Config+0xb8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <SystemClock_Config+0xbc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800055c:	4a1b      	ldr	r2, [pc, #108]	@ (80005cc <SystemClock_Config+0xbc>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <SystemClock_Config+0xbc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fd85 	bl	8001094 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000590:	f000 f88c 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 ffe8 	bl	8001584 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ba:	f000 f877 	bl	80006ac <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	@ 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d4:	4b11      	ldr	r3, [pc, #68]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <MX_USART1_UART_Init+0x50>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <MX_USART1_UART_Init+0x4c>)
 8000608:	f001 f99c 	bl	8001944 <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000612:	f000 f84b 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000044 	.word	0x20000044
 8000620:	40011000 	.word	0x40011000

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_GPIO_Init+0x80>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a18      	ldr	r2, [pc, #96]	@ (80006a4 <MX_GPIO_Init+0x80>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <MX_GPIO_Init+0x80>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_GPIO_Init+0x80>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <MX_GPIO_Init+0x80>)
 8000660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_GPIO_Init+0x80>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GRN_Pin|RED_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000678:	480b      	ldr	r0, [pc, #44]	@ (80006a8 <MX_GPIO_Init+0x84>)
 800067a:	f000 fcf1 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GRN_Pin RED_Pin */
  GPIO_InitStruct.Pin = GRN_Pin|RED_Pin;
 800067e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <MX_GPIO_Init+0x84>)
 8000698:	f000 fb36 	bl	8000d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40021800 	.word	0x40021800

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <HAL_MspInit+0x4c>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <HAL_MspInit+0x4c>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <HAL_MspInit+0x4c>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_MspInit+0x4c>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <HAL_MspInit+0x4c>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_MspInit+0x4c>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1d      	ldr	r2, [pc, #116]	@ (800079c <HAL_UART_MspInit+0x94>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d134      	bne.n	8000794 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <HAL_UART_MspInit+0x98>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000732:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <HAL_UART_MspInit+0x98>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6453      	str	r3, [r2, #68]	@ 0x44
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_UART_MspInit+0x98>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <HAL_UART_MspInit+0x98>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <HAL_UART_MspInit+0x98>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_UART_MspInit+0x98>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000762:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000774:	2307      	movs	r3, #7
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <HAL_UART_MspInit+0x9c>)
 8000780:	f000 fac2 	bl	8000d08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2025      	movs	r0, #37	@ 0x25
 800078a:	f000 f9f4 	bl	8000b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800078e:	2025      	movs	r0, #37	@ 0x25
 8000790:	f000 fa0d 	bl	8000bae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40011000 	.word	0x40011000
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <UsageFault_Handler+0x4>

080007d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fe:	f000 f89b 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800080c:	4802      	ldr	r0, [pc, #8]	@ (8000818 <USART1_IRQHandler+0x10>)
 800080e:	f001 f975 	bl	8001afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000044 	.word	0x20000044

0800081c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <SystemInit+0x20>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000826:	4a05      	ldr	r2, [pc, #20]	@ (800083c <SystemInit+0x20>)
 8000828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800082c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000844:	f7ff ffea 	bl	800081c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	@ (800088c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800086e:	f002 f873 	bl	8002958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000872:	f7ff fe33 	bl	80004dc <main>
  bx  lr    
 8000876:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000878:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000884:	080029e0 	.word	0x080029e0
  ldr r2, =_sbss
 8000888:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800088c:	20000090 	.word	0x20000090

08000890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC_IRQHandler>
	...

08000894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_Init+0x40>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <HAL_Init+0x40>)
 800089e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <HAL_Init+0x40>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <HAL_Init+0x40>)
 80008aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_Init+0x40>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <HAL_Init+0x40>)
 80008b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f94f 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	200f      	movs	r0, #15
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fef6 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023c00 	.word	0x40023c00

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f967 	bl	8000bca <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 f92f 	bl	8000b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	@ (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000001c 	.word	0x2000001c
 8000930:	20000024 	.word	0x20000024
 8000934:	20000020 	.word	0x20000020

08000938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_IncTick+0x20>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_IncTick+0x24>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a04      	ldr	r2, [pc, #16]	@ (800095c <HAL_IncTick+0x24>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000024 	.word	0x20000024
 800095c:	2000008c 	.word	0x2000008c

08000960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b03      	ldr	r3, [pc, #12]	@ (8000974 <HAL_GetTick+0x14>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	2000008c 	.word	0x2000008c

08000978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000980:	f7ff ffee 	bl	8000960 <HAL_GetTick>
 8000984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000990:	d005      	beq.n	800099e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <HAL_Delay+0x44>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099e:	bf00      	nop
 80009a0:	f7ff ffde 	bl	8000960 <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d8f7      	bhi.n	80009a0 <HAL_Delay+0x28>
  {
  }
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000024 	.word	0x20000024

080009c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f2:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	60d3      	str	r3, [r2, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db0b      	blt.n	8000a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 021f 	and.w	r2, r3, #31
 8000a3c:	4907      	ldr	r1, [pc, #28]	@ (8000a5c <__NVIC_EnableIRQ+0x38>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	095b      	lsrs	r3, r3, #5
 8000a44:	2001      	movs	r0, #1
 8000a46:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	@ (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	@ (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	@ 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	@ 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff8e 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff29 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff3e 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff8e 	bl	8000ab4 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff31 	bl	8000a24 <__NVIC_EnableIRQ>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffa2 	bl	8000b1c <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b084      	sub	sp, #16
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff feb6 	bl	8000960 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d008      	beq.n	8000c14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2280      	movs	r2, #128	@ 0x80
 8000c06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e052      	b.n	8000cba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0216 	bic.w	r2, r2, #22
 8000c22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d103      	bne.n	8000c44 <HAL_DMA_Abort+0x62>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d007      	beq.n	8000c54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0208 	bic.w	r2, r2, #8
 8000c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0201 	bic.w	r2, r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c64:	e013      	b.n	8000c8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c66:	f7ff fe7b 	bl	8000960 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d90c      	bls.n	8000c8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2220      	movs	r2, #32
 8000c78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e015      	b.n	8000cba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1e4      	bne.n	8000c66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ca0:	223f      	movs	r2, #63	@ 0x3f
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d004      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2280      	movs	r2, #128	@ 0x80
 8000cda:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e00c      	b.n	8000cfa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2205      	movs	r2, #5
 8000ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0201 	bic.w	r2, r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	e177      	b.n	8001014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 8166 	bne.w	800100e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d005      	beq.n	8000d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d130      	bne.n	8000dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	f003 0201 	and.w	r2, r3, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d017      	beq.n	8000df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d123      	bne.n	8000e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	69b9      	ldr	r1, [r7, #24]
 8000e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0203 	and.w	r2, r3, #3
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80c0 	beq.w	800100e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b66      	ldr	r3, [pc, #408]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	4a65      	ldr	r2, [pc, #404]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9e:	4b63      	ldr	r3, [pc, #396]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eaa:	4a61      	ldr	r2, [pc, #388]	@ (8001030 <HAL_GPIO_Init+0x328>)
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a58      	ldr	r2, [pc, #352]	@ (8001034 <HAL_GPIO_Init+0x32c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d037      	beq.n	8000f46 <HAL_GPIO_Init+0x23e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a57      	ldr	r2, [pc, #348]	@ (8001038 <HAL_GPIO_Init+0x330>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d031      	beq.n	8000f42 <HAL_GPIO_Init+0x23a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a56      	ldr	r2, [pc, #344]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d02b      	beq.n	8000f3e <HAL_GPIO_Init+0x236>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a55      	ldr	r2, [pc, #340]	@ (8001040 <HAL_GPIO_Init+0x338>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d025      	beq.n	8000f3a <HAL_GPIO_Init+0x232>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a54      	ldr	r2, [pc, #336]	@ (8001044 <HAL_GPIO_Init+0x33c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d01f      	beq.n	8000f36 <HAL_GPIO_Init+0x22e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a53      	ldr	r2, [pc, #332]	@ (8001048 <HAL_GPIO_Init+0x340>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x22a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a52      	ldr	r2, [pc, #328]	@ (800104c <HAL_GPIO_Init+0x344>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x226>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a51      	ldr	r2, [pc, #324]	@ (8001050 <HAL_GPIO_Init+0x348>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x222>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a50      	ldr	r2, [pc, #320]	@ (8001054 <HAL_GPIO_Init+0x34c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x21e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4f      	ldr	r2, [pc, #316]	@ (8001058 <HAL_GPIO_Init+0x350>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x21a>
 8000f1e:	2309      	movs	r3, #9
 8000f20:	e012      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f22:	230a      	movs	r3, #10
 8000f24:	e010      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f26:	2308      	movs	r3, #8
 8000f28:	e00e      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e00c      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f2e:	2306      	movs	r3, #6
 8000f30:	e00a      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f32:	2305      	movs	r3, #5
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4935      	ldr	r1, [pc, #212]	@ (8001030 <HAL_GPIO_Init+0x328>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f66:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8a:	4a34      	ldr	r2, [pc, #208]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f90:	4b32      	ldr	r3, [pc, #200]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb4:	4a29      	ldr	r2, [pc, #164]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fba:	4b28      	ldr	r3, [pc, #160]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fde:	4a1f      	ldr	r2, [pc, #124]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001008:	4a14      	ldr	r2, [pc, #80]	@ (800105c <HAL_GPIO_Init+0x354>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f ae84 	bls.w	8000d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40021400 	.word	0x40021400
 800104c:	40021800 	.word	0x40021800
 8001050:	40021c00 	.word	0x40021c00
 8001054:	40022000 	.word	0x40022000
 8001058:	40022400 	.word	0x40022400
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800107c:	e003      	b.n	8001086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e267      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d075      	beq.n	800119e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010b2:	4b88      	ldr	r3, [pc, #544]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d00c      	beq.n	80010d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010be:	4b85      	ldr	r3, [pc, #532]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d112      	bne.n	80010f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ca:	4b82      	ldr	r3, [pc, #520]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010d6:	d10b      	bne.n	80010f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	4b7e      	ldr	r3, [pc, #504]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d05b      	beq.n	800119c <HAL_RCC_OscConfig+0x108>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d157      	bne.n	800119c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e242      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f8:	d106      	bne.n	8001108 <HAL_RCC_OscConfig+0x74>
 80010fa:	4b76      	ldr	r3, [pc, #472]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a75      	ldr	r2, [pc, #468]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0xb0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x98>
 8001112:	4b70      	ldr	r3, [pc, #448]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6f      	ldr	r2, [pc, #444]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b6d      	ldr	r3, [pc, #436]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6c      	ldr	r2, [pc, #432]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0xb0>
 800112c:	4b69      	ldr	r3, [pc, #420]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a68      	ldr	r2, [pc, #416]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b66      	ldr	r3, [pc, #408]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a65      	ldr	r2, [pc, #404]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fc08 	bl	8000960 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fc04 	bl	8000960 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e207      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b5b      	ldr	r3, [pc, #364]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0xc0>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fbf4 	bl	8000960 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fbf0 	bl	8000960 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	@ 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e1f3      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	4b51      	ldr	r3, [pc, #324]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0xe8>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d063      	beq.n	8001272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011aa:	4b4a      	ldr	r3, [pc, #296]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b6:	4b47      	ldr	r3, [pc, #284]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d11c      	bne.n	80011fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c2:	4b44      	ldr	r3, [pc, #272]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	4b41      	ldr	r3, [pc, #260]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_RCC_OscConfig+0x152>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e1c7      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	4b3b      	ldr	r3, [pc, #236]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4937      	ldr	r1, [pc, #220]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	e03a      	b.n	8001272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d020      	beq.n	8001246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001204:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <HAL_RCC_OscConfig+0x244>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fba9 	bl	8000960 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fba5 	bl	8000960 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e1a8      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b28      	ldr	r3, [pc, #160]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4925      	ldr	r1, [pc, #148]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
 8001244:	e015      	b.n	8001272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001246:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <HAL_RCC_OscConfig+0x244>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fb88 	bl	8000960 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001254:	f7ff fb84 	bl	8000960 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e187      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d036      	beq.n	80012ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d016      	beq.n	80012b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_RCC_OscConfig+0x248>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128c:	f7ff fb68 	bl	8000960 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fb64 	bl	8000960 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e167      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_RCC_OscConfig+0x240>)
 80012a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x200>
 80012b2:	e01b      	b.n	80012ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_RCC_OscConfig+0x248>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fb51 	bl	8000960 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	e00e      	b.n	80012e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fb4d 	bl	8000960 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d907      	bls.n	80012e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e150      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
 80012d4:	40023800 	.word	0x40023800
 80012d8:	42470000 	.word	0x42470000
 80012dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	4b88      	ldr	r3, [pc, #544]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 80012e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1ea      	bne.n	80012c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 8097 	beq.w	8001428 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fe:	4b81      	ldr	r3, [pc, #516]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b7d      	ldr	r3, [pc, #500]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a7c      	ldr	r2, [pc, #496]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b7a      	ldr	r3, [pc, #488]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b77      	ldr	r3, [pc, #476]	@ (8001508 <HAL_RCC_OscConfig+0x474>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d118      	bne.n	8001368 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001336:	4b74      	ldr	r3, [pc, #464]	@ (8001508 <HAL_RCC_OscConfig+0x474>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a73      	ldr	r2, [pc, #460]	@ (8001508 <HAL_RCC_OscConfig+0x474>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001342:	f7ff fb0d 	bl	8000960 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134a:	f7ff fb09 	bl	8000960 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e10c      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	4b6a      	ldr	r3, [pc, #424]	@ (8001508 <HAL_RCC_OscConfig+0x474>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x2ea>
 8001370:	4b64      	ldr	r3, [pc, #400]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001374:	4a63      	ldr	r2, [pc, #396]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6713      	str	r3, [r2, #112]	@ 0x70
 800137c:	e01c      	b.n	80013b8 <HAL_RCC_OscConfig+0x324>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x30c>
 8001386:	4b5f      	ldr	r3, [pc, #380]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138a:	4a5e      	ldr	r2, [pc, #376]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6713      	str	r3, [r2, #112]	@ 0x70
 8001392:	4b5c      	ldr	r3, [pc, #368]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001396:	4a5b      	ldr	r2, [pc, #364]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6713      	str	r3, [r2, #112]	@ 0x70
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0x324>
 80013a0:	4b58      	ldr	r3, [pc, #352]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a4:	4a57      	ldr	r2, [pc, #348]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ac:	4b55      	ldr	r3, [pc, #340]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b0:	4a54      	ldr	r2, [pc, #336]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 80013b2:	f023 0304 	bic.w	r3, r3, #4
 80013b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d015      	beq.n	80013ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff face 	bl	8000960 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff faca 	bl	8000960 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0cb      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013de:	4b49      	ldr	r3, [pc, #292]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0ee      	beq.n	80013c8 <HAL_RCC_OscConfig+0x334>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fab8 	bl	8000960 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff fab4 	bl	8000960 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e0b5      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140a:	4b3e      	ldr	r3, [pc, #248]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ee      	bne.n	80013f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141c:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	4a38      	ldr	r2, [pc, #224]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a1 	beq.w	8001574 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001432:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	d05c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d141      	bne.n	80014ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001446:	4b31      	ldr	r3, [pc, #196]	@ (800150c <HAL_RCC_OscConfig+0x478>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fa88 	bl	8000960 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001454:	f7ff fa84 	bl	8000960 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e087      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001466:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69da      	ldr	r2, [r3, #28]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	3b01      	subs	r3, #1
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001494:	061b      	lsls	r3, r3, #24
 8001496:	491b      	ldr	r1, [pc, #108]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <HAL_RCC_OscConfig+0x478>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fa5d 	bl	8000960 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fa59 	bl	8000960 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e05c      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x416>
 80014c8:	e054      	b.n	8001574 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_RCC_OscConfig+0x478>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fa46 	bl	8000960 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fa42 	bl	8000960 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e045      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_RCC_OscConfig+0x470>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x444>
 80014f6:	e03d      	b.n	8001574 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d107      	bne.n	8001510 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e038      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000
 800150c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_RCC_OscConfig+0x4ec>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d028      	beq.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d121      	bne.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d11a      	bne.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001540:	4013      	ands	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001546:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001548:	4293      	cmp	r3, r2
 800154a:	d111      	bne.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	3b01      	subs	r3, #1
 800155a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0cc      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b68      	ldr	r3, [pc, #416]	@ (800173c <HAL_RCC_ClockConfig+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d90c      	bls.n	80015c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b65      	ldr	r3, [pc, #404]	@ (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b63      	ldr	r3, [pc, #396]	@ (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0b8      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d8:	4b59      	ldr	r3, [pc, #356]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	4a58      	ldr	r2, [pc, #352]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f0:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a52      	ldr	r2, [pc, #328]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fc:	4b50      	ldr	r3, [pc, #320]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	494d      	ldr	r1, [pc, #308]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d044      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d119      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e07f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d003      	beq.n	8001642 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163e:	2b03      	cmp	r3, #3
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b3f      	ldr	r3, [pc, #252]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e06f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e067      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b37      	ldr	r3, [pc, #220]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4934      	ldr	r1, [pc, #208]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff f974 	bl	8000960 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff f970 	bl	8000960 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e04f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b25      	ldr	r3, [pc, #148]	@ (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d20c      	bcs.n	80016cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e032      	b.n	8001732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4916      	ldr	r1, [pc, #88]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	490e      	ldr	r1, [pc, #56]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800170a:	f000 f821 	bl	8001750 <HAL_RCC_GetSysClockFreq>
 800170e:	4602      	mov	r2, r0
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	490a      	ldr	r1, [pc, #40]	@ (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	5ccb      	ldrb	r3, [r1, r3]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	4a09      	ldr	r2, [pc, #36]	@ (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f8d4 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00
 8001740:	40023800 	.word	0x40023800
 8001744:	080029b8 	.word	0x080029b8
 8001748:	2000001c 	.word	0x2000001c
 800174c:	20000020 	.word	0x20000020

08001750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001754:	b090      	sub	sp, #64	@ 0x40
 8001756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001768:	4b59      	ldr	r3, [pc, #356]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d00d      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x40>
 8001774:	2b08      	cmp	r3, #8
 8001776:	f200 80a1 	bhi.w	80018bc <HAL_RCC_GetSysClockFreq+0x16c>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x34>
 800177e:	2b04      	cmp	r3, #4
 8001780:	d003      	beq.n	800178a <HAL_RCC_GetSysClockFreq+0x3a>
 8001782:	e09b      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001786:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001788:	e09b      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178a:	4b53      	ldr	r3, [pc, #332]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800178e:	e098      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001790:	4b4f      	ldr	r3, [pc, #316]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001798:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179a:	4b4d      	ldr	r3, [pc, #308]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d028      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a6:	4b4a      	ldr	r3, [pc, #296]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	2200      	movs	r2, #0
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017b8:	2100      	movs	r1, #0
 80017ba:	4b47      	ldr	r3, [pc, #284]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80017bc:	fb03 f201 	mul.w	r2, r3, r1
 80017c0:	2300      	movs	r3, #0
 80017c2:	fb00 f303 	mul.w	r3, r0, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	4a43      	ldr	r2, [pc, #268]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80017ca:	fba0 1202 	umull	r1, r2, r0, r2
 80017ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017d0:	460a      	mov	r2, r1
 80017d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017d6:	4413      	add	r3, r2
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017dc:	2200      	movs	r2, #0
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	61fa      	str	r2, [r7, #28]
 80017e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017ea:	f7fe fcff 	bl	80001ec <__aeabi_uldivmod>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4613      	mov	r3, r2
 80017f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017f6:	e053      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f8:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	2200      	movs	r2, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	617a      	str	r2, [r7, #20]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800180a:	f04f 0b00 	mov.w	fp, #0
 800180e:	4652      	mov	r2, sl
 8001810:	465b      	mov	r3, fp
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0159      	lsls	r1, r3, #5
 800181c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001820:	0150      	lsls	r0, r2, #5
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	ebb2 080a 	subs.w	r8, r2, sl
 800182a:	eb63 090b 	sbc.w	r9, r3, fp
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800183a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800183e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001842:	ebb2 0408 	subs.w	r4, r2, r8
 8001846:	eb63 0509 	sbc.w	r5, r3, r9
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	00eb      	lsls	r3, r5, #3
 8001854:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001858:	00e2      	lsls	r2, r4, #3
 800185a:	4614      	mov	r4, r2
 800185c:	461d      	mov	r5, r3
 800185e:	eb14 030a 	adds.w	r3, r4, sl
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	eb45 030b 	adc.w	r3, r5, fp
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001876:	4629      	mov	r1, r5
 8001878:	028b      	lsls	r3, r1, #10
 800187a:	4621      	mov	r1, r4
 800187c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001880:	4621      	mov	r1, r4
 8001882:	028a      	lsls	r2, r1, #10
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188a:	2200      	movs	r2, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	60fa      	str	r2, [r7, #12]
 8001890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001894:	f7fe fcaa 	bl	80001ec <__aeabi_uldivmod>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4613      	mov	r3, r2
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ba:	e002      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80018be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3740      	adds	r7, #64	@ 0x40
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	00f42400 	.word	0x00f42400
 80018d8:	017d7840 	.word	0x017d7840

080018dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000001c 	.word	0x2000001c

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff0 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	@ (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	080029c8 	.word	0x080029c8

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001920:	f7ff ffdc 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0b5b      	lsrs	r3, r3, #13
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	@ (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	080029c8 	.word	0x080029c8

08001944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e042      	b.n	80019dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fecc 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2224      	movs	r2, #36	@ 0x24
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fd69 	bl	8002460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800199c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d175      	bne.n	8001af0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_UART_Transmit+0x2c>
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e06e      	b.n	8001af2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2221      	movs	r2, #33	@ 0x21
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a22:	f7fe ff9d 	bl	8000960 <HAL_GetTick>
 8001a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a3c:	d108      	bne.n	8001a50 <HAL_UART_Transmit+0x6c>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d104      	bne.n	8001a50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	e003      	b.n	8001a58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a58:	e02e      	b.n	8001ab8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2200      	movs	r2, #0
 8001a62:	2180      	movs	r1, #128	@ 0x80
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 fb05 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e03a      	b.n	8001af2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10b      	bne.n	8001a9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	3302      	adds	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	e007      	b.n	8001aaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1cb      	bne.n	8001a5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2140      	movs	r1, #64	@ 0x40
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fad1 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e006      	b.n	8001af2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0ba      	sub	sp, #232	@ 0xe8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_UART_IRQHandler+0x66>
 8001b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fbc2 	bl	80022e4 <UART_Receive_IT>
      return;
 8001b60:	e25b      	b.n	800201a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80de 	beq.w	8001d28 <HAL_UART_IRQHandler+0x22c>
 8001b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80d1 	beq.w	8001d28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <HAL_UART_IRQHandler+0xae>
 8001b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_UART_IRQHandler+0xd2>
 8001bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f043 0202 	orr.w	r2, r3, #2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_UART_IRQHandler+0xf6>
 8001bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f043 0204 	orr.w	r2, r3, #4
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d011      	beq.n	8001c22 <HAL_UART_IRQHandler+0x126>
 8001bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f043 0208 	orr.w	r2, r3, #8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 81f2 	beq.w	8002010 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_UART_IRQHandler+0x14e>
 8001c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fb4d 	bl	80022e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c54:	2b40      	cmp	r3, #64	@ 0x40
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <HAL_UART_IRQHandler+0x17a>
 8001c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d04f      	beq.n	8001d16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa55 	bl	8002126 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c86:	2b40      	cmp	r3, #64	@ 0x40
 8001c88:	d141      	bne.n	8001d0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c98:	e853 3f00 	ldrex	r3, [r3]
 8001c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001cc6:	e841 2300 	strex	r3, r2, [r1]
 8001cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1d9      	bne.n	8001c8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d013      	beq.n	8001d06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8001edc <HAL_UART_IRQHandler+0x3e0>)
 8001ce4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe ffe9 	bl	8000cc2 <HAL_DMA_Abort_IT>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d016      	beq.n	8001d24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d00:	4610      	mov	r0, r2
 8001d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d04:	e00e      	b.n	8001d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f99e 	bl	8002048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0c:	e00a      	b.n	8001d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f99a 	bl	8002048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d14:	e006      	b.n	8001d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f996 	bl	8002048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001d22:	e175      	b.n	8002010 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d24:	bf00      	nop
    return;
 8001d26:	e173      	b.n	8002010 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	f040 814f 	bne.w	8001fd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8148 	beq.w	8001fd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8141 	beq.w	8001fd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6e:	2b40      	cmp	r3, #64	@ 0x40
 8001d70:	f040 80b6 	bne.w	8001ee0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001d80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8145 	beq.w	8002014 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001d92:	429a      	cmp	r2, r3
 8001d94:	f080 813e 	bcs.w	8002014 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001d9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001daa:	f000 8088 	beq.w	8001ebe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	330c      	adds	r3, #12
 8001db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dbc:	e853 3f00 	ldrex	r3, [r3]
 8001dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001dda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001de2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001dea:	e841 2300 	strex	r3, r2, [r1]
 8001dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1d9      	bne.n	8001dae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3314      	adds	r3, #20
 8001e00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e04:	e853 3f00 	ldrex	r3, [r3]
 8001e08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3314      	adds	r3, #20
 8001e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001e2a:	e841 2300 	strex	r3, r2, [r1]
 8001e2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e1      	bne.n	8001dfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e40:	e853 3f00 	ldrex	r3, [r3]
 8001e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3314      	adds	r3, #20
 8001e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001e5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e62:	e841 2300 	strex	r3, r2, [r1]
 8001e66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e3      	bne.n	8001e36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	330c      	adds	r3, #12
 8001e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e86:	e853 3f00 	ldrex	r3, [r3]
 8001e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e8e:	f023 0310 	bic.w	r3, r3, #16
 8001e92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001ea0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001ea2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ea6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ea8:	e841 2300 	strex	r3, r2, [r1]
 8001eac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e3      	bne.n	8001e7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fe92 	bl	8000be2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8c1 	bl	800205c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001eda:	e09b      	b.n	8002014 <HAL_UART_IRQHandler+0x518>
 8001edc:	080021ed 	.word	0x080021ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 808e 	beq.w	8002018 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8089 	beq.w	8002018 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	e853 3f00 	ldrex	r3, [r3]
 8001f14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	330c      	adds	r3, #12
 8001f26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001f2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001f2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f32:	e841 2300 	strex	r3, r2, [r1]
 8001f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1e3      	bne.n	8001f06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3314      	adds	r3, #20
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	e853 3f00 	ldrex	r3, [r3]
 8001f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3314      	adds	r3, #20
 8001f5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001f62:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f6a:	e841 2300 	strex	r3, r2, [r1]
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e3      	bne.n	8001f3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	330c      	adds	r3, #12
 8001f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	e853 3f00 	ldrex	r3, [r3]
 8001f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0310 	bic.w	r3, r3, #16
 8001f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001fa8:	61fa      	str	r2, [r7, #28]
 8001faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fac:	69b9      	ldr	r1, [r7, #24]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	e841 2300 	strex	r3, r2, [r1]
 8001fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e3      	bne.n	8001f84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001fc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f847 	bl	800205c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fce:	e023      	b.n	8002018 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HAL_UART_IRQHandler+0x4f4>
 8001fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f913 	bl	8002214 <UART_Transmit_IT>
    return;
 8001fee:	e014      	b.n	800201a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <HAL_UART_IRQHandler+0x51e>
 8001ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f953 	bl	80022b4 <UART_EndTransmit_IT>
    return;
 800200e:	e004      	b.n	800201a <HAL_UART_IRQHandler+0x51e>
    return;
 8002010:	bf00      	nop
 8002012:	e002      	b.n	800201a <HAL_UART_IRQHandler+0x51e>
      return;
 8002014:	bf00      	nop
 8002016:	e000      	b.n	800201a <HAL_UART_IRQHandler+0x51e>
      return;
 8002018:	bf00      	nop
  }
}
 800201a:	37e8      	adds	r7, #232	@ 0xe8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002084:	e03b      	b.n	80020fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d037      	beq.n	80020fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7fe fc67 	bl	8000960 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	6a3a      	ldr	r2, [r7, #32]
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e03a      	b.n	800211e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d023      	beq.n	80020fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b80      	cmp	r3, #128	@ 0x80
 80020ba:	d020      	beq.n	80020fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b40      	cmp	r3, #64	@ 0x40
 80020c0:	d01d      	beq.n	80020fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d116      	bne.n	80020fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f81d 	bl	8002126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2208      	movs	r2, #8
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4013      	ands	r3, r2
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	429a      	cmp	r2, r3
 800211a:	d0b4      	beq.n	8002086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002126:	b480      	push	{r7}
 8002128:	b095      	sub	sp, #84	@ 0x54
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	330c      	adds	r3, #12
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002138:	e853 3f00 	ldrex	r3, [r3]
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800213e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800214e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002152:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002156:	e841 2300 	strex	r3, r2, [r1]
 800215a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800215c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1e5      	bne.n	800212e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3314      	adds	r3, #20
 8002168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	e853 3f00 	ldrex	r3, [r3]
 8002170:	61fb      	str	r3, [r7, #28]
   return(result);
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3314      	adds	r3, #20
 8002180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800218a:	e841 2300 	strex	r3, r2, [r1]
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1e5      	bne.n	8002162 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	2b01      	cmp	r3, #1
 800219c:	d119      	bne.n	80021d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f023 0310 	bic.w	r3, r3, #16
 80021b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021be:	61ba      	str	r2, [r7, #24]
 80021c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c2:	6979      	ldr	r1, [r7, #20]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	e841 2300 	strex	r3, r2, [r1]
 80021ca:	613b      	str	r3, [r7, #16]
   return(result);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1e5      	bne.n	800219e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80021e0:	bf00      	nop
 80021e2:	3754      	adds	r7, #84	@ 0x54
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f7ff ff1e 	bl	8002048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b21      	cmp	r3, #33	@ 0x21
 8002226:	d13e      	bne.n	80022a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002230:	d114      	bne.n	800225c <UART_Transmit_IT+0x48>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d110      	bne.n	800225c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800224e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	1c9a      	adds	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	621a      	str	r2, [r3, #32]
 800225a:	e008      	b.n	800226e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	1c59      	adds	r1, r3, #1
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6211      	str	r1, [r2, #32]
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4619      	mov	r1, r3
 800227c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002290:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fea3 	bl	8002020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b22      	cmp	r3, #34	@ 0x22
 80022f6:	f040 80ae 	bne.w	8002456 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002302:	d117      	bne.n	8002334 <UART_Receive_IT+0x50>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d113      	bne.n	8002334 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	b29b      	uxth	r3, r3
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	b29a      	uxth	r2, r3
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	1c9a      	adds	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	629a      	str	r2, [r3, #40]	@ 0x28
 8002332:	e026      	b.n	8002382 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002346:	d007      	beq.n	8002358 <UART_Receive_IT+0x74>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <UART_Receive_IT+0x82>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e008      	b.n	8002378 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002372:	b2da      	uxtb	r2, r3
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002376:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29b      	uxth	r3, r3
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4619      	mov	r1, r3
 8002390:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002392:	2b00      	cmp	r3, #0
 8002394:	d15d      	bne.n	8002452 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0220 	bic.w	r2, r2, #32
 80023a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d135      	bne.n	8002448 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	613b      	str	r3, [r7, #16]
   return(result);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f023 0310 	bic.w	r3, r3, #16
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002402:	623a      	str	r2, [r7, #32]
 8002404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002406:	69f9      	ldr	r1, [r7, #28]
 8002408:	6a3a      	ldr	r2, [r7, #32]
 800240a:	e841 2300 	strex	r3, r2, [r1]
 800240e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e5      	bne.n	80023e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d10a      	bne.n	800243a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fe0b 	bl	800205c <HAL_UARTEx_RxEventCallback>
 8002446:	e002      	b.n	800244e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff fdf3 	bl	8002034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e002      	b.n	8002458 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3730      	adds	r7, #48	@ 0x30
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002464:	b0c0      	sub	sp, #256	@ 0x100
 8002466:	af00      	add	r7, sp, #0
 8002468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247c:	68d9      	ldr	r1, [r3, #12]
 800247e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	ea40 0301 	orr.w	r3, r0, r1
 8002488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800248a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	431a      	orrs	r2, r3
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	431a      	orrs	r2, r3
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024b8:	f021 010c 	bic.w	r1, r1, #12
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024c6:	430b      	orrs	r3, r1
 80024c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024da:	6999      	ldr	r1, [r3, #24]
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	ea40 0301 	orr.w	r3, r0, r1
 80024e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b8f      	ldr	r3, [pc, #572]	@ (800272c <UART_SetConfig+0x2cc>)
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d005      	beq.n	8002500 <UART_SetConfig+0xa0>
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002730 <UART_SetConfig+0x2d0>)
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d104      	bne.n	800250a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002500:	f7ff fa0c 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8002504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002508:	e003      	b.n	8002512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800250a:	f7ff f9f3 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 800250e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800251c:	f040 810c 	bne.w	8002738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002524:	2200      	movs	r2, #0
 8002526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800252a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800252e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002532:	4622      	mov	r2, r4
 8002534:	462b      	mov	r3, r5
 8002536:	1891      	adds	r1, r2, r2
 8002538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800253a:	415b      	adcs	r3, r3
 800253c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800253e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002542:	4621      	mov	r1, r4
 8002544:	eb12 0801 	adds.w	r8, r2, r1
 8002548:	4629      	mov	r1, r5
 800254a:	eb43 0901 	adc.w	r9, r3, r1
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800255a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800255e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002562:	4690      	mov	r8, r2
 8002564:	4699      	mov	r9, r3
 8002566:	4623      	mov	r3, r4
 8002568:	eb18 0303 	adds.w	r3, r8, r3
 800256c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002570:	462b      	mov	r3, r5
 8002572:	eb49 0303 	adc.w	r3, r9, r3
 8002576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800258a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800258e:	460b      	mov	r3, r1
 8002590:	18db      	adds	r3, r3, r3
 8002592:	653b      	str	r3, [r7, #80]	@ 0x50
 8002594:	4613      	mov	r3, r2
 8002596:	eb42 0303 	adc.w	r3, r2, r3
 800259a:	657b      	str	r3, [r7, #84]	@ 0x54
 800259c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025a4:	f7fd fe22 	bl	80001ec <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4b61      	ldr	r3, [pc, #388]	@ (8002734 <UART_SetConfig+0x2d4>)
 80025ae:	fba3 2302 	umull	r2, r3, r3, r2
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	011c      	lsls	r4, r3, #4
 80025b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025c8:	4642      	mov	r2, r8
 80025ca:	464b      	mov	r3, r9
 80025cc:	1891      	adds	r1, r2, r2
 80025ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025d0:	415b      	adcs	r3, r3
 80025d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025d8:	4641      	mov	r1, r8
 80025da:	eb12 0a01 	adds.w	sl, r2, r1
 80025de:	4649      	mov	r1, r9
 80025e0:	eb43 0b01 	adc.w	fp, r3, r1
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025f8:	4692      	mov	sl, r2
 80025fa:	469b      	mov	fp, r3
 80025fc:	4643      	mov	r3, r8
 80025fe:	eb1a 0303 	adds.w	r3, sl, r3
 8002602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002606:	464b      	mov	r3, r9
 8002608:	eb4b 0303 	adc.w	r3, fp, r3
 800260c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800261c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002624:	460b      	mov	r3, r1
 8002626:	18db      	adds	r3, r3, r3
 8002628:	643b      	str	r3, [r7, #64]	@ 0x40
 800262a:	4613      	mov	r3, r2
 800262c:	eb42 0303 	adc.w	r3, r2, r3
 8002630:	647b      	str	r3, [r7, #68]	@ 0x44
 8002632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800263a:	f7fd fdd7 	bl	80001ec <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4611      	mov	r1, r2
 8002644:	4b3b      	ldr	r3, [pc, #236]	@ (8002734 <UART_SetConfig+0x2d4>)
 8002646:	fba3 2301 	umull	r2, r3, r3, r1
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2264      	movs	r2, #100	@ 0x64
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	1acb      	subs	r3, r1, r3
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800265a:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <UART_SetConfig+0x2d4>)
 800265c:	fba3 2302 	umull	r2, r3, r3, r2
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002668:	441c      	add	r4, r3
 800266a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	1891      	adds	r1, r2, r2
 8002682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002684:	415b      	adcs	r3, r3
 8002686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800268c:	4641      	mov	r1, r8
 800268e:	1851      	adds	r1, r2, r1
 8002690:	6339      	str	r1, [r7, #48]	@ 0x30
 8002692:	4649      	mov	r1, r9
 8002694:	414b      	adcs	r3, r1
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026a4:	4659      	mov	r1, fp
 80026a6:	00cb      	lsls	r3, r1, #3
 80026a8:	4651      	mov	r1, sl
 80026aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ae:	4651      	mov	r1, sl
 80026b0:	00ca      	lsls	r2, r1, #3
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	4642      	mov	r2, r8
 80026ba:	189b      	adds	r3, r3, r2
 80026bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026c0:	464b      	mov	r3, r9
 80026c2:	460a      	mov	r2, r1
 80026c4:	eb42 0303 	adc.w	r3, r2, r3
 80026c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80026dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80026e0:	460b      	mov	r3, r1
 80026e2:	18db      	adds	r3, r3, r3
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e6:	4613      	mov	r3, r2
 80026e8:	eb42 0303 	adc.w	r3, r2, r3
 80026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80026f6:	f7fd fd79 	bl	80001ec <__aeabi_uldivmod>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <UART_SetConfig+0x2d4>)
 8002700:	fba3 1302 	umull	r1, r3, r3, r2
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	2164      	movs	r1, #100	@ 0x64
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	3332      	adds	r3, #50	@ 0x32
 8002712:	4a08      	ldr	r2, [pc, #32]	@ (8002734 <UART_SetConfig+0x2d4>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4422      	add	r2, r4
 8002726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002728:	e106      	b.n	8002938 <UART_SetConfig+0x4d8>
 800272a:	bf00      	nop
 800272c:	40011000 	.word	0x40011000
 8002730:	40011400 	.word	0x40011400
 8002734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800273c:	2200      	movs	r2, #0
 800273e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800274a:	4642      	mov	r2, r8
 800274c:	464b      	mov	r3, r9
 800274e:	1891      	adds	r1, r2, r2
 8002750:	6239      	str	r1, [r7, #32]
 8002752:	415b      	adcs	r3, r3
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
 8002756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800275a:	4641      	mov	r1, r8
 800275c:	1854      	adds	r4, r2, r1
 800275e:	4649      	mov	r1, r9
 8002760:	eb43 0501 	adc.w	r5, r3, r1
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	00eb      	lsls	r3, r5, #3
 800276e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002772:	00e2      	lsls	r2, r4, #3
 8002774:	4614      	mov	r4, r2
 8002776:	461d      	mov	r5, r3
 8002778:	4643      	mov	r3, r8
 800277a:	18e3      	adds	r3, r4, r3
 800277c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002780:	464b      	mov	r3, r9
 8002782:	eb45 0303 	adc.w	r3, r5, r3
 8002786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027a6:	4629      	mov	r1, r5
 80027a8:	008b      	lsls	r3, r1, #2
 80027aa:	4621      	mov	r1, r4
 80027ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b0:	4621      	mov	r1, r4
 80027b2:	008a      	lsls	r2, r1, #2
 80027b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027b8:	f7fd fd18 	bl	80001ec <__aeabi_uldivmod>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4b60      	ldr	r3, [pc, #384]	@ (8002944 <UART_SetConfig+0x4e4>)
 80027c2:	fba3 2302 	umull	r2, r3, r3, r2
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	011c      	lsls	r4, r3, #4
 80027ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027dc:	4642      	mov	r2, r8
 80027de:	464b      	mov	r3, r9
 80027e0:	1891      	adds	r1, r2, r2
 80027e2:	61b9      	str	r1, [r7, #24]
 80027e4:	415b      	adcs	r3, r3
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ec:	4641      	mov	r1, r8
 80027ee:	1851      	adds	r1, r2, r1
 80027f0:	6139      	str	r1, [r7, #16]
 80027f2:	4649      	mov	r1, r9
 80027f4:	414b      	adcs	r3, r1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002804:	4659      	mov	r1, fp
 8002806:	00cb      	lsls	r3, r1, #3
 8002808:	4651      	mov	r1, sl
 800280a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280e:	4651      	mov	r1, sl
 8002810:	00ca      	lsls	r2, r1, #3
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	4603      	mov	r3, r0
 8002818:	4642      	mov	r2, r8
 800281a:	189b      	adds	r3, r3, r2
 800281c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002820:	464b      	mov	r3, r9
 8002822:	460a      	mov	r2, r1
 8002824:	eb42 0303 	adc.w	r3, r2, r3
 8002828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002844:	4649      	mov	r1, r9
 8002846:	008b      	lsls	r3, r1, #2
 8002848:	4641      	mov	r1, r8
 800284a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800284e:	4641      	mov	r1, r8
 8002850:	008a      	lsls	r2, r1, #2
 8002852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002856:	f7fd fcc9 	bl	80001ec <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4611      	mov	r1, r2
 8002860:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <UART_SetConfig+0x4e4>)
 8002862:	fba3 2301 	umull	r2, r3, r3, r1
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2264      	movs	r2, #100	@ 0x64
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	1acb      	subs	r3, r1, r3
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	@ 0x32
 8002874:	4a33      	ldr	r2, [pc, #204]	@ (8002944 <UART_SetConfig+0x4e4>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002880:	441c      	add	r4, r3
 8002882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002886:	2200      	movs	r2, #0
 8002888:	673b      	str	r3, [r7, #112]	@ 0x70
 800288a:	677a      	str	r2, [r7, #116]	@ 0x74
 800288c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	415b      	adcs	r3, r3
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028a0:	4641      	mov	r1, r8
 80028a2:	1851      	adds	r1, r2, r1
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	4649      	mov	r1, r9
 80028a8:	414b      	adcs	r3, r1
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028b8:	4659      	mov	r1, fp
 80028ba:	00cb      	lsls	r3, r1, #3
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c2:	4651      	mov	r1, sl
 80028c4:	00ca      	lsls	r2, r1, #3
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	4642      	mov	r2, r8
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028d2:	464b      	mov	r3, r9
 80028d4:	460a      	mov	r2, r1
 80028d6:	eb42 0303 	adc.w	r3, r2, r3
 80028da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80028e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80028f4:	4649      	mov	r1, r9
 80028f6:	008b      	lsls	r3, r1, #2
 80028f8:	4641      	mov	r1, r8
 80028fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028fe:	4641      	mov	r1, r8
 8002900:	008a      	lsls	r2, r1, #2
 8002902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002906:	f7fd fc71 	bl	80001ec <__aeabi_uldivmod>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <UART_SetConfig+0x4e4>)
 8002910:	fba3 1302 	umull	r1, r3, r3, r2
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	2164      	movs	r1, #100	@ 0x64
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	3332      	adds	r3, #50	@ 0x32
 8002922:	4a08      	ldr	r2, [pc, #32]	@ (8002944 <UART_SetConfig+0x4e4>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	f003 020f 	and.w	r2, r3, #15
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4422      	add	r2, r4
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800293e:	46bd      	mov	sp, r7
 8002940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002944:	51eb851f 	.word	0x51eb851f

08002948 <memset>:
 8002948:	4402      	add	r2, r0
 800294a:	4603      	mov	r3, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <__libc_init_array>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4d0d      	ldr	r5, [pc, #52]	@ (8002990 <__libc_init_array+0x38>)
 800295c:	4c0d      	ldr	r4, [pc, #52]	@ (8002994 <__libc_init_array+0x3c>)
 800295e:	1b64      	subs	r4, r4, r5
 8002960:	10a4      	asrs	r4, r4, #2
 8002962:	2600      	movs	r6, #0
 8002964:	42a6      	cmp	r6, r4
 8002966:	d109      	bne.n	800297c <__libc_init_array+0x24>
 8002968:	4d0b      	ldr	r5, [pc, #44]	@ (8002998 <__libc_init_array+0x40>)
 800296a:	4c0c      	ldr	r4, [pc, #48]	@ (800299c <__libc_init_array+0x44>)
 800296c:	f000 f818 	bl	80029a0 <_init>
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	2600      	movs	r6, #0
 8002976:	42a6      	cmp	r6, r4
 8002978:	d105      	bne.n	8002986 <__libc_init_array+0x2e>
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002980:	4798      	blx	r3
 8002982:	3601      	adds	r6, #1
 8002984:	e7ee      	b.n	8002964 <__libc_init_array+0xc>
 8002986:	f855 3b04 	ldr.w	r3, [r5], #4
 800298a:	4798      	blx	r3
 800298c:	3601      	adds	r6, #1
 800298e:	e7f2      	b.n	8002976 <__libc_init_array+0x1e>
 8002990:	080029d8 	.word	0x080029d8
 8002994:	080029d8 	.word	0x080029d8
 8002998:	080029d8 	.word	0x080029d8
 800299c:	080029dc 	.word	0x080029dc

080029a0 <_init>:
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	bf00      	nop
 80029a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a6:	bc08      	pop	{r3}
 80029a8:	469e      	mov	lr, r3
 80029aa:	4770      	bx	lr

080029ac <_fini>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	bf00      	nop
 80029b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b2:	bc08      	pop	{r3}
 80029b4:	469e      	mov	lr, r3
 80029b6:	4770      	bx	lr
