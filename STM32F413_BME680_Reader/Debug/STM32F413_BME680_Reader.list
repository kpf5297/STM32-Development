
STM32F413_BME680_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a494  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800a678  0800a678  0000b678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac74  0800ac74  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac74  0800ac74  0000bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac7c  0800ac7c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac7c  0800ac7c  0000bc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac80  0800ac80  0000bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ac84  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  0800ae58  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0800ae58  0000c3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caae  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c81  00000000  00000000  00018cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0001a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008db  00000000  00000000  0001b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c04  00000000  00000000  0001bd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb5c  00000000  00000000  0003d967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb641  00000000  00000000  0004c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117b04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  00117b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0011bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a65c 	.word	0x0800a65c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a65c 	.word	0x0800a65c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001038:	b0f0      	sub	sp, #448	@ 0x1c0
 800103a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103c:	f002 fac4 	bl	80035c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001040:	f000 f9a8 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 fa5c 	bl	8001500 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001048:	f000 fa02 	bl	8001450 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 800104c:	f000 fa2e 	bl	80014ac <MX_USART6_UART_Init>

  /* USER CODE BEGIN 2 */
  uint8_t chip_id = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
  HAL_StatusTypeDef status;

  status = HAL_I2C_Mem_Read(&hi2c2, (BME68X_I2C_ADDR_HIGH << 1), 0xD0, I2C_MEMADD_SIZE_8BIT, &chip_id, 1, HAL_MAX_DELAY);
 8001056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f207 137f 	addw	r3, r7, #383	@ 0x17f
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	22d0      	movs	r2, #208	@ 0xd0
 800106a:	21ee      	movs	r1, #238	@ 0xee
 800106c:	48ba      	ldr	r0, [pc, #744]	@ (8001358 <main+0x324>)
 800106e:	f002 fff9 	bl	8004064 <HAL_I2C_Mem_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f

  if (status == HAL_OK)
 8001078:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 800107c:	2b00      	cmp	r3, #0
 800107e:	d117      	bne.n	80010b0 <main+0x7c>
  {
    char msg[50];
    sprintf(msg, "BME680 Chip ID: 0x%02X\r\n", chip_id);
 8001080:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 8001084:	461a      	mov	r2, r3
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	49b4      	ldr	r1, [pc, #720]	@ (800135c <main+0x328>)
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fde9 	bl	8006c64 <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f912 	bl	80002c0 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f107 0108 	add.w	r1, r7, #8
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a8:	48ad      	ldr	r0, [pc, #692]	@ (8001360 <main+0x32c>)
 80010aa:	f004 fba3 	bl	80057f4 <HAL_UART_Transmit>
 80010ae:	e017      	b.n	80010e0 <main+0xac>
  }
  else
  {
    char error_msg[] = "Failed to read Chip ID\r\n";
 80010b0:	4bac      	ldr	r3, [pc, #688]	@ (8001364 <main+0x330>)
 80010b2:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 80010b6:	461d      	mov	r5, r3
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c0:	c403      	stmia	r4!, {r0, r1}
 80010c2:	7022      	strb	r2, [r4, #0]
    HAL_UART_Transmit(&huart6, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80010c4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f8f9 	bl	80002c0 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010da:	48a1      	ldr	r0, [pc, #644]	@ (8001360 <main+0x32c>)
 80010dc:	f004 fb8a 	bl	80057f4 <HAL_UART_Transmit>
  }

  I2C_Scan(&hi2c2);
 80010e0:	489d      	ldr	r0, [pc, #628]	@ (8001358 <main+0x324>)
 80010e2:	f000 faa1 	bl	8001628 <I2C_Scan>
  struct bme68x_dev bme680;
  int8_t result;
  struct bme68x_conf conf;
  struct bme68x_heatr_conf heatr_conf;

  uint8_t dev_addr = BME68X_I2C_ADDR_HIGH; // Use 0x77
 80010e6:	2377      	movs	r3, #119	@ 0x77
 80010e8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  bme680.chip_id = BME68X_CHIP_ID;         // Set to 0x61
 80010ec:	2361      	movs	r3, #97	@ 0x61
 80010ee:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
  bme680.intf_ptr = &dev_addr;             // Pass I2C address via intf_ptr
 80010f2:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 80010f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  bme680.intf = BME68X_I2C_INTF;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
  bme680.read = bme68x_i2c_read;
 8001100:	4b99      	ldr	r3, [pc, #612]	@ (8001368 <main+0x334>)
 8001102:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  bme680.write = bme68x_i2c_write;
 8001106:	4b99      	ldr	r3, [pc, #612]	@ (800136c <main+0x338>)
 8001108:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  bme680.delay_us = bme68x_delay_us;
 800110c:	4b98      	ldr	r3, [pc, #608]	@ (8001370 <main+0x33c>)
 800110e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174

  result = bme68x_init(&bme680);
 8001112:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fcbd 	bl	8001a96 <bme68x_init>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e

  HAL_Delay(1000);  // remove ?? 
 8001122:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001126:	f002 fac1 	bl	80036ac <HAL_Delay>
  // Initialize the sensor
  if (result != BME68X_OK)
 800112a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800112e:	2b00      	cmp	r3, #0
 8001130:	d01c      	beq.n	800116c <main+0x138>
  {
    char error_msg[] = "BME680 Initialization Failed\r\n";
 8001132:	4b90      	ldr	r3, [pc, #576]	@ (8001374 <main+0x340>)
 8001134:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8001138:	461d      	mov	r5, r3
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001142:	c407      	stmia	r4!, {r0, r1, r2}
 8001144:	8023      	strh	r3, [r4, #0]
 8001146:	3402      	adds	r4, #2
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart6, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800114c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8b5 	bl	80002c0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001162:	487f      	ldr	r0, [pc, #508]	@ (8001360 <main+0x32c>)
 8001164:	f004 fb46 	bl	80057f4 <HAL_UART_Transmit>
    while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <main+0x134>
      ; // Halt on failure
  }

  conf.filter = BME68X_FILTER_OFF;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  // conf.odr = BME68X_ODR_NONE;  // verify data sheet
  conf.os_hum = BME68X_OS_16X;
 8001172:	2305      	movs	r3, #5
 8001174:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
  conf.os_temp = BME68X_OS_2X;
 8001178:	2302      	movs	r3, #2
 800117a:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
  conf.os_pres = BME68X_OS_1X;
 800117e:	2301      	movs	r3, #1
 8001180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  result = bme68x_set_conf(&conf, &bme680);
 8001184:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8001188:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fdc6 	bl	8001d20 <bme68x_set_conf>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
  if (result != BME68X_OK)
 800119a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d020      	beq.n	80011e4 <main+0x1b0>
  {
    char error_msg[] = "BME680 Config Failed\r\n";
 80011a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011aa:	4a73      	ldr	r2, [pc, #460]	@ (8001378 <main+0x344>)
 80011ac:	461c      	mov	r4, r3
 80011ae:	4615      	mov	r5, r2
 80011b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011b8:	6020      	str	r0, [r4, #0]
 80011ba:	3404      	adds	r4, #4
 80011bc:	8021      	strh	r1, [r4, #0]
 80011be:	3402      	adds	r4, #2
 80011c0:	0c0b      	lsrs	r3, r1, #16
 80011c2:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart6, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80011c4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f879 	bl	80002c0 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011da:	4861      	ldr	r0, [pc, #388]	@ (8001360 <main+0x32c>)
 80011dc:	f004 fb0a 	bl	80057f4 <HAL_UART_Transmit>
    while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <main+0x1ac>
      ; // Halt on failure
  }

  heatr_conf.enable = BME68X_ENABLE;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
  heatr_conf.heatr_temp = 300; // 300C !!!!! (for VOC need to read)
 80011ea:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80011ee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  heatr_conf.heatr_dur = 100;  // 100ms
 80011f2:	2364      	movs	r3, #100	@ 0x64
 80011f4:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
  //      char error_msg[] = "BME680 HEater Config Failed\r\n";
  //      HAL_UART_Transmit(&huart6, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
  //      while (1); // Halt on failure
  //  }

  float temp_offset = 0.0;
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
  float hum_offset = 0.0;
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Trigger measurement in forced mode
    if (bme68x_set_op_mode(BME68X_FORCED_MODE, &bme680) != BME68X_OK) {
 8001208:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800120c:	4619      	mov	r1, r3
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fe8a 	bl	8001f28 <bme68x_set_op_mode>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <main+0x1f6>
        HAL_UART_Transmit(&huart6, (uint8_t *)"Set op mode failed\r\n", 20, HAL_MAX_DELAY);
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800121e:	2214      	movs	r2, #20
 8001220:	4956      	ldr	r1, [pc, #344]	@ (800137c <main+0x348>)
 8001222:	484f      	ldr	r0, [pc, #316]	@ (8001360 <main+0x32c>)
 8001224:	f004 fae6 	bl	80057f4 <HAL_UART_Transmit>
        continue;
 8001228:	e094      	b.n	8001354 <main+0x320>
    }

    // Calculate delay period if heater is enabled.  Library will be added to process data later.
    del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme680) + (heatr_conf.heatr_dur * 1000);
 800122a:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 800122e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001232:	4619      	mov	r1, r3
 8001234:	2001      	movs	r0, #1
 8001236:	f000 fef9 	bl	800202c <bme68x_get_meas_dur>
 800123a:	4603      	mov	r3, r0
 800123c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8001240:	4611      	mov	r1, r2
 8001242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001246:	fb01 f202 	mul.w	r2, r1, r2
 800124a:	4413      	add	r3, r2
 800124c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    HAL_Delay(del_period / 1000); // Wait for measurement
 8001250:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001254:	4a4a      	ldr	r2, [pc, #296]	@ (8001380 <main+0x34c>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	099b      	lsrs	r3, r3, #6
 800125c:	4618      	mov	r0, r3
 800125e:	f002 fa25 	bl	80036ac <HAL_Delay>

    // Read data
    if (bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme680) == BME68X_OK) {
 8001262:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001266:	f107 02f3 	add.w	r2, r7, #243	@ 0xf3
 800126a:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 800126e:	2001      	movs	r0, #1
 8001270:	f000 ff50 	bl	8002114 <bme68x_get_data>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d168      	bne.n	800134c <main+0x318>
        float temperature = (data.temperature) + temp_offset;
 800127a:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 800127e:	ed97 7a66 	vldr	s14, [r7, #408]	@ 0x198
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
        float temp_f = (temperature * 9.0f / 5.0f) + 32.0f;
 800128a:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 800128e:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001292:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001296:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001384 <main+0x350>
 80012a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a6:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
        float humidity = (data.humidity) + hum_offset;
 80012aa:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 80012ae:	ed97 7a65 	vldr	s14, [r7, #404]	@ 0x194
 80012b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b6:	edc7 7a61 	vstr	s15, [r7, #388]	@ 0x184
        float gas_resistance = data.gas_resistance / 1000.0f; // Convert to kOhm
 80012ba:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 80012be:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001388 <main+0x354>
 80012c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c6:	edc7 7a60 	vstr	s15, [r7, #384]	@ 0x180

        char uart_buffer[150];
        sprintf(uart_buffer, "Temp: %.2f C (%.2f F) | Hum: %.2f %% | Press: %.2f hPa | Gas: %.2f kOhm\r\n",
 80012ca:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 80012ce:	f7ff f963 	bl	8000598 <__aeabi_f2d>
 80012d2:	e9c7 0100 	strd	r0, r1, [r7]
 80012d6:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 80012da:	f7ff f95d 	bl	8000598 <__aeabi_f2d>
 80012de:	4604      	mov	r4, r0
 80012e0:	460d      	mov	r5, r1
 80012e2:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_f2d>
 80012ea:	4680      	mov	r8, r0
 80012ec:	4689      	mov	r9, r1
                        temperature, temp_f, humidity, data.pressure / 100.0f, gas_resistance);
 80012ee:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80012f2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800138c <main+0x358>
 80012f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
        sprintf(uart_buffer, "Temp: %.2f C (%.2f F) | Hum: %.2f %% | Press: %.2f hPa | Gas: %.2f kOhm\r\n",
 80012fa:	ee16 0a90 	vmov	r0, s13
 80012fe:	f7ff f94b 	bl	8000598 <__aeabi_f2d>
 8001302:	4682      	mov	sl, r0
 8001304:	468b      	mov	fp, r1
 8001306:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800130a:	f7ff f945 	bl	8000598 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	f107 0008 	add.w	r0, r7, #8
 8001316:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800131a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800131e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001322:	e9cd 4500 	strd	r4, r5, [sp]
 8001326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800132a:	4919      	ldr	r1, [pc, #100]	@ (8001390 <main+0x35c>)
 800132c:	f005 fc9a 	bl	8006c64 <siprintf>
        HAL_UART_Transmit(&huart6, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ffc3 	bl	80002c0 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	b29a      	uxth	r2, r3
 800133e:	f107 0108 	add.w	r1, r7, #8
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001346:	4806      	ldr	r0, [pc, #24]	@ (8001360 <main+0x32c>)
 8001348:	f004 fa54 	bl	80057f4 <HAL_UART_Transmit>
    }

    HAL_Delay(2000);
 800134c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001350:	f002 f9ac 	bl	80036ac <HAL_Delay>
    if (bme68x_set_op_mode(BME68X_FORCED_MODE, &bme680) != BME68X_OK) {
 8001354:	e758      	b.n	8001208 <main+0x1d4>
 8001356:	bf00      	nop
 8001358:	200001f0 	.word	0x200001f0
 800135c:	0800a678 	.word	0x0800a678
 8001360:	20000244 	.word	0x20000244
 8001364:	0800a6f8 	.word	0x0800a6f8
 8001368:	08001551 	.word	0x08001551
 800136c:	080015a9 	.word	0x080015a9
 8001370:	08001601 	.word	0x08001601
 8001374:	0800a714 	.word	0x0800a714
 8001378:	0800a734 	.word	0x0800a734
 800137c:	0800a694 	.word	0x0800a694
 8001380:	10624dd3 	.word	0x10624dd3
 8001384:	42000000 	.word	0x42000000
 8001388:	447a0000 	.word	0x447a0000
 800138c:	42c80000 	.word	0x42c80000
 8001390:	0800a6ac 	.word	0x0800a6ac

08001394 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	@ 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	2234      	movs	r2, #52	@ 0x34
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fbd6 	bl	8007b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <SystemClock_Config+0xb4>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <SystemClock_Config+0xb4>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <SystemClock_Config+0xb4>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	2300      	movs	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <SystemClock_Config+0xb8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <SystemClock_Config+0xb8>)
 80013de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b19      	ldr	r3, [pc, #100]	@ (800144c <SystemClock_Config+0xb8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f8:	2310      	movs	r3, #16
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4618      	mov	r0, r3
 8001406:	f003 ff21 	bl	800524c <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001410:	f000 f952 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001414:	230f      	movs	r3, #15
 8001416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fd2c 	bl	8004e8c <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800143a:	f000 f93d 	bl	80016b8 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3750      	adds	r7, #80	@ 0x50
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000

08001450 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001456:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <MX_I2C2_Init+0x54>)
 8001458:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_I2C2_Init+0x50>)
 800145c:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <MX_I2C2_Init+0x58>)
 800145e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_I2C2_Init+0x50>)
 800146e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001472:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_I2C2_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_I2C2_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_I2C2_Init+0x50>)
 800148e:	f002 fbab 	bl	8003be8 <HAL_I2C_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001498:	f000 f90e 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200001f0 	.word	0x200001f0
 80014a4:	40005800 	.word	0x40005800
 80014a8:	000186a0 	.word	0x000186a0

080014ac <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <MX_USART6_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_USART6_UART_Init+0x4c>)
 80014e4:	f004 f936 	bl	8005754 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014ee:	f000 f8e3 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000244 	.word	0x20000244
 80014fc:	40011400 	.word	0x40011400

08001500 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <MX_GPIO_Init+0x4c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a0f      	ldr	r2, [pc, #60]	@ (800154c <MX_GPIO_Init+0x4c>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <MX_GPIO_Init+0x4c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_GPIO_Init+0x4c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a08      	ldr	r2, [pc, #32]	@ (800154c <MX_GPIO_Init+0x4c>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_GPIO_Init+0x4c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <bme68x_i2c_read>:

/* USER CODE BEGIN 4 */
int8_t bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af04      	add	r7, sp, #16
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t *)intf_ptr;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, (uint16_t)(dev_addr << 1), reg_addr,
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	b29b      	uxth	r3, r3
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	b299      	uxth	r1, r3
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	b29b      	uxth	r3, r3
 8001576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800157a:	9002      	str	r0, [sp, #8]
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2301      	movs	r3, #1
 8001584:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <bme68x_i2c_read+0x54>)
 8001586:	f002 fd6d 	bl	8004064 <HAL_I2C_Mem_Read>
 800158a:	4603      	mov	r3, r0
 800158c:	75bb      	strb	r3, [r7, #22]
                                                I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY);
    return (status == HAL_OK) ? 0 : -1;
 800158e:	7dbb      	ldrb	r3, [r7, #22]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <bme68x_i2c_read+0x48>
 8001594:	2300      	movs	r3, #0
 8001596:	e001      	b.n	800159c <bme68x_i2c_read+0x4c>
 8001598:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001f0 	.word	0x200001f0

080015a8 <bme68x_i2c_write>:

int8_t bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af04      	add	r7, sp, #16
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t *)intf_ptr;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c2, (uint16_t)(dev_addr << 1), reg_addr,
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	b299      	uxth	r1, r3
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015d2:	9002      	str	r0, [sp, #8]
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2301      	movs	r3, #1
 80015dc:	4807      	ldr	r0, [pc, #28]	@ (80015fc <bme68x_i2c_write+0x54>)
 80015de:	f002 fc47 	bl	8003e70 <HAL_I2C_Mem_Write>
 80015e2:	4603      	mov	r3, r0
 80015e4:	75bb      	strb	r3, [r7, #22]
                                                 I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len,
                                                 HAL_MAX_DELAY);
    return (status == HAL_OK) ? 0 : -1;
 80015e6:	7dbb      	ldrb	r3, [r7, #22]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <bme68x_i2c_write+0x48>
 80015ec:	2300      	movs	r3, #0
 80015ee:	e001      	b.n	80015f4 <bme68x_i2c_write+0x4c>
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200001f0 	.word	0x200001f0

08001600 <bme68x_delay_us>:

void bme68x_delay_us(uint32_t period_us, void *intf_ptr) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    HAL_Delay(period_us / 1000); // Convert microseconds to milliseconds
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <bme68x_delay_us+0x24>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	099b      	lsrs	r3, r3, #6
 8001614:	4618      	mov	r0, r3
 8001616:	f002 f849 	bl	80036ac <HAL_Delay>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	10624dd3 	.word	0x10624dd3

08001628 <I2C_Scan>:

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b090      	sub	sp, #64	@ 0x40
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  char uart_buffer[50];
  HAL_UART_Transmit(&huart6, (uint8_t *)"Scanning I2C bus...\r\n", strlen("Scanning I2C bus...\r\n"), HAL_MAX_DELAY);
 8001630:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001634:	2215      	movs	r2, #21
 8001636:	491c      	ldr	r1, [pc, #112]	@ (80016a8 <I2C_Scan+0x80>)
 8001638:	481c      	ldr	r0, [pc, #112]	@ (80016ac <I2C_Scan+0x84>)
 800163a:	f004 f8db 	bl	80057f4 <HAL_UART_Transmit>

  for (uint16_t i = 0; i < 128; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001642:	e022      	b.n	800168a <I2C_Scan+0x62>
      if (HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 1, 10) == HAL_OK) {
 8001644:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	b299      	uxth	r1, r3
 800164a:	230a      	movs	r3, #10
 800164c:	2201      	movs	r2, #1
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f002 ff3a 	bl	80044c8 <HAL_I2C_IsDeviceReady>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d114      	bne.n	8001684 <I2C_Scan+0x5c>
          sprintf(uart_buffer, "Device found at 0x%02X\r\n", i);
 800165a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4913      	ldr	r1, [pc, #76]	@ (80016b0 <I2C_Scan+0x88>)
 8001662:	4618      	mov	r0, r3
 8001664:	f005 fafe 	bl	8006c64 <siprintf>
          HAL_UART_Transmit(&huart6, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fe27 	bl	80002c0 <strlen>
 8001672:	4603      	mov	r3, r0
 8001674:	b29a      	uxth	r2, r3
 8001676:	f107 010c 	add.w	r1, r7, #12
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800167e:	480b      	ldr	r0, [pc, #44]	@ (80016ac <I2C_Scan+0x84>)
 8001680:	f004 f8b8 	bl	80057f4 <HAL_UART_Transmit>
  for (uint16_t i = 0; i < 128; i++) {
 8001684:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001686:	3301      	adds	r3, #1
 8001688:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800168a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800168c:	2b7f      	cmp	r3, #127	@ 0x7f
 800168e:	d9d9      	bls.n	8001644 <I2C_Scan+0x1c>
      }
  }

  HAL_UART_Transmit(&huart6, (uint8_t *)"I2C scan complete.\r\n", strlen("I2C scan complete.\r\n"), HAL_MAX_DELAY);
 8001690:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001694:	2214      	movs	r2, #20
 8001696:	4907      	ldr	r1, [pc, #28]	@ (80016b4 <I2C_Scan+0x8c>)
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <I2C_Scan+0x84>)
 800169a:	f004 f8ab 	bl	80057f4 <HAL_UART_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3740      	adds	r7, #64	@ 0x40
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	0800a74c 	.word	0x0800a74c
 80016ac:	20000244 	.word	0x20000244
 80016b0:	0800a764 	.word	0x0800a764
 80016b4:	0800a780 	.word	0x0800a780

080016b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <Error_Handler+0x8>

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	@ (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	@ (8001798 <HAL_I2C_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12c      	bne.n	8001790 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <HAL_I2C_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a17      	ldr	r2, [pc, #92]	@ (800179c <HAL_I2C_MspInit+0x88>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_I2C_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001752:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001758:	2312      	movs	r3, #18
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001764:	2304      	movs	r3, #4
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <HAL_I2C_MspInit+0x8c>)
 8001770:	f002 f8a6 	bl	80038c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_I2C_MspInit+0x88>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_I2C_MspInit+0x88>)
 800177e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001782:	6413      	str	r3, [r2, #64]	@ 0x40
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_I2C_MspInit+0x88>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	@ 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40005800 	.word	0x40005800
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	@ 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <HAL_UART_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12c      	bne.n	8001820 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_UART_MspInit+0x88>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a17      	ldr	r2, [pc, #92]	@ (800182c <HAL_UART_MspInit+0x88>)
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_UART_MspInit+0x88>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <HAL_UART_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a10      	ldr	r2, [pc, #64]	@ (800182c <HAL_UART_MspInit+0x88>)
 80017ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <HAL_UART_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80017fe:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001810:	2308      	movs	r3, #8
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <HAL_UART_MspInit+0x8c>)
 800181c:	f002 f850 	bl	80038c0 <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	@ 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40011400 	.word	0x40011400
 800182c:	40023800 	.word	0x40023800
 8001830:	40021800 	.word	0x40021800

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <NMI_Handler+0x4>

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <MemManage_Handler+0x4>

0800184c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <UsageFault_Handler+0x4>

0800185c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188a:	f001 feef 	bl	800366c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}

08001892 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  return 1;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_kill>:

int _kill(int pid, int sig)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ac:	f006 f95e 	bl	8007b6c <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2216      	movs	r2, #22
 80018b4:	601a      	str	r2, [r3, #0]
  return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_exit>:

void _exit (int status)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffe7 	bl	80018a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <_exit+0x12>

080018d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00a      	b.n	8001900 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ea:	f3af 8000 	nop.w
 80018ee:	4601      	mov	r1, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <_read+0x12>
  }

  return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e009      	b.n	8001938 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	dbf1      	blt.n	8001924 <_write+0x12>
  }
  return len;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_close>:

int _close(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001972:	605a      	str	r2, [r3, #4]
  return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_isatty>:

int _isatty(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f006 f8c2 	bl	8007b6c <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20050000 	.word	0x20050000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	2000028c 	.word	0x2000028c
 8001a1c:	200003e0 	.word	0x200003e0

08001a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a48:	f7ff ffea 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a4e:	490d      	ldr	r1, [pc, #52]	@ (8001a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a50:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a64:	4c0a      	ldr	r4, [pc, #40]	@ (8001a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a72:	f006 f881 	bl	8007b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a76:	f7ff fadd 	bl	8001034 <main>
  bx  lr    
 8001a7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a88:	0800ac84 	.word	0x0800ac84
  ldr r2, =_sbss
 8001a8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a90:	200003e0 	.word	0x200003e0

08001a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC_IRQHandler>

08001a96 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8fb 	bl	8001c9a <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	20d0      	movs	r0, #208	@ 0xd0
 8001aac:	f000 f8b1 	bl	8001c12 <bme68x_get_regs>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8001ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d114      	bne.n	8001ae6 <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b61      	cmp	r3, #97	@ 0x61
 8001ac2:	d10e      	bne.n	8001ae2 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f001 fd61 	bl	800358c <read_variant_id>
 8001aca:	4603      	mov	r3, r0
 8001acc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d107      	bne.n	8001ae6 <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f001 fc54 	bl	8003384 <get_calib_data>
 8001adc:	4603      	mov	r3, r0
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e001      	b.n	8001ae6 <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8001ae2:	23fd      	movs	r3, #253	@ 0xfd
 8001ae4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001af2:	b5b0      	push	{r4, r5, r7, lr}
 8001af4:	b08a      	sub	sp, #40	@ 0x28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f001 fb9d 	bl	8003252 <null_ptr_check>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8001b1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d16c      	bne.n	8001c00 <bme68x_set_regs+0x10e>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d069      	beq.n	8001c00 <bme68x_set_regs+0x10e>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d066      	beq.n	8001c00 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d05d      	beq.n	8001bf4 <bme68x_set_regs+0x102>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b0a      	cmp	r3, #10
 8001b3c:	d85a      	bhi.n	8001bf4 <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b42:	e034      	b.n	8001bae <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	7b1b      	ldrb	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d118      	bne.n	8001b7e <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8001b4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 faba 	bl	80030d0 <set_mem_page>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001b62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	3328      	adds	r3, #40	@ 0x28
 8001b76:	443b      	add	r3, r7
 8001b78:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001b7c:	e009      	b.n	8001b92 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8001b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	441a      	add	r2, r3
 8001b84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	3328      	adds	r3, #40	@ 0x28
 8001b8c:	443b      	add	r3, r7
 8001b8e:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001b92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	441a      	add	r2, r3
 8001b98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	3328      	adds	r3, #40	@ 0x28
 8001ba2:	443b      	add	r3, r7
 8001ba4:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8001ba8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001baa:	3301      	adds	r3, #1
 8001bac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d8c6      	bhi.n	8001b44 <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8001bb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11e      	bne.n	8001bfc <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001bc2:	7c38      	ldrb	r0, [r7, #16]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	1e5a      	subs	r2, r3, #1
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685d      	ldr	r5, [r3, #4]
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	1c59      	adds	r1, r3, #1
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	47a0      	blx	r4
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d007      	beq.n	8001bfc <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001bec:	23fe      	movs	r3, #254	@ 0xfe
 8001bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8001bf2:	e003      	b.n	8001bfc <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8001bf4:	23fc      	movs	r3, #252	@ 0xfc
 8001bf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001bfa:	e004      	b.n	8001c06 <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8001bfc:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001bfe:	e002      	b.n	8001c06 <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001c00:	23ff      	movs	r3, #255	@ 0xff
 8001c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001c06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}

08001c12 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001c12:	b590      	push	{r4, r7, lr}
 8001c14:	b087      	sub	sp, #28
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4603      	mov	r3, r0
 8001c20:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c22:	6838      	ldr	r0, [r7, #0]
 8001c24:	f001 fb15 	bl	8003252 <null_ptr_check>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8001c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d12a      	bne.n	8001c8a <bme68x_get_regs+0x78>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d027      	beq.n	8001c8a <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	7b1b      	ldrb	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10e      	bne.n	8001c60 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	6839      	ldr	r1, [r7, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fa42 	bl	80030d0 <set_mem_page>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8001c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c5e:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	7bf8      	ldrb	r0, [r7, #15]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	47a0      	blx	r4
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8001c84:	23fe      	movs	r3, #254	@ 0xfe
 8001c86:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8001c88:	e001      	b.n	8001c8e <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001c8a:	23ff      	movs	r3, #255	@ 0xff
 8001c8c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}

08001c9a <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001ca2:	23e0      	movs	r3, #224	@ 0xe0
 8001ca4:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001ca6:	23b6      	movs	r3, #182	@ 0xb6
 8001ca8:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f001 fad1 	bl	8003252 <null_ptr_check>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d12b      	bne.n	8001d14 <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7b1b      	ldrb	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d104      	bne.n	8001cce <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f001 fa68 	bl	800319a <get_mem_page>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11e      	bne.n	8001d14 <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001cd6:	f107 010d 	add.w	r1, r7, #13
 8001cda:	f107 000e 	add.w	r0, r7, #14
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f7ff ff06 	bl	8001af2 <bme68x_set_regs>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d110      	bne.n	8001d14 <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6852      	ldr	r2, [r2, #4]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001d00:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7b1b      	ldrb	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d104      	bne.n	8001d14 <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f001 fa45 	bl	800319a <get_mem_page>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	77bb      	strb	r3, [r7, #30]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001d32:	4a7c      	ldr	r2, [pc, #496]	@ (8001f24 <bme68x_set_conf+0x204>)
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d3c:	6018      	str	r0, [r3, #0]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	2300      	movs	r3, #0
 8001d48:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f94a 	bl	8001fea <bme68x_get_op_mode>
 8001d56:	4603      	mov	r3, r0
 8001d58:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8001d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001d62:	6839      	ldr	r1, [r7, #0]
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f8df 	bl	8001f28 <bme68x_set_op_mode>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8001d74:	23ff      	movs	r3, #255	@ 0xff
 8001d76:	77fb      	strb	r3, [r7, #31]
 8001d78:	e0b2      	b.n	8001ee0 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8001d7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 80ae 	bne.w	8001ee0 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001d84:	7d38      	ldrb	r0, [r7, #20]
 8001d86:	f107 010c 	add.w	r1, r7, #12
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	f7ff ff40 	bl	8001c12 <bme68x_get_regs>
 8001d92:	4603      	mov	r3, r0
 8001d94:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8001d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d108      	bne.n	8001db8 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3303      	adds	r3, #3
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	2107      	movs	r1, #7
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fa22 	bl	80031f8 <boundary_check>
 8001db4:	4603      	mov	r3, r0
 8001db6:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001db8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d108      	bne.n	8001dd2 <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	2105      	movs	r1, #5
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 fa15 	bl	80031f8 <boundary_check>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d108      	bne.n	8001dec <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	2105      	movs	r1, #5
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fa08 	bl	80031f8 <boundary_check>
 8001de8:	4603      	mov	r3, r0
 8001dea:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	2105      	movs	r1, #5
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 f9fc 	bl	80031f8 <boundary_check>
 8001e00:	4603      	mov	r3, r0
 8001e02:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d108      	bne.n	8001e1e <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	2108      	movs	r1, #8
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 f9ef 	bl	80031f8 <boundary_check>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001e1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d15c      	bne.n	8001ee0 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8001e26:	7c3b      	ldrb	r3, [r7, #16]
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	f023 031c 	bic.w	r3, r3, #28
 8001e2e:	b25a      	sxtb	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	78db      	ldrb	r3, [r3, #3]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	f003 031c 	and.w	r3, r3, #28
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	b25a      	sxtb	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	785b      	ldrb	r3, [r3, #1]
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	f023 031c 	bic.w	r3, r3, #28
 8001e68:	b25a      	sxtb	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	789b      	ldrb	r3, [r3, #2]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	f003 031c 	and.w	r3, r3, #28
 8001e76:	b25b      	sxtb	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001e80:	7b7b      	ldrb	r3, [r7, #13]
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	f023 0307 	bic.w	r3, r3, #7
 8001e88:	b25a      	sxtb	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	791b      	ldrb	r3, [r3, #4]
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d004      	beq.n	8001eb0 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001eb0:	7c3b      	ldrb	r3, [r7, #16]
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	b25a      	sxtb	r2, r3
 8001eba:	7fbb      	ldrb	r3, [r7, #30]
 8001ebc:	015b      	lsls	r3, r3, #5
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001ec8:	7b3b      	ldrb	r3, [r7, #12]
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ed0:	b25a      	sxtb	r2, r3
 8001ed2:	7f7b      	ldrb	r3, [r7, #29]
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001ee0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001ee8:	f107 010c 	add.w	r1, r7, #12
 8001eec:	f107 0014 	add.w	r0, r7, #20
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2205      	movs	r2, #5
 8001ef4:	f7ff fdfd 	bl	8001af2 <bme68x_set_regs>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001efc:	7f3b      	ldrb	r3, [r7, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <bme68x_set_conf+0x1f8>
 8001f02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001f0a:	7f3b      	ldrb	r3, [r7, #28]
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f80a 	bl	8001f28 <bme68x_set_op_mode>
 8001f14:	4603      	mov	r3, r0
 8001f16:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001f18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	0800a798 	.word	0x0800a798

08001f28 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001f38:	2374      	movs	r3, #116	@ 0x74
 8001f3a:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001f3c:	f107 010d 	add.w	r1, r7, #13
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	2074      	movs	r0, #116	@ 0x74
 8001f46:	f7ff fe64 	bl	8001c12 <bme68x_get_regs>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d11d      	bne.n	8001f92 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8001f56:	7b7b      	ldrb	r3, [r7, #13]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d016      	beq.n	8001f92 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001f64:	7b7b      	ldrb	r3, [r7, #13]
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001f6e:	f107 010d 	add.w	r1, r7, #13
 8001f72:	f107 000c 	add.w	r0, r7, #12
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f7ff fdba 	bl	8001af2 <bme68x_set_regs>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	6852      	ldr	r2, [r2, #4]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001f90:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <bme68x_set_op_mode+0x78>
 8001f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0cd      	beq.n	8001f3c <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01b      	beq.n	8001fde <bme68x_set_op_mode+0xb6>
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d117      	bne.n	8001fde <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001fae:	7b7b      	ldrb	r3, [r7, #13]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001fca:	f107 010d 	add.w	r1, r7, #13
 8001fce:	f107 000c 	add.w	r0, r7, #12
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f7ff fd8c 	bl	8001af2 <bme68x_set_regs>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00f      	beq.n	800201a <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001ffa:	f107 010e 	add.w	r1, r7, #14
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2201      	movs	r2, #1
 8002002:	2074      	movs	r0, #116	@ 0x74
 8002004:	f7ff fe05 	bl	8001c12 <bme68x_get_regs>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e001      	b.n	800201e <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800201a:	23ff      	movs	r3, #255	@ 0xff
 800201c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	@ 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 800203e:	4a34      	ldr	r2, [pc, #208]	@ (8002110 <bme68x_get_meas_dur+0xe4>)
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002048:	6018      	str	r0, [r3, #0]
 800204a:	3304      	adds	r3, #4
 800204c:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d058      	beq.n	8002106 <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3301      	adds	r3, #1
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	2105      	movs	r1, #5
 800205c:	4618      	mov	r0, r3
 800205e:	f001 f8cb 	bl	80031f8 <boundary_check>
 8002062:	4603      	mov	r3, r0
 8002064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME68X_OK)
 8002068:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3302      	adds	r3, #2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	2105      	movs	r1, #5
 8002078:	4618      	mov	r0, r3
 800207a:	f001 f8bd 	bl	80031f8 <boundary_check>
 800207e:	4603      	mov	r3, r0
 8002080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8002084:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002088:	2b00      	cmp	r3, #0
 800208a:	d108      	bne.n	800209e <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	2105      	movs	r1, #5
 8002092:	4618      	mov	r0, r3
 8002094:	f001 f8b0 	bl	80031f8 <boundary_check>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d12f      	bne.n	8002106 <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	785b      	ldrb	r3, [r3, #1]
 80020aa:	3328      	adds	r3, #40	@ 0x28
 80020ac:	443b      	add	r3, r7
 80020ae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80020b2:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	789b      	ldrb	r3, [r3, #2]
 80020b8:	3328      	adds	r3, #40	@ 0x28
 80020ba:	443b      	add	r3, r7
 80020bc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80020c0:	461a      	mov	r2, r3
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	3328      	adds	r3, #40	@ 0x28
 80020ce:	443b      	add	r3, r7
 80020d0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80020d4:	461a      	mov	r2, r3
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 80020ee:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 80020f6:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002104:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8002106:	6a3b      	ldr	r3, [r7, #32]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3728      	adds	r7, #40	@ 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	0800a7a0 	.word	0x0800a7a0

08002114 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b09a      	sub	sp, #104	@ 0x68
 8002118:	af00      	add	r7, sp, #0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800212a:	2300      	movs	r3, #0
 800212c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 8002136:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	2248      	movs	r2, #72	@ 0x48
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f005 fd02 	bl	8007b54 <memset>

    field_ptr[0] = &field_data[0];
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	65bb      	str	r3, [r7, #88]	@ 0x58
    field_ptr[1] = &field_data[1];
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	3318      	adds	r3, #24
 800215c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    field_ptr[2] = &field_data[2];
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	3330      	adds	r3, #48	@ 0x30
 8002164:	663b      	str	r3, [r7, #96]	@ 0x60

    rslt = null_ptr_check(dev);
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	f001 f873 	bl	8003252 <null_ptr_check>
 800216c:	4603      	mov	r3, r0
 800216e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 8002172:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80c1 	bne.w	80022fe <bme68x_get_data+0x1ea>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80bd 	beq.w	80022fe <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d11c      	bne.n	80021c4 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	2000      	movs	r0, #0
 8002190:	f000 fc2e 	bl	80029f0 <read_field_data>
 8002194:	4603      	mov	r3, r0
 8002196:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (rslt == BME68X_OK)
 800219a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 80a1 	bne.w	80022e6 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	da03      	bge.n	80021b6 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80021b4:	e097      	b.n	80022e6 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 80021bc:	2302      	movs	r3, #2
 80021be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021c2:	e090      	b.n	80022e6 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <bme68x_get_data+0xbe>
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	f040 8087 	bne.w	80022e0 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 80021d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fd4d 	bl	8002c78 <read_all_field_data>
 80021de:	4603      	mov	r3, r0
 80021e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

            new_fields = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80021f0:	e014      	b.n	800221c <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 80021f2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3368      	adds	r3, #104	@ 0x68
 80021fa:	443b      	add	r3, r7
 80021fc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b25b      	sxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	da04      	bge.n	8002212 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8002208:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800220c:	3301      	adds	r3, #1
 800220e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8002212:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002216:	3301      	adds	r3, #1
 8002218:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800221c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002220:	2b02      	cmp	r3, #2
 8002222:	d803      	bhi.n	800222c <bme68x_get_data+0x118>
 8002224:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0e2      	beq.n	80021f2 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 800222c:	2300      	movs	r3, #0
 800222e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8002232:	e01c      	b.n	800226e <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8002234:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002238:	3301      	adds	r3, #1
 800223a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800223e:	e00d      	b.n	800225c <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8002240:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002244:	f897 1065 	ldrb.w	r1, [r7, #101]	@ 0x65
 8002248:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800224c:	4618      	mov	r0, r3
 800224e:	f001 f81f 	bl	8003290 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8002252:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002256:	3301      	adds	r3, #1
 8002258:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800225c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002260:	2b02      	cmp	r3, #2
 8002262:	d9ed      	bls.n	8002240 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8002264:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002268:	3301      	adds	r3, #1
 800226a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800226e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002272:	2b01      	cmp	r3, #1
 8002274:	d803      	bhi.n	800227e <bme68x_get_data+0x16a>
 8002276:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0da      	beq.n	8002234 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8002284:	e01c      	b.n	80022c0 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8002286:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	3368      	adds	r3, #104	@ 0x68
 800228e:	443b      	add	r3, r7
 8002290:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8002294:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	4413      	add	r3, r2
 80022a6:	461c      	mov	r4, r3
 80022a8:	460d      	mov	r5, r1
 80022aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022b2:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80022b6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80022ba:	3301      	adds	r3, #1
 80022bc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80022c0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d803      	bhi.n	80022d0 <bme68x_get_data+0x1bc>
 80022c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0da      	beq.n	8002286 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 80022d0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d106      	bne.n	80022e6 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 80022d8:	2302      	movs	r3, #2
 80022da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (new_fields == 0)
 80022de:	e002      	b.n	80022e6 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (n_data == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 80022ec:	23ff      	movs	r3, #255	@ 0xff
 80022ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (n_data == NULL)
 80022f2:	e007      	b.n	8002304 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80022fa:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80022fc:	e002      	b.n	8002304 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80022fe:	23ff      	movs	r3, #255	@ 0xff
 8002300:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }

    return rslt;
 8002304:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8002308:	4618      	mov	r0, r3
 800230a:	3768      	adds	r7, #104	@ 0x68
 800230c:	46bd      	mov	sp, r7
 800230e:	bdb0      	pop	{r4, r5, r7, pc}

08002310 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002324:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002408 <calc_temperature+0xf8>
 8002328:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	8bdb      	ldrh	r3, [r3, #30]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002338:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 800240c <calc_temperature+0xfc>
 800233c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002340:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002356:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002364:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002410 <calc_temperature+0x100>
 8002368:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	8bdb      	ldrh	r3, [r3, #30]
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002378:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8002414 <calc_temperature+0x104>
 800237c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002380:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238e:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8002410 <calc_temperature+0x100>
 8002392:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	8bdb      	ldrh	r3, [r3, #30]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80023a2:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002414 <calc_temperature+0x104>
 80023a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80023ae:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80023c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80023d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80023d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80023e8:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002418 <calc_temperature+0x108>
 80023ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f0:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	ee07 3a90 	vmov	s15, r3
}
 80023fa:	eeb0 0a67 	vmov.f32	s0, s15
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	46800000 	.word	0x46800000
 800240c:	44800000 	.word	0x44800000
 8002410:	48000000 	.word	0x48000000
 8002414:	46000000 	.word	0x46000000
 8002418:	45a00000 	.word	0x45a00000

0800241c <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800242c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002434:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002670 <calc_pressure+0x254>
 8002438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800243c:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8002440:	edd7 7a04 	vldr	s15, [r7, #16]
 8002444:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002456:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 8002674 <calc_pressure+0x258>
 800245a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002474:	edd7 7a04 	vldr	s15, [r7, #16]
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002480:	ed97 7a03 	vldr	s14, [r7, #12]
 8002484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002488:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 800248c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002490:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002494:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a6:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8002678 <calc_pressure+0x25c>
 80024aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b2:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80024c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800267c <calc_pressure+0x260>
 80024d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f6:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002680 <calc_pressure+0x264>
 80024fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024fe:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8002502:	ed97 7a04 	vldr	s14, [r7, #16]
 8002506:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002684 <calc_pressure+0x268>
 800250a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002534:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002688 <calc_pressure+0x26c>
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8002540:	edd7 7a04 	vldr	s15, [r7, #16]
 8002544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002548:	ee17 3a90 	vmov	r3, s15
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8081 	beq.w	8002654 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8002552:	ed97 7a03 	vldr	s14, [r7, #12]
 8002556:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800268c <calc_pressure+0x270>
 800255a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800255e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002566:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002690 <calc_pressure+0x274>
 800256a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800256e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002576:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002588:	edd7 7a05 	vldr	s15, [r7, #20]
 800258c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002590:	edd7 7a05 	vldr	s15, [r7, #20]
 8002594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002598:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002694 <calc_pressure+0x278>
 800259c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025a0:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b2:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002684 <calc_pressure+0x268>
 80025b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80025c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ca:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002698 <calc_pressure+0x27c>
 80025ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025d2:	edd7 6a05 	vldr	s13, [r7, #20]
 80025d6:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8002698 <calc_pressure+0x27c>
 80025da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e2:	edd7 6a05 	vldr	s13, [r7, #20]
 80025e6:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8002698 <calc_pressure+0x27c>
 80025ea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002600:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8002674 <calc_pressure+0x258>
 8002604:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260c:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8002610:	ed97 7a04 	vldr	s14, [r7, #16]
 8002614:	edd7 7a03 	vldr	s15, [r7, #12]
 8002618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800261c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002632:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800269c <calc_pressure+0x280>
 8002636:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800263a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002646:	ed97 7a05 	vldr	s14, [r7, #20]
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264e:	edc7 7a05 	vstr	s15, [r7, #20]
 8002652:	e002      	b.n	800265a <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	ee07 3a90 	vmov	s15, r3
}
 8002660:	eeb0 0a67 	vmov.f32	s0, s15
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	477a0000 	.word	0x477a0000
 8002674:	48000000 	.word	0x48000000
 8002678:	47800000 	.word	0x47800000
 800267c:	46800000 	.word	0x46800000
 8002680:	49000000 	.word	0x49000000
 8002684:	47000000 	.word	0x47000000
 8002688:	49800000 	.word	0x49800000
 800268c:	45800000 	.word	0x45800000
 8002690:	45c35000 	.word	0x45c35000
 8002694:	4f000000 	.word	0x4f000000
 8002698:	43800000 	.word	0x43800000
 800269c:	43000000 	.word	0x43000000

080026a0 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	@ 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80026b2:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 800281c <calc_humidity+0x17c>
 80026b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ba:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	8a1b      	ldrh	r3, [r3, #16]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80026d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80026ee:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80026f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	8a5b      	ldrh	r3, [r3, #18]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002712:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002820 <calc_humidity+0x180>
 8002716:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002728:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8002824 <calc_humidity+0x184>
 800272c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002730:	edd7 7a06 	vldr	s15, [r7, #24]
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800273c:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002828 <calc_humidity+0x188>
 8002752:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002756:	edd7 7a06 	vldr	s15, [r7, #24]
 800275a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800275e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002762:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8002766:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 800276e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	7ddb      	ldrb	r3, [r3, #23]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002786:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002824 <calc_humidity+0x184>
 800278a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800278e:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800282c <calc_humidity+0x18c>
 80027a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a8:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80027ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80027b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80027b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80027d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d8:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 80027dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80027e0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002830 <calc_humidity+0x190>
 80027e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	dd02      	ble.n	80027f4 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 80027ee:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <calc_humidity+0x194>)
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e009      	b.n	8002808 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 80027f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80027f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002800:	d502      	bpl.n	8002808 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	ee07 3a90 	vmov	s15, r3
}
 800280e:	eeb0 0a67 	vmov.f32	s0, s15
 8002812:	3724      	adds	r7, #36	@ 0x24
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	45a00000 	.word	0x45a00000
 8002820:	48800000 	.word	0x48800000
 8002824:	46800000 	.word	0x46800000
 8002828:	49800000 	.word	0x49800000
 800282c:	4a000000 	.word	0x4a000000
 8002830:	42c80000 	.word	0x42c80000
 8002834:	42c80000 	.word	0x42c80000

08002838 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8002838:	b4b0      	push	{r4, r5, r7}
 800283a:	b0a9      	sub	sp, #164	@ 0xa4
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	603a      	str	r2, [r7, #0]
 8002842:	80fb      	strh	r3, [r7, #6]
 8002844:	460b      	mov	r3, r1
 8002846:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002852:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8002856:	797b      	ldrb	r3, [r7, #5]
 8002858:	2201      	movs	r2, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float lookup_k1_range[16] = {
 800286a:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <calc_gas_resistance_low+0x12c>)
 800286c:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002870:	461d      	mov	r5, r3
 8002872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8002886:	4b38      	ldr	r3, [pc, #224]	@ (8002968 <calc_gas_resistance_low+0x130>)
 8002888:	f107 0408 	add.w	r4, r7, #8
 800288c:	461d      	mov	r5, r3
 800288e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800289e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80028b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800296c <calc_gas_resistance_low+0x134>
 80028bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c0:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 80028c4:	797b      	ldrb	r3, [r7, #5]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	33a0      	adds	r3, #160	@ 0xa0
 80028ca:	443b      	add	r3, r7
 80028cc:	3b58      	subs	r3, #88	@ 0x58
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002970 <calc_gas_resistance_low+0x138>
 80028d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028e2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80028ee:	797b      	ldrb	r3, [r7, #5]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	33a0      	adds	r3, #160	@ 0xa0
 80028f4:	443b      	add	r3, r7
 80028f6:	3b98      	subs	r3, #152	@ 0x98
 80028f8:	ed93 7a00 	vldr	s14, [r3]
 80028fc:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002970 <calc_gas_resistance_low+0x138>
 8002900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800290c:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8002910:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002914:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002974 <calc_gas_resistance_low+0x13c>
 8002918:	ee27 7a87 	vmul.f32	s14, s15, s14
 800291c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002924:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002928:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002978 <calc_gas_resistance_low+0x140>
 800292c:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8002930:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8002934:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800293c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800294c:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    return calc_gas_res;
 8002950:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002954:	ee07 3a90 	vmov	s15, r3
}
 8002958:	eeb0 0a67 	vmov.f32	s0, s15
 800295c:	37a4      	adds	r7, #164	@ 0xa4
 800295e:	46bd      	mov	sp, r7
 8002960:	bcb0      	pop	{r4, r5, r7}
 8002962:	4770      	bx	lr
 8002964:	0800a7a8 	.word	0x0800a7a8
 8002968:	0800a7e8 	.word	0x0800a7e8
 800296c:	44a78000 	.word	0x44a78000
 8002970:	42c80000 	.word	0x42c80000
 8002974:	340637bd 	.word	0x340637bd
 8002978:	44000000 	.word	0x44000000

0800297c <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	80fb      	strh	r3, [r7, #6]
 8002988:	4613      	mov	r3, r2
 800298a:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 800298c:	797b      	ldrb	r3, [r7, #5]
 800298e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002992:	fa22 f303 	lsr.w	r3, r2, r3
 8002996:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800299e:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b0:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029bc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80029ec <calc_gas_resistance_high+0x70>
 80029c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d2:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	ee07 3a90 	vmov	s15, r3
}
 80029dc:	eeb0 0a67 	vmov.f32	s0, s15
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	49742400 	.word	0x49742400

080029f0 <read_field_data>:
    return durval;
}

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002a16:	2305      	movs	r3, #5
 8002a18:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME68X_OK))
 8002a1c:	e11d      	b.n	8002c5a <read_field_data+0x26a>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	461a      	mov	r2, r3
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	4413      	add	r3, r2
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	331d      	adds	r3, #29
 8002a2a:	b2d8      	uxtb	r0, r3
 8002a2c:	f107 0110 	add.w	r1, r7, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2211      	movs	r2, #17
 8002a34:	f7ff f8ed 	bl	8001c12 <bme68x_get_regs>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 8002a44:	23ff      	movs	r3, #255	@ 0xff
 8002a46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8002a4a:	e10f      	b.n	8002c6c <read_field_data+0x27c>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002a4c:	7c3b      	ldrb	r3, [r7, #16]
 8002a4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002a58:	7c3b      	ldrb	r3, [r7, #16]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8002a64:	7c7a      	ldrb	r2, [r7, #17]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8002a6a:	7cbb      	ldrb	r3, [r7, #18]
 8002a6c:	031a      	lsls	r2, r3, #12
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	4313      	orrs	r3, r2
 8002a74:	7d3a      	ldrb	r2, [r7, #20]
 8002a76:	0912      	lsrs	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002a7e:	7d7b      	ldrb	r3, [r7, #21]
 8002a80:	031a      	lsls	r2, r3, #12
 8002a82:	7dbb      	ldrb	r3, [r7, #22]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	4313      	orrs	r3, r2
 8002a88:	7dfa      	ldrb	r2, [r7, #23]
 8002a8a:	0912      	lsrs	r2, r2, #4
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8002a92:	7e3b      	ldrb	r3, [r7, #24]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	7e7a      	ldrb	r2, [r7, #25]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8002a9e:	7f7b      	ldrb	r3, [r7, #29]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	7fba      	ldrb	r2, [r7, #30]
 8002aa6:	0992      	lsrs	r2, r2, #6
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	853b      	strh	r3, [r7, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ab8:	0992      	lsrs	r2, r2, #6
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4313      	orrs	r3, r2
 8002abe:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002ac0:	7fbb      	ldrb	r3, [r7, #30]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002aca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d11c      	bne.n	8002b18 <read_field_data+0x128>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b25a      	sxtb	r2, r3
 8002ae4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b25a      	sxtb	r2, r3
 8002b00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e019      	b.n	8002b4c <read_field_data+0x15c>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b25a      	sxtb	r2, r3
 8002b1e:	7fbb      	ldrb	r3, [r7, #30]
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b25b      	sxtb	r3, r3
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b25a      	sxtb	r2, r3
 8002b38:	7fbb      	ldrb	r3, [r7, #30]
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da70      	bge.n	8002c38 <read_field_data+0x248>
 8002b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d16c      	bne.n	8002c38 <read_field_data+0x248>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	785b      	ldrb	r3, [r3, #1]
 8002b62:	335a      	adds	r3, #90	@ 0x5a
 8002b64:	b2d8      	uxtb	r0, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1cd9      	adds	r1, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f7ff f850 	bl	8001c12 <bme68x_get_regs>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME68X_OK)
 8002b78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10c      	bne.n	8002b9a <read_field_data+0x1aa>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	785b      	ldrb	r3, [r3, #1]
 8002b84:	3350      	adds	r3, #80	@ 0x50
 8002b86:	b2d8      	uxtb	r0, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1d19      	adds	r1, r3, #4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f7ff f83f 	bl	8001c12 <bme68x_get_regs>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8002b9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <read_field_data+0x1cc>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	785b      	ldrb	r3, [r3, #1]
 8002ba6:	3364      	adds	r3, #100	@ 0x64
 8002ba8:	b2d8      	uxtb	r0, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1d59      	adds	r1, r3, #5
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f7ff f82e 	bl	8001c12 <bme68x_get_regs>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8002bbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d139      	bne.n	8002c38 <read_field_data+0x248>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bc8:	f7ff fba2 	bl	8002310 <calc_temperature>
 8002bcc:	eef0 7a40 	vmov.f32	s15, s0
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bda:	f7ff fc1f 	bl	800241c <calc_pressure>
 8002bde:	eef0 7a40 	vmov.f32	s15, s0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8002be8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fd57 	bl	80026a0 <calc_humidity>
 8002bf2:	eef0 7a40 	vmov.f32	s15, s0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10c      	bne.n	8002c1e <read_field_data+0x22e>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002c04:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002c08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff feb5 	bl	800297c <calc_gas_resistance_high>
 8002c12:	eef0 7a40 	vmov.f32	s15, s0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8002c1c:	e026      	b.n	8002c6c <read_field_data+0x27c>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002c1e:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002c22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fe06 	bl	8002838 <calc_gas_resistance_low>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 8002c36:	e019      	b.n	8002c6c <read_field_data+0x27c>
            }
        }

        if (rslt == BME68X_OK)
 8002c38:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <read_field_data+0x260>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6852      	ldr	r2, [r2, #4]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002c4e:	4798      	blx	r3
        }

        tries--;
 8002c50:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002c54:	3b01      	subs	r3, #1
 8002c56:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME68X_OK))
 8002c5a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <read_field_data+0x27c>
 8002c62:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f43f aed9 	beq.w	8002a1e <read_field_data+0x2e>
    }

    return rslt;
 8002c6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3738      	adds	r7, #56	@ 0x38
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b09d      	sub	sp, #116	@ 0x74
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c90:	222f      	movs	r2, #47	@ 0x2f
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 ff5d 	bl	8007b54 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	611a      	str	r2, [r3, #16]
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <read_all_field_data+0x5c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <read_all_field_data+0x5c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8002cce:	23ff      	movs	r3, #255	@ 0xff
 8002cd0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8002cd4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8002cdc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2233      	movs	r2, #51	@ 0x33
 8002ce4:	201d      	movs	r0, #29
 8002ce6:	f7fe ff94 	bl	8001c12 <bme68x_get_regs>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8002cf0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002cf8:	f107 0108 	add.w	r1, r7, #8
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	221e      	movs	r2, #30
 8002d00:	2050      	movs	r0, #80	@ 0x50
 8002d02:	f7fe ff86 	bl	8001c12 <bme68x_get_regs>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002d12:	e1ce      	b.n	80030b2 <read_all_field_data+0x43a>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8002d14:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002d18:	461a      	mov	r2, r3
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002d22:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d26:	3370      	adds	r3, #112	@ 0x70
 8002d28:	443b      	add	r3, r7
 8002d2a:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002d2e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	440b      	add	r3, r1
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002d42:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d46:	3370      	adds	r3, #112	@ 0x70
 8002d48:	443b      	add	r3, r7
 8002d4a:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002d4e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	440b      	add	r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f002 020f 	and.w	r2, r2, #15
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8002d62:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	440b      	add	r3, r1
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3270      	adds	r2, #112	@ 0x70
 8002d76:	443a      	add	r2, r7
 8002d78:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002d7c:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8002d7e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d82:	3302      	adds	r3, #2
 8002d84:	3370      	adds	r3, #112	@ 0x70
 8002d86:	443b      	add	r3, r7
 8002d88:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d8c:	031a      	lsls	r2, r3, #12
 8002d8e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002d92:	3303      	adds	r3, #3
 8002d94:	3370      	adds	r3, #112	@ 0x70
 8002d96:	443b      	add	r3, r7
 8002d98:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8002da0:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002da4:	3204      	adds	r2, #4
 8002da6:	3270      	adds	r2, #112	@ 0x70
 8002da8:	443a      	add	r2, r7
 8002daa:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002dae:	0912      	lsrs	r2, r2, #4
 8002db0:	b2d2      	uxtb	r2, r2
        adc_pres =
 8002db2:	4313      	orrs	r3, r2
 8002db4:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8002db6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002dba:	3305      	adds	r3, #5
 8002dbc:	3370      	adds	r3, #112	@ 0x70
 8002dbe:	443b      	add	r3, r7
 8002dc0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002dc4:	031a      	lsls	r2, r3, #12
 8002dc6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002dca:	3306      	adds	r3, #6
 8002dcc:	3370      	adds	r3, #112	@ 0x70
 8002dce:	443b      	add	r3, r7
 8002dd0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8002dd8:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002ddc:	3207      	adds	r2, #7
 8002dde:	3270      	adds	r2, #112	@ 0x70
 8002de0:	443a      	add	r2, r7
 8002de2:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002de6:	0912      	lsrs	r2, r2, #4
 8002de8:	b2d2      	uxtb	r2, r2
        adc_temp =
 8002dea:	4313      	orrs	r3, r2
 8002dec:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8002dee:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002df2:	3308      	adds	r3, #8
 8002df4:	3370      	adds	r3, #112	@ 0x70
 8002df6:	443b      	add	r3, r7
 8002df8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002e04:	3209      	adds	r2, #9
 8002e06:	3270      	adds	r2, #112	@ 0x70
 8002e08:	443a      	add	r2, r7
 8002e0a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8002e14:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e18:	330d      	adds	r3, #13
 8002e1a:	3370      	adds	r3, #112	@ 0x70
 8002e1c:	443b      	add	r3, r7
 8002e1e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002e2a:	320e      	adds	r2, #14
 8002e2c:	3270      	adds	r2, #112	@ 0x70
 8002e2e:	443a      	add	r2, r7
 8002e30:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002e34:	0992      	lsrs	r2, r2, #6
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8002e3e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e42:	330f      	adds	r3, #15
 8002e44:	3370      	adds	r3, #112	@ 0x70
 8002e46:	443b      	add	r3, r7
 8002e48:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002e54:	3210      	adds	r2, #16
 8002e56:	3270      	adds	r2, #112	@ 0x70
 8002e58:	443a      	add	r2, r7
 8002e5a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002e5e:	0992      	lsrs	r2, r2, #6
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8002e68:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e6c:	330e      	adds	r3, #14
 8002e6e:	3370      	adds	r3, #112	@ 0x70
 8002e70:	443b      	add	r3, r7
 8002e72:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8002e7e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002e82:	3310      	adds	r3, #16
 8002e84:	3370      	adds	r3, #112	@ 0x70
 8002e86:	443b      	add	r3, r7
 8002e88:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d13a      	bne.n	8002f12 <read_all_field_data+0x29a>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8002e9c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b25a      	sxtb	r2, r3
 8002eac:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002eb0:	3310      	adds	r3, #16
 8002eb2:	3370      	adds	r3, #112	@ 0x70
 8002eb4:	443b      	add	r3, r7
 8002eb6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002eba:	b25b      	sxtb	r3, r3
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b259      	sxtb	r1, r3
 8002ec6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b2ca      	uxtb	r2, r1
 8002ed4:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8002ed6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b25a      	sxtb	r2, r3
 8002ee6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002eea:	3310      	adds	r3, #16
 8002eec:	3370      	adds	r3, #112	@ 0x70
 8002eee:	443b      	add	r3, r7
 8002ef0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	4313      	orrs	r3, r2
 8002efe:	b259      	sxtb	r1, r3
 8002f00:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	b2ca      	uxtb	r2, r1
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e039      	b.n	8002f86 <read_all_field_data+0x30e>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8002f12:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b25a      	sxtb	r2, r3
 8002f22:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f26:	330e      	adds	r3, #14
 8002f28:	3370      	adds	r3, #112	@ 0x70
 8002f2a:	443b      	add	r3, r7
 8002f2c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	b25b      	sxtb	r3, r3
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b259      	sxtb	r1, r3
 8002f3c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	b2ca      	uxtb	r2, r1
 8002f4a:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8002f4c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b25a      	sxtb	r2, r3
 8002f5c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f60:	330e      	adds	r3, #14
 8002f62:	3370      	adds	r3, #112	@ 0x70
 8002f64:	443b      	add	r3, r7
 8002f66:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	b25b      	sxtb	r3, r3
 8002f72:	4313      	orrs	r3, r2
 8002f74:	b259      	sxtb	r1, r3
 8002f76:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b2ca      	uxtb	r2, r1
 8002f84:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8002f86:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	4619      	mov	r1, r3
 8002f96:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8002fa6:	443a      	add	r2, r7
 8002fa8:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002fac:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8002fae:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	f103 020a 	add.w	r2, r3, #10
 8002fc0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	440b      	add	r3, r1
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3270      	adds	r2, #112	@ 0x70
 8002fce:	443a      	add	r2, r7
 8002fd0:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002fd4:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002fd6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	f103 0214 	add.w	r2, r3, #20
 8002fe8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	440b      	add	r3, r1
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3270      	adds	r2, #112	@ 0x70
 8002ff6:	443a      	add	r2, r7
 8002ff8:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002ffc:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002ffe:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	681c      	ldr	r4, [r3, #0]
 800300a:	6839      	ldr	r1, [r7, #0]
 800300c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800300e:	f7ff f97f 	bl	8002310 <calc_temperature>
 8003012:	eef0 7a40 	vmov.f32	s15, s0
 8003016:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800301a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	681c      	ldr	r4, [r3, #0]
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800302a:	f7ff f9f7 	bl	800241c <calc_pressure>
 800302e:	eef0 7a40 	vmov.f32	s15, s0
 8003032:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8003036:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	681c      	ldr	r4, [r3, #0]
 8003042:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fb29 	bl	80026a0 <calc_humidity>
 800304e:	eef0 7a40 	vmov.f32	s15, s0
 8003052:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d112      	bne.n	8003084 <read_all_field_data+0x40c>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 800305e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	681c      	ldr	r4, [r3, #0]
 800306a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800306e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fc81 	bl	800297c <calc_gas_resistance_high>
 800307a:	eef0 7a40 	vmov.f32	s15, s0
 800307e:	edc4 7a05 	vstr	s15, [r4, #20]
 8003082:	e011      	b.n	80030a8 <read_all_field_data+0x430>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8003084:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	681c      	ldr	r4, [r3, #0]
 8003090:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 8003094:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fbcc 	bl	8002838 <calc_gas_resistance_low>
 80030a0:	eef0 7a40 	vmov.f32	s15, s0
 80030a4:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80030a8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80030ac:	3301      	adds	r3, #1
 80030ae:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80030b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d804      	bhi.n	80030c4 <read_all_field_data+0x44c>
 80030ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f43f ae28 	beq.w	8002d14 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 80030c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3774      	adds	r7, #116	@ 0x74
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}

080030d0 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80030dc:	6838      	ldr	r0, [r7, #0]
 80030de:	f000 f8b8 	bl	8003252 <null_ptr_check>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80030e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d14f      	bne.n	800318e <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da02      	bge.n	80030fc <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73bb      	strb	r3, [r7, #14]
 80030fa:	e001      	b.n	8003100 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80030fc:	2310      	movs	r3, #16
 80030fe:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	7b5b      	ldrb	r3, [r3, #13]
 8003104:	7bba      	ldrb	r2, [r7, #14]
 8003106:	429a      	cmp	r2, r3
 8003108:	d041      	beq.n	800318e <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	7bba      	ldrb	r2, [r7, #14]
 800310e:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f107 010d 	add.w	r1, r7, #13
 800311c:	2201      	movs	r2, #1
 800311e:	20f3      	movs	r0, #243	@ 0xf3
 8003120:	47a0      	blx	r4
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8003136:	23fe      	movs	r3, #254	@ 0xfe
 8003138:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 800313a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d125      	bne.n	800318e <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8003142:	7b7b      	ldrb	r3, [r7, #13]
 8003144:	f023 0310 	bic.w	r3, r3, #16
 8003148:	b2db      	uxtb	r3, r3
 800314a:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	7b5b      	ldrb	r3, [r3, #13]
 8003150:	b25b      	sxtb	r3, r3
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	b25a      	sxtb	r2, r3
 8003158:	7b7b      	ldrb	r3, [r7, #13]
 800315a:	b25b      	sxtb	r3, r3
 800315c:	4313      	orrs	r3, r2
 800315e:	b25b      	sxtb	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f107 010d 	add.w	r1, r7, #13
 8003170:	2201      	movs	r2, #1
 8003172:	2073      	movs	r0, #115	@ 0x73
 8003174:	47a0      	blx	r4
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 800318a:	23fe      	movs	r3, #254	@ 0xfe
 800318c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bd90      	pop	{r4, r7, pc}

0800319a <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800319a:	b590      	push	{r4, r7, lr}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f855 	bl	8003252 <null_ptr_check>
 80031a8:	4603      	mov	r3, r0
 80031aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80031ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11b      	bne.n	80031ec <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f107 010e 	add.w	r1, r7, #14
 80031c0:	2201      	movs	r2, #1
 80031c2:	20f3      	movs	r0, #243	@ 0xf3
 80031c4:	47a0      	blx	r4
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 80031da:	23fe      	movs	r3, #254	@ 0xfe
 80031dc:	73fb      	strb	r3, [r7, #15]
 80031de:	e005      	b.n	80031ec <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80031e0:	7bbb      	ldrb	r3, [r7, #14]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80031ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}

080031f8 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	460b      	mov	r3, r1
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f823 	bl	8003252 <null_ptr_check>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d015      	beq.n	8003242 <boundary_check+0x4a>
 8003216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d111      	bne.n	8003242 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	7afa      	ldrb	r2, [r7, #11]
 8003224:	429a      	cmp	r2, r3
 8003226:	d20e      	bcs.n	8003246 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	7afa      	ldrb	r2, [r7, #11]
 800322c:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	b2da      	uxtb	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 8003240:	e001      	b.n	8003246 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003242:	23ff      	movs	r3, #255	@ 0xff
 8003244:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <null_ptr_check+0x2a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <null_ptr_check+0x2a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <null_ptr_check+0x2a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800327c:	23ff      	movs	r3, #255	@ 0xff
 800327e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <sort_sensor_data>:
    return heatdurval;
}

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	603a      	str	r2, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
 800329c:	460b      	mov	r3, r1
 800329e:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	789b      	ldrb	r3, [r3, #2]
 80032ac:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 80032ae:	79bb      	ldrb	r3, [r7, #6]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	789b      	ldrb	r3, [r3, #2]
 80032ba:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da21      	bge.n	8003312 <sort_sensor_data+0x82>
 80032ce:	79bb      	ldrb	r3, [r7, #6]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b25b      	sxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	da18      	bge.n	8003312 <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 80032e0:	89ba      	ldrh	r2, [r7, #12]
 80032e2:	89fb      	ldrh	r3, [r7, #14]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 80032ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032ee:	f113 0f02 	cmn.w	r3, #2
 80032f2:	db03      	blt.n	80032fc <sort_sensor_data+0x6c>
 80032f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	db03      	blt.n	8003304 <sort_sensor_data+0x74>
 80032fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003300:	2b02      	cmp	r3, #2
 8003302:	dd16      	ble.n	8003332 <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8003304:	79b9      	ldrb	r1, [r7, #6]
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f816 	bl	800333c <swap_fields>
    {
 8003310:	e00f      	b.n	8003332 <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4413      	add	r3, r2
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b25b      	sxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	da07      	bge.n	8003334 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8003324:	79b9      	ldrb	r1, [r7, #6]
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f806 	bl	800333c <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8003330:	e000      	b.n	8003334 <sort_sensor_data+0xa4>
    {
 8003332:	bf00      	nop
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	603a      	str	r2, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
 8003348:	460b      	mov	r3, r1
 800334a:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8003358:	79bb      	ldrb	r3, [r7, #6]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	441a      	add	r2, r3
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	440b      	add	r3, r1
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 800336c:	79bb      	ldrb	r3, [r7, #6]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4413      	add	r3, r2
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	@ 0x38
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 800338c:	f107 010c 	add.w	r1, r7, #12
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2217      	movs	r2, #23
 8003394:	208a      	movs	r0, #138	@ 0x8a
 8003396:	f7fe fc3c 	bl	8001c12 <bme68x_get_regs>
 800339a:	4603      	mov	r3, r0
 800339c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 80033a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	f103 0117 	add.w	r1, r3, #23
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	220e      	movs	r2, #14
 80033b4:	20e1      	movs	r0, #225	@ 0xe1
 80033b6:	f7fe fc2c 	bl	8001c12 <bme68x_get_regs>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 80033c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2205      	movs	r2, #5
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7fe fc1c 	bl	8001c12 <bme68x_get_regs>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 80033e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f040 80cb 	bne.w	8003580 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 80033ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	b21a      	sxth	r2, r3
 80033f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033f6:	b21b      	sxth	r3, r3
 80033f8:	4313      	orrs	r3, r2
 80033fa:	b21b      	sxth	r3, r3
 80033fc:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8003402:	7b7b      	ldrb	r3, [r7, #13]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	b21a      	sxth	r2, r3
 8003408:	7b3b      	ldrb	r3, [r7, #12]
 800340a:	b21b      	sxth	r3, r3
 800340c:	4313      	orrs	r3, r2
 800340e:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8003414:	7bbb      	ldrb	r3, [r7, #14]
 8003416:	b25a      	sxtb	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 800341e:	7c7b      	ldrb	r3, [r7, #17]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	b21a      	sxth	r2, r3
 8003424:	7c3b      	ldrb	r3, [r7, #16]
 8003426:	b21b      	sxth	r3, r3
 8003428:	4313      	orrs	r3, r2
 800342a:	b21b      	sxth	r3, r3
 800342c:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	b21a      	sxth	r2, r3
 8003438:	7cbb      	ldrb	r3, [r7, #18]
 800343a:	b21b      	sxth	r3, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8003444:	7d3b      	ldrb	r3, [r7, #20]
 8003446:	b25a      	sxtb	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	b21a      	sxth	r2, r3
 8003454:	7dbb      	ldrb	r3, [r7, #22]
 8003456:	b21b      	sxth	r3, r3
 8003458:	4313      	orrs	r3, r2
 800345a:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8003460:	7e7b      	ldrb	r3, [r7, #25]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	b21a      	sxth	r2, r3
 8003466:	7e3b      	ldrb	r3, [r7, #24]
 8003468:	b21b      	sxth	r3, r3
 800346a:	4313      	orrs	r3, r2
 800346c:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8003472:	7efb      	ldrb	r3, [r7, #27]
 8003474:	b25a      	sxtb	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 800347c:	7ebb      	ldrb	r3, [r7, #26]
 800347e:	b25a      	sxtb	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8003486:	7ffb      	ldrb	r3, [r7, #31]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	b21a      	sxth	r2, r3
 800348c:	7fbb      	ldrb	r3, [r7, #30]
 800348e:	b21b      	sxth	r3, r3
 8003490:	4313      	orrs	r3, r2
 8003492:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8003498:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	b21a      	sxth	r2, r3
 80034a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	4313      	orrs	r3, r2
 80034a8:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 80034ae:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80034b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 80034c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80034cc:	4313      	orrs	r3, r2
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 80034d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	b21a      	sxth	r2, r3
 80034de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 80034f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80034f6:	b25a      	sxtb	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 80034fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003500:	b25a      	sxtb	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8003506:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800350a:	b25a      	sxtb	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8003510:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8003518:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800351c:	b25a      	sxtb	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8003522:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003526:	b25a      	sxtb	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 800352c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	b21a      	sxth	r2, r3
 8003534:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003538:	b21b      	sxth	r3, r3
 800353a:	4313      	orrs	r3, r2
 800353c:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8003542:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003546:	b25a      	sxtb	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 800354c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003550:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003554:	2b00      	cmp	r3, #0
 8003556:	da00      	bge.n	800355a <get_calib_data+0x1d6>
 8003558:	330f      	adds	r3, #15
 800355a:	111b      	asrs	r3, r3, #4
 800355c:	b2da      	uxtb	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8003564:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003568:	b25a      	sxtb	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8003570:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003574:	b25b      	sxtb	r3, r3
 8003576:	111b      	asrs	r3, r3, #4
 8003578:	b25a      	sxtb	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 8003580:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003584:	4618      	mov	r0, r3
 8003586:	3738      	adds	r7, #56	@ 0x38
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003598:	f107 010e 	add.w	r1, r7, #14
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	20f0      	movs	r0, #240	@ 0xf0
 80035a2:	f7fe fb36 	bl	8001c12 <bme68x_get_regs>
 80035a6:	4603      	mov	r3, r0
 80035a8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 80035b2:	7bbb      	ldrb	r3, [r7, #14]
 80035b4:	461a      	mov	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 80035ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <HAL_Init+0x40>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003608 <HAL_Init+0x40>)
 80035d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <HAL_Init+0x40>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003608 <HAL_Init+0x40>)
 80035de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e4:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <HAL_Init+0x40>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a07      	ldr	r2, [pc, #28]	@ (8003608 <HAL_Init+0x40>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f0:	2003      	movs	r0, #3
 80035f2:	f000 f931 	bl	8003858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035f6:	200f      	movs	r0, #15
 80035f8:	f000 f808 	bl	800360c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035fc:	f7fe f862 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023c00 	.word	0x40023c00

0800360c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <HAL_InitTick+0x54>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_InitTick+0x58>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003622:	fbb3 f3f1 	udiv	r3, r3, r1
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f93b 	bl	80038a6 <HAL_SYSTICK_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e00e      	b.n	8003658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b0f      	cmp	r3, #15
 800363e:	d80a      	bhi.n	8003656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003640:	2200      	movs	r2, #0
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003648:	f000 f911 	bl	800386e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800364c:	4a06      	ldr	r2, [pc, #24]	@ (8003668 <HAL_InitTick+0x5c>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000000 	.word	0x20000000
 8003664:	20000008 	.word	0x20000008
 8003668:	20000004 	.word	0x20000004

0800366c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003670:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_IncTick+0x20>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <HAL_IncTick+0x24>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4413      	add	r3, r2
 800367c:	4a04      	ldr	r2, [pc, #16]	@ (8003690 <HAL_IncTick+0x24>)
 800367e:	6013      	str	r3, [r2, #0]
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000008 	.word	0x20000008
 8003690:	20000290 	.word	0x20000290

08003694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return uwTick;
 8003698:	4b03      	ldr	r3, [pc, #12]	@ (80036a8 <HAL_GetTick+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000290 	.word	0x20000290

080036ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036b4:	f7ff ffee 	bl	8003694 <HAL_GetTick>
 80036b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036c4:	d005      	beq.n	80036d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036c6:	4b0a      	ldr	r3, [pc, #40]	@ (80036f0 <HAL_Delay+0x44>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036d2:	bf00      	nop
 80036d4:	f7ff ffde 	bl	8003694 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d8f7      	bhi.n	80036d4 <HAL_Delay+0x28>
  {
  }
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000008 	.word	0x20000008

080036f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003704:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003710:	4013      	ands	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800371c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	@ (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <__NVIC_GetPriorityGrouping+0x18>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0307 	and.w	r3, r3, #7
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	2b00      	cmp	r3, #0
 800376a:	db0a      	blt.n	8003782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	490c      	ldr	r1, [pc, #48]	@ (80037a4 <__NVIC_SetPriority+0x4c>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	440b      	add	r3, r1
 800377c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003780:	e00a      	b.n	8003798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4908      	ldr	r1, [pc, #32]	@ (80037a8 <__NVIC_SetPriority+0x50>)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	3b04      	subs	r3, #4
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	440b      	add	r3, r1
 8003796:	761a      	strb	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	@ 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f1c3 0307 	rsb	r3, r3, #7
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf28      	it	cs
 80037ca:	2304      	movcs	r3, #4
 80037cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d902      	bls.n	80037dc <NVIC_EncodePriority+0x30>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3b03      	subs	r3, #3
 80037da:	e000      	b.n	80037de <NVIC_EncodePriority+0x32>
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	401a      	ands	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	43d9      	mvns	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	4313      	orrs	r3, r2
         );
}
 8003806:	4618      	mov	r0, r3
 8003808:	3724      	adds	r7, #36	@ 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003824:	d301      	bcc.n	800382a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003826:	2301      	movs	r3, #1
 8003828:	e00f      	b.n	800384a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800382a:	4a0a      	ldr	r2, [pc, #40]	@ (8003854 <SysTick_Config+0x40>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003832:	210f      	movs	r1, #15
 8003834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003838:	f7ff ff8e 	bl	8003758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <SysTick_Config+0x40>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003842:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <SysTick_Config+0x40>)
 8003844:	2207      	movs	r2, #7
 8003846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	e000e010 	.word	0xe000e010

08003858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff47 	bl	80036f4 <__NVIC_SetPriorityGrouping>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	4603      	mov	r3, r0
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003880:	f7ff ff5c 	bl	800373c <__NVIC_GetPriorityGrouping>
 8003884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	6978      	ldr	r0, [r7, #20]
 800388c:	f7ff ff8e 	bl	80037ac <NVIC_EncodePriority>
 8003890:	4602      	mov	r2, r0
 8003892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ff5d 	bl	8003758 <__NVIC_SetPriority>
}
 800389e:	bf00      	nop
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ffb0 	bl	8003814 <SysTick_Config>
 80038b4:	4603      	mov	r3, r0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	e165      	b.n	8003ba8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038dc:	2201      	movs	r2, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f040 8154 	bne.w	8003ba2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d005      	beq.n	8003912 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800390e:	2b02      	cmp	r3, #2
 8003910:	d130      	bne.n	8003974 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003948:	2201      	movs	r2, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 0201 	and.w	r2, r3, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	2b03      	cmp	r3, #3
 800397e:	d017      	beq.n	80039b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	2203      	movs	r2, #3
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d123      	bne.n	8003a04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3208      	adds	r2, #8
 80039c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	220f      	movs	r2, #15
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	08da      	lsrs	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3208      	adds	r2, #8
 80039fe:	69b9      	ldr	r1, [r7, #24]
 8003a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0203 	and.w	r2, r3, #3
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80ae 	beq.w	8003ba2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc0 <HAL_GPIO_Init+0x300>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	4a5c      	ldr	r2, [pc, #368]	@ (8003bc0 <HAL_GPIO_Init+0x300>)
 8003a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a56:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc0 <HAL_GPIO_Init+0x300>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a62:	4a58      	ldr	r2, [pc, #352]	@ (8003bc4 <HAL_GPIO_Init+0x304>)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	3302      	adds	r3, #2
 8003a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc8 <HAL_GPIO_Init+0x308>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d025      	beq.n	8003ada <HAL_GPIO_Init+0x21a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4e      	ldr	r2, [pc, #312]	@ (8003bcc <HAL_GPIO_Init+0x30c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <HAL_GPIO_Init+0x216>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd0 <HAL_GPIO_Init+0x310>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d019      	beq.n	8003ad2 <HAL_GPIO_Init+0x212>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd4 <HAL_GPIO_Init+0x314>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0x20e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4b      	ldr	r2, [pc, #300]	@ (8003bd8 <HAL_GPIO_Init+0x318>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_Init+0x20a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8003bdc <HAL_GPIO_Init+0x31c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x206>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a49      	ldr	r2, [pc, #292]	@ (8003be0 <HAL_GPIO_Init+0x320>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_Init+0x202>
 8003abe:	2306      	movs	r3, #6
 8003ac0:	e00c      	b.n	8003adc <HAL_GPIO_Init+0x21c>
 8003ac2:	2307      	movs	r3, #7
 8003ac4:	e00a      	b.n	8003adc <HAL_GPIO_Init+0x21c>
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	e008      	b.n	8003adc <HAL_GPIO_Init+0x21c>
 8003aca:	2304      	movs	r3, #4
 8003acc:	e006      	b.n	8003adc <HAL_GPIO_Init+0x21c>
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e004      	b.n	8003adc <HAL_GPIO_Init+0x21c>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_Init+0x21c>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <HAL_GPIO_Init+0x21c>
 8003ada:	2300      	movs	r3, #0
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f002 0203 	and.w	r2, r2, #3
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	4093      	lsls	r3, r2
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aec:	4935      	ldr	r1, [pc, #212]	@ (8003bc4 <HAL_GPIO_Init+0x304>)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	3302      	adds	r3, #2
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003afa:	4b3a      	ldr	r3, [pc, #232]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b1e:	4a31      	ldr	r2, [pc, #196]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b24:	4b2f      	ldr	r3, [pc, #188]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b48:	4a26      	ldr	r2, [pc, #152]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b4e:	4b25      	ldr	r3, [pc, #148]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b72:	4a1c      	ldr	r2, [pc, #112]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b78:	4b1a      	ldr	r3, [pc, #104]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b9c:	4a11      	ldr	r2, [pc, #68]	@ (8003be4 <HAL_GPIO_Init+0x324>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	f67f ae96 	bls.w	80038dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3724      	adds	r7, #36	@ 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40020c00 	.word	0x40020c00
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40021400 	.word	0x40021400
 8003be0:	40021800 	.word	0x40021800
 8003be4:	40013c00 	.word	0x40013c00

08003be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e12b      	b.n	8003e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fd80 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	@ 0x24
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f001 fad6 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 8003c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4a81      	ldr	r2, [pc, #516]	@ (8003e5c <HAL_I2C_Init+0x274>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d807      	bhi.n	8003c6c <HAL_I2C_Init+0x84>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a80      	ldr	r2, [pc, #512]	@ (8003e60 <HAL_I2C_Init+0x278>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	bf94      	ite	ls
 8003c64:	2301      	movls	r3, #1
 8003c66:	2300      	movhi	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e006      	b.n	8003c7a <HAL_I2C_Init+0x92>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e64 <HAL_I2C_Init+0x27c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bf94      	ite	ls
 8003c74:	2301      	movls	r3, #1
 8003c76:	2300      	movhi	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0e7      	b.n	8003e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a78      	ldr	r2, [pc, #480]	@ (8003e68 <HAL_I2C_Init+0x280>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0c9b      	lsrs	r3, r3, #18
 8003c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e5c <HAL_I2C_Init+0x274>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d802      	bhi.n	8003cbc <HAL_I2C_Init+0xd4>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	e009      	b.n	8003cd0 <HAL_I2C_Init+0xe8>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	4a69      	ldr	r2, [pc, #420]	@ (8003e6c <HAL_I2C_Init+0x284>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	3301      	adds	r3, #1
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ce2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	495c      	ldr	r1, [pc, #368]	@ (8003e5c <HAL_I2C_Init+0x274>)
 8003cec:	428b      	cmp	r3, r1
 8003cee:	d819      	bhi.n	8003d24 <HAL_I2C_Init+0x13c>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e59      	subs	r1, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfe:	1c59      	adds	r1, r3, #1
 8003d00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d04:	400b      	ands	r3, r1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_I2C_Init+0x138>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e59      	subs	r1, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1e:	e051      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d20:	2304      	movs	r3, #4
 8003d22:	e04f      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d111      	bne.n	8003d50 <HAL_I2C_Init+0x168>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1e58      	subs	r0, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e012      	b.n	8003d76 <HAL_I2C_Init+0x18e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	0099      	lsls	r1, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_Init+0x196>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e022      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10e      	bne.n	8003da4 <HAL_I2C_Init+0x1bc>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1e58      	subs	r0, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	440b      	add	r3, r1
 8003d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003da2:	e00f      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e58      	subs	r0, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	0099      	lsls	r1, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	6809      	ldr	r1, [r1, #0]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003df2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6911      	ldr	r1, [r2, #16]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68d2      	ldr	r2, [r2, #12]
 8003dfe:	4311      	orrs	r1, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	000186a0 	.word	0x000186a0
 8003e60:	001e847f 	.word	0x001e847f
 8003e64:	003d08ff 	.word	0x003d08ff
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	10624dd3 	.word	0x10624dd3

08003e70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	817b      	strh	r3, [r7, #10]
 8003e82:	460b      	mov	r3, r1
 8003e84:	813b      	strh	r3, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e8a:	f7ff fc03 	bl	8003694 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	f040 80d9 	bne.w	8004050 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2319      	movs	r3, #25
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	496d      	ldr	r1, [pc, #436]	@ (800405c <HAL_I2C_Mem_Write+0x1ec>)
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fdb9 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0cc      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2C_Mem_Write+0x56>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e0c5      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d007      	beq.n	8003eec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2221      	movs	r2, #33	@ 0x21
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2240      	movs	r2, #64	@ 0x40
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8004060 <HAL_I2C_Mem_Write+0x1f0>)
 8003f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2e:	88f8      	ldrh	r0, [r7, #6]
 8003f30:	893a      	ldrh	r2, [r7, #8]
 8003f32:	8979      	ldrh	r1, [r7, #10]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fbf0 	bl	8004724 <I2C_RequestMemoryWrite>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d052      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e081      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fe7e 	bl	8004c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06b      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1aa      	bne.n	8003f4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fe71 	bl	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	2b04      	cmp	r3, #4
 800400e:	d107      	bne.n	8004020 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e016      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	00100002 	.word	0x00100002
 8004060:	ffff0000 	.word	0xffff0000

08004064 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	@ 0x30
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407e:	f7ff fb09 	bl	8003694 <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	f040 8214 	bne.w	80044ba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2319      	movs	r3, #25
 8004098:	2201      	movs	r2, #1
 800409a:	497b      	ldr	r1, [pc, #492]	@ (8004288 <HAL_I2C_Mem_Read+0x224>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fcbf 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
 80040aa:	e207      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2C_Mem_Read+0x56>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e200      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d007      	beq.n	80040e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2222      	movs	r2, #34	@ 0x22
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2240      	movs	r2, #64	@ 0x40
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800410a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004110:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a5b      	ldr	r2, [pc, #364]	@ (800428c <HAL_I2C_Mem_Read+0x228>)
 8004120:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004122:	88f8      	ldrh	r0, [r7, #6]
 8004124:	893a      	ldrh	r2, [r7, #8]
 8004126:	8979      	ldrh	r1, [r7, #10]
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4603      	mov	r3, r0
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fb8c 	bl	8004850 <I2C_RequestMemoryRead>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e1bc      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004146:	2b00      	cmp	r3, #0
 8004148:	d113      	bne.n	8004172 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	623b      	str	r3, [r7, #32]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e190      	b.n	8004494 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004176:	2b01      	cmp	r3, #1
 8004178:	d11b      	bne.n	80041b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	e170      	b.n	8004494 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d11b      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	e150      	b.n	8004494 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004208:	e144      	b.n	8004494 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	2b03      	cmp	r3, #3
 8004210:	f200 80f1 	bhi.w	80043f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	2b01      	cmp	r3, #1
 800421a:	d123      	bne.n	8004264 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fda7 	bl	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e145      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004262:	e117      	b.n	8004494 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	2b02      	cmp	r3, #2
 800426a:	d14e      	bne.n	800430a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	2200      	movs	r2, #0
 8004274:	4906      	ldr	r1, [pc, #24]	@ (8004290 <HAL_I2C_Mem_Read+0x22c>)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fbd2 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e11a      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
 8004286:	bf00      	nop
 8004288:	00100002 	.word	0x00100002
 800428c:	ffff0000 	.word	0xffff0000
 8004290:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004308:	e0c4      	b.n	8004494 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004310:	2200      	movs	r2, #0
 8004312:	496c      	ldr	r1, [pc, #432]	@ (80044c4 <HAL_I2C_Mem_Read+0x460>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fb83 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0cb      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436c:	2200      	movs	r2, #0
 800436e:	4955      	ldr	r1, [pc, #340]	@ (80044c4 <HAL_I2C_Mem_Read+0x460>)
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fb55 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e09d      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043f4:	e04e      	b.n	8004494 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fcba 	bl	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e058      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d124      	bne.n	8004494 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444e:	2b03      	cmp	r3, #3
 8004450:	d107      	bne.n	8004462 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004460:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	f47f aeb6 	bne.w	800420a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3728      	adds	r7, #40	@ 0x28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	00010004 	.word	0x00010004

080044c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	@ 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	460b      	mov	r3, r1
 80044d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7ff f8dc 	bl	8003694 <HAL_GetTick>
 80044dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	f040 8111 	bne.w	8004712 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2319      	movs	r3, #25
 80044f6:	2201      	movs	r2, #1
 80044f8:	4988      	ldr	r1, [pc, #544]	@ (800471c <HAL_I2C_IsDeviceReady+0x254>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fa90 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
 8004508:	e104      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_I2C_IsDeviceReady+0x50>
 8004514:	2302      	movs	r3, #2
 8004516:	e0fd      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d007      	beq.n	800453e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800454c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2224      	movs	r2, #36	@ 0x24
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a70      	ldr	r2, [pc, #448]	@ (8004720 <HAL_I2C_IsDeviceReady+0x258>)
 8004560:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004570:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2200      	movs	r2, #0
 800457a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fa4e 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004598:	d103      	bne.n	80045a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0b6      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045a6:	897b      	ldrh	r3, [r7, #10]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80045b6:	f7ff f86d 	bl	8003694 <HAL_GetTick>
 80045ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045ea:	e025      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045ec:	f7ff f852 	bl	8003694 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d302      	bcc.n	8004602 <HAL_I2C_IsDeviceReady+0x13a>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	22a0      	movs	r2, #160	@ 0xa0
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2ba0      	cmp	r3, #160	@ 0xa0
 8004642:	d005      	beq.n	8004650 <HAL_I2C_IsDeviceReady+0x188>
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <HAL_I2C_IsDeviceReady+0x188>
 800464a:	7dbb      	ldrb	r3, [r7, #22]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0cd      	beq.n	80045ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	d129      	bne.n	80046ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004674:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2319      	movs	r3, #25
 8004692:	2201      	movs	r2, #1
 8004694:	4921      	ldr	r1, [pc, #132]	@ (800471c <HAL_I2C_IsDeviceReady+0x254>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f9c2 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e036      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e02c      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	2319      	movs	r3, #25
 80046da:	2201      	movs	r2, #1
 80046dc:	490f      	ldr	r1, [pc, #60]	@ (800471c <HAL_I2C_IsDeviceReady+0x254>)
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f99e 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e012      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	3301      	adds	r3, #1
 80046f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	f4ff af32 	bcc.w	8004562 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	00100002 	.word	0x00100002
 8004720:	ffff0000 	.word	0xffff0000

08004724 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	461a      	mov	r2, r3
 8004732:	4603      	mov	r3, r0
 8004734:	817b      	strh	r3, [r7, #10]
 8004736:	460b      	mov	r3, r1
 8004738:	813b      	strh	r3, [r7, #8]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	2200      	movs	r2, #0
 8004756:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f960 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004774:	d103      	bne.n	800477e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800477c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e05f      	b.n	8004842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004782:	897b      	ldrh	r3, [r7, #10]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	6a3a      	ldr	r2, [r7, #32]
 8004796:	492d      	ldr	r1, [pc, #180]	@ (800484c <I2C_RequestMemoryWrite+0x128>)
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f9bb 	bl	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e04c      	b.n	8004842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c0:	6a39      	ldr	r1, [r7, #32]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fa46 	bl	8004c54 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d107      	bne.n	80047e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e02b      	b.n	8004842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d105      	bne.n	80047fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047f0:	893b      	ldrh	r3, [r7, #8]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]
 80047fa:	e021      	b.n	8004840 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047fc:	893b      	ldrh	r3, [r7, #8]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	b29b      	uxth	r3, r3
 8004802:	b2da      	uxtb	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800480a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480c:	6a39      	ldr	r1, [r7, #32]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fa20 	bl	8004c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00d      	beq.n	8004836 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	2b04      	cmp	r3, #4
 8004820:	d107      	bne.n	8004832 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e005      	b.n	8004842 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004836:	893b      	ldrh	r3, [r7, #8]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	00010002 	.word	0x00010002

08004850 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4603      	mov	r3, r0
 8004860:	817b      	strh	r3, [r7, #10]
 8004862:	460b      	mov	r3, r1
 8004864:	813b      	strh	r3, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004878:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004888:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	2200      	movs	r2, #0
 8004892:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f8c2 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00d      	beq.n	80048be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b0:	d103      	bne.n	80048ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0aa      	b.n	8004a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	6a3a      	ldr	r2, [r7, #32]
 80048d2:	4952      	ldr	r1, [pc, #328]	@ (8004a1c <I2C_RequestMemoryRead+0x1cc>)
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f91d 	bl	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e097      	b.n	8004a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fc:	6a39      	ldr	r1, [r7, #32]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f9a8 	bl	8004c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00d      	beq.n	8004926 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	2b04      	cmp	r3, #4
 8004910:	d107      	bne.n	8004922 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004920:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e076      	b.n	8004a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d105      	bne.n	8004938 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800492c:	893b      	ldrh	r3, [r7, #8]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	611a      	str	r2, [r3, #16]
 8004936:	e021      	b.n	800497c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004938:	893b      	ldrh	r3, [r7, #8]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	b29b      	uxth	r3, r3
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004948:	6a39      	ldr	r1, [r7, #32]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f982 	bl	8004c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00d      	beq.n	8004972 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	2b04      	cmp	r3, #4
 800495c:	d107      	bne.n	800496e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800496c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e050      	b.n	8004a14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004972:	893b      	ldrh	r3, [r7, #8]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497e:	6a39      	ldr	r1, [r7, #32]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f967 	bl	8004c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	2b04      	cmp	r3, #4
 8004992:	d107      	bne.n	80049a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e035      	b.n	8004a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	2200      	movs	r2, #0
 80049c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f82b 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049de:	d103      	bne.n	80049e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e013      	b.n	8004a14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049ec:	897b      	ldrh	r3, [r7, #10]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	6a3a      	ldr	r2, [r7, #32]
 8004a00:	4906      	ldr	r1, [pc, #24]	@ (8004a1c <I2C_RequestMemoryRead+0x1cc>)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f886 	bl	8004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	00010002 	.word	0x00010002

08004a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a30:	e048      	b.n	8004ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a38:	d044      	beq.n	8004ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fe fe2b 	bl	8003694 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d139      	bne.n	8004ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	0c1b      	lsrs	r3, r3, #16
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d10d      	bne.n	8004a76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	43da      	mvns	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	e00c      	b.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d116      	bne.n	8004ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	f043 0220 	orr.w	r2, r3, #32
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e023      	b.n	8004b0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d10d      	bne.n	8004aea <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	43da      	mvns	r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	e00c      	b.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	43da      	mvns	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d093      	beq.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b22:	e071      	b.n	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b32:	d123      	bne.n	8004b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	f043 0204 	orr.w	r2, r3, #4
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e067      	b.n	8004c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b82:	d041      	beq.n	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b84:	f7fe fd86 	bl	8003694 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d136      	bne.n	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d10c      	bne.n	8004bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	43da      	mvns	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	e00b      	b.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e021      	b.n	8004c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d10c      	bne.n	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf14      	ite	ne
 8004c24:	2301      	movne	r3, #1
 8004c26:	2300      	moveq	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e00b      	b.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	43da      	mvns	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4013      	ands	r3, r2
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf14      	ite	ne
 8004c3e:	2301      	movne	r3, #1
 8004c40:	2300      	moveq	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f47f af6d 	bne.w	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c60:	e034      	b.n	8004ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f8e3 	bl	8004e2e <I2C_IsAcknowledgeFailed>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e034      	b.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c78:	d028      	beq.n	8004ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7a:	f7fe fd0b 	bl	8003694 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d11d      	bne.n	8004ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c9a:	2b80      	cmp	r3, #128	@ 0x80
 8004c9c:	d016      	beq.n	8004ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e007      	b.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b80      	cmp	r3, #128	@ 0x80
 8004cd8:	d1c3      	bne.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cf0:	e034      	b.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f89b 	bl	8004e2e <I2C_IsAcknowledgeFailed>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e034      	b.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d08:	d028      	beq.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0a:	f7fe fcc3 	bl	8003694 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d11d      	bne.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d016      	beq.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e007      	b.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d1c3      	bne.n	8004cf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d80:	e049      	b.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d119      	bne.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0210 	mvn.w	r2, #16
 8004d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e030      	b.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc4:	f7fe fc66 	bl	8003694 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d302      	bcc.n	8004dda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d11d      	bne.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	d016      	beq.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e007      	b.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d1ae      	bne.n	8004d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e44:	d11b      	bne.n	8004e7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	f043 0204 	orr.w	r2, r3, #4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0cc      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b68      	ldr	r3, [pc, #416]	@ (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d90c      	bls.n	8004ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b65      	ldr	r3, [pc, #404]	@ (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b63      	ldr	r3, [pc, #396]	@ (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0b8      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d020      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ee0:	4b59      	ldr	r3, [pc, #356]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a58      	ldr	r2, [pc, #352]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004eea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef8:	4b53      	ldr	r3, [pc, #332]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a52      	ldr	r2, [pc, #328]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f04:	4b50      	ldr	r3, [pc, #320]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	494d      	ldr	r1, [pc, #308]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d044      	beq.n	8004fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d107      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	4b47      	ldr	r3, [pc, #284]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d119      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e07f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d003      	beq.n	8004f4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e06f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e067      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f6a:	4b37      	ldr	r3, [pc, #220]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f023 0203 	bic.w	r2, r3, #3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4934      	ldr	r1, [pc, #208]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f7c:	f7fe fb8a 	bl	8003694 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f84:	f7fe fb86 	bl	8003694 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e04f      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 020c 	and.w	r2, r3, #12
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1eb      	bne.n	8004f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fac:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d20c      	bcs.n	8004fd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	4b22      	ldr	r3, [pc, #136]	@ (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc2:	4b20      	ldr	r3, [pc, #128]	@ (8005044 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e032      	b.n	800503a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe0:	4b19      	ldr	r3, [pc, #100]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4916      	ldr	r1, [pc, #88]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ffe:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	490e      	ldr	r1, [pc, #56]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005012:	f000 f821 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8005016:	4602      	mov	r2, r0
 8005018:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	091b      	lsrs	r3, r3, #4
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	490a      	ldr	r1, [pc, #40]	@ (800504c <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	5ccb      	ldrb	r3, [r1, r3]
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	4a09      	ldr	r2, [pc, #36]	@ (8005050 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800502e:	4b09      	ldr	r3, [pc, #36]	@ (8005054 <HAL_RCC_ClockConfig+0x1c8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe faea 	bl	800360c <HAL_InitTick>

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40023c00 	.word	0x40023c00
 8005048:	40023800 	.word	0x40023800
 800504c:	0800a834 	.word	0x0800a834
 8005050:	20000000 	.word	0x20000000
 8005054:	20000004 	.word	0x20000004

08005058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800505c:	b090      	sub	sp, #64	@ 0x40
 800505e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005070:	4b59      	ldr	r3, [pc, #356]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	2b08      	cmp	r3, #8
 800507a:	d00d      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x40>
 800507c:	2b08      	cmp	r3, #8
 800507e:	f200 80a1 	bhi.w	80051c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x34>
 8005086:	2b04      	cmp	r3, #4
 8005088:	d003      	beq.n	8005092 <HAL_RCC_GetSysClockFreq+0x3a>
 800508a:	e09b      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800508c:	4b53      	ldr	r3, [pc, #332]	@ (80051dc <HAL_RCC_GetSysClockFreq+0x184>)
 800508e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005090:	e09b      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005092:	4b53      	ldr	r3, [pc, #332]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005094:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005096:	e098      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005098:	4b4f      	ldr	r3, [pc, #316]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050a2:	4b4d      	ldr	r3, [pc, #308]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d028      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ae:	4b4a      	ldr	r3, [pc, #296]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	099b      	lsrs	r3, r3, #6
 80050b4:	2200      	movs	r2, #0
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050c0:	2100      	movs	r1, #0
 80050c2:	4b47      	ldr	r3, [pc, #284]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80050c4:	fb03 f201 	mul.w	r2, r3, r1
 80050c8:	2300      	movs	r3, #0
 80050ca:	fb00 f303 	mul.w	r3, r0, r3
 80050ce:	4413      	add	r3, r2
 80050d0:	4a43      	ldr	r2, [pc, #268]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80050d2:	fba0 1202 	umull	r1, r2, r0, r2
 80050d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050d8:	460a      	mov	r2, r1
 80050da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80050dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050de:	4413      	add	r3, r2
 80050e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e4:	2200      	movs	r2, #0
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	61fa      	str	r2, [r7, #28]
 80050ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80050f2:	f7fb fdf1 	bl	8000cd8 <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4613      	mov	r3, r2
 80050fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050fe:	e053      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005100:	4b35      	ldr	r3, [pc, #212]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	2200      	movs	r2, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	617a      	str	r2, [r7, #20]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005112:	f04f 0b00 	mov.w	fp, #0
 8005116:	4652      	mov	r2, sl
 8005118:	465b      	mov	r3, fp
 800511a:	f04f 0000 	mov.w	r0, #0
 800511e:	f04f 0100 	mov.w	r1, #0
 8005122:	0159      	lsls	r1, r3, #5
 8005124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005128:	0150      	lsls	r0, r2, #5
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	ebb2 080a 	subs.w	r8, r2, sl
 8005132:	eb63 090b 	sbc.w	r9, r3, fp
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005142:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005146:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800514a:	ebb2 0408 	subs.w	r4, r2, r8
 800514e:	eb63 0509 	sbc.w	r5, r3, r9
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	00eb      	lsls	r3, r5, #3
 800515c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005160:	00e2      	lsls	r2, r4, #3
 8005162:	4614      	mov	r4, r2
 8005164:	461d      	mov	r5, r3
 8005166:	eb14 030a 	adds.w	r3, r4, sl
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	eb45 030b 	adc.w	r3, r5, fp
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800517e:	4629      	mov	r1, r5
 8005180:	028b      	lsls	r3, r1, #10
 8005182:	4621      	mov	r1, r4
 8005184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005188:	4621      	mov	r1, r4
 800518a:	028a      	lsls	r2, r1, #10
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005192:	2200      	movs	r2, #0
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	60fa      	str	r2, [r7, #12]
 8005198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800519c:	f7fb fd9c 	bl	8000cd8 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4613      	mov	r3, r2
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051a8:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	0c1b      	lsrs	r3, r3, #16
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	3301      	adds	r3, #1
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80051b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051c2:	e002      	b.n	80051ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c4:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <HAL_RCC_GetSysClockFreq+0x184>)
 80051c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3740      	adds	r7, #64	@ 0x40
 80051d0:	46bd      	mov	sp, r7
 80051d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d6:	bf00      	nop
 80051d8:	40023800 	.word	0x40023800
 80051dc:	00f42400 	.word	0x00f42400
 80051e0:	017d7840 	.word	0x017d7840

080051e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e8:	4b03      	ldr	r3, [pc, #12]	@ (80051f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000000 	.word	0x20000000

080051fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005200:	f7ff fff0 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005204:	4602      	mov	r2, r0
 8005206:	4b05      	ldr	r3, [pc, #20]	@ (800521c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	0a9b      	lsrs	r3, r3, #10
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4903      	ldr	r1, [pc, #12]	@ (8005220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005212:	5ccb      	ldrb	r3, [r1, r3]
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40023800 	.word	0x40023800
 8005220:	0800a844 	.word	0x0800a844

08005224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005228:	f7ff ffdc 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	0b5b      	lsrs	r3, r3, #13
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	4903      	ldr	r1, [pc, #12]	@ (8005248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40023800 	.word	0x40023800
 8005248:	0800a844 	.word	0x0800a844

0800524c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e273      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d075      	beq.n	8005356 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800526a:	4b88      	ldr	r3, [pc, #544]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	2b04      	cmp	r3, #4
 8005274:	d00c      	beq.n	8005290 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005276:	4b85      	ldr	r3, [pc, #532]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
        || \
 800527e:	2b08      	cmp	r3, #8
 8005280:	d112      	bne.n	80052a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005282:	4b82      	ldr	r3, [pc, #520]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800528e:	d10b      	bne.n	80052a8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005290:	4b7e      	ldr	r3, [pc, #504]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d05b      	beq.n	8005354 <HAL_RCC_OscConfig+0x108>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d157      	bne.n	8005354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e24e      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b0:	d106      	bne.n	80052c0 <HAL_RCC_OscConfig+0x74>
 80052b2:	4b76      	ldr	r3, [pc, #472]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a75      	ldr	r2, [pc, #468]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e01d      	b.n	80052fc <HAL_RCC_OscConfig+0xb0>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x98>
 80052ca:	4b70      	ldr	r3, [pc, #448]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a6f      	ldr	r2, [pc, #444]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	4b6d      	ldr	r3, [pc, #436]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6c      	ldr	r2, [pc, #432]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e00b      	b.n	80052fc <HAL_RCC_OscConfig+0xb0>
 80052e4:	4b69      	ldr	r3, [pc, #420]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a68      	ldr	r2, [pc, #416]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	4b66      	ldr	r3, [pc, #408]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a65      	ldr	r2, [pc, #404]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80052f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d013      	beq.n	800532c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fe f9c6 	bl	8003694 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800530c:	f7fe f9c2 	bl	8003694 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b64      	cmp	r3, #100	@ 0x64
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e213      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531e:	4b5b      	ldr	r3, [pc, #364]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0xc0>
 800532a:	e014      	b.n	8005356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532c:	f7fe f9b2 	bl	8003694 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005334:	f7fe f9ae 	bl	8003694 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b64      	cmp	r3, #100	@ 0x64
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e1ff      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005346:	4b51      	ldr	r3, [pc, #324]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f0      	bne.n	8005334 <HAL_RCC_OscConfig+0xe8>
 8005352:	e000      	b.n	8005356 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d063      	beq.n	800542a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005362:	4b4a      	ldr	r3, [pc, #296]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800536e:	4b47      	ldr	r3, [pc, #284]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
        || \
 8005376:	2b08      	cmp	r3, #8
 8005378:	d11c      	bne.n	80053b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800537a:	4b44      	ldr	r3, [pc, #272]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d116      	bne.n	80053b4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005386:	4b41      	ldr	r3, [pc, #260]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <HAL_RCC_OscConfig+0x152>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d001      	beq.n	800539e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e1d3      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539e:	4b3b      	ldr	r3, [pc, #236]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4937      	ldr	r1, [pc, #220]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b2:	e03a      	b.n	800542a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d020      	beq.n	80053fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053bc:	4b34      	ldr	r3, [pc, #208]	@ (8005490 <HAL_RCC_OscConfig+0x244>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c2:	f7fe f967 	bl	8003694 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ca:	f7fe f963 	bl	8003694 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e1b4      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053dc:	4b2b      	ldr	r3, [pc, #172]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e8:	4b28      	ldr	r3, [pc, #160]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4925      	ldr	r1, [pc, #148]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	600b      	str	r3, [r1, #0]
 80053fc:	e015      	b.n	800542a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053fe:	4b24      	ldr	r3, [pc, #144]	@ (8005490 <HAL_RCC_OscConfig+0x244>)
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fe f946 	bl	8003694 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800540c:	f7fe f942 	bl	8003694 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e193      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541e:	4b1b      	ldr	r3, [pc, #108]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d036      	beq.n	80054a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800543e:	4b15      	ldr	r3, [pc, #84]	@ (8005494 <HAL_RCC_OscConfig+0x248>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005444:	f7fe f926 	bl	8003694 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800544c:	f7fe f922 	bl	8003694 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e173      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545e:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_RCC_OscConfig+0x240>)
 8005460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0x200>
 800546a:	e01b      	b.n	80054a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800546c:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <HAL_RCC_OscConfig+0x248>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005472:	f7fe f90f 	bl	8003694 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005478:	e00e      	b.n	8005498 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547a:	f7fe f90b 	bl	8003694 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d907      	bls.n	8005498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e15c      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
 800548c:	40023800 	.word	0x40023800
 8005490:	42470000 	.word	0x42470000
 8005494:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005498:	4b8a      	ldr	r3, [pc, #552]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 800549a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1ea      	bne.n	800547a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8097 	beq.w	80055e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b6:	4b83      	ldr	r3, [pc, #524]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10f      	bne.n	80054e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	4b7f      	ldr	r3, [pc, #508]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	4a7e      	ldr	r2, [pc, #504]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80054cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054d2:	4b7c      	ldr	r3, [pc, #496]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054da:	60bb      	str	r3, [r7, #8]
 80054dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e2:	4b79      	ldr	r3, [pc, #484]	@ (80056c8 <HAL_RCC_OscConfig+0x47c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d118      	bne.n	8005520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ee:	4b76      	ldr	r3, [pc, #472]	@ (80056c8 <HAL_RCC_OscConfig+0x47c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a75      	ldr	r2, [pc, #468]	@ (80056c8 <HAL_RCC_OscConfig+0x47c>)
 80054f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054fa:	f7fe f8cb 	bl	8003694 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005502:	f7fe f8c7 	bl	8003694 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e118      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005514:	4b6c      	ldr	r3, [pc, #432]	@ (80056c8 <HAL_RCC_OscConfig+0x47c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d106      	bne.n	8005536 <HAL_RCC_OscConfig+0x2ea>
 8005528:	4b66      	ldr	r3, [pc, #408]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 800552a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552c:	4a65      	ldr	r2, [pc, #404]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	6713      	str	r3, [r2, #112]	@ 0x70
 8005534:	e01c      	b.n	8005570 <HAL_RCC_OscConfig+0x324>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b05      	cmp	r3, #5
 800553c:	d10c      	bne.n	8005558 <HAL_RCC_OscConfig+0x30c>
 800553e:	4b61      	ldr	r3, [pc, #388]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005542:	4a60      	ldr	r2, [pc, #384]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 8005544:	f043 0304 	orr.w	r3, r3, #4
 8005548:	6713      	str	r3, [r2, #112]	@ 0x70
 800554a:	4b5e      	ldr	r3, [pc, #376]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554e:	4a5d      	ldr	r2, [pc, #372]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	6713      	str	r3, [r2, #112]	@ 0x70
 8005556:	e00b      	b.n	8005570 <HAL_RCC_OscConfig+0x324>
 8005558:	4b5a      	ldr	r3, [pc, #360]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555c:	4a59      	ldr	r2, [pc, #356]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	6713      	str	r3, [r2, #112]	@ 0x70
 8005564:	4b57      	ldr	r3, [pc, #348]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005568:	4a56      	ldr	r2, [pc, #344]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 800556a:	f023 0304 	bic.w	r3, r3, #4
 800556e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d015      	beq.n	80055a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005578:	f7fe f88c 	bl	8003694 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557e:	e00a      	b.n	8005596 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005580:	f7fe f888 	bl	8003694 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e0d7      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005596:	4b4b      	ldr	r3, [pc, #300]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0ee      	beq.n	8005580 <HAL_RCC_OscConfig+0x334>
 80055a2:	e014      	b.n	80055ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a4:	f7fe f876 	bl	8003694 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055aa:	e00a      	b.n	80055c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ac:	f7fe f872 	bl	8003694 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e0c1      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c2:	4b40      	ldr	r3, [pc, #256]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1ee      	bne.n	80055ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d105      	bne.n	80055e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d4:	4b3b      	ldr	r3, [pc, #236]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	4a3a      	ldr	r2, [pc, #232]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80055da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80ad 	beq.w	8005744 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ea:	4b36      	ldr	r3, [pc, #216]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d060      	beq.n	80056b8 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d145      	bne.n	800568a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fe:	4b33      	ldr	r3, [pc, #204]	@ (80056cc <HAL_RCC_OscConfig+0x480>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fe f846 	bl	8003694 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560c:	f7fe f842 	bl	8003694 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e093      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561e:	4b29      	ldr	r3, [pc, #164]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	3b01      	subs	r3, #1
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	061b      	lsls	r3, r3, #24
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	071b      	lsls	r3, r3, #28
 8005656:	491b      	ldr	r1, [pc, #108]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 8005658:	4313      	orrs	r3, r2
 800565a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800565c:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x480>)
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005662:	f7fe f817 	bl	8003694 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566a:	f7fe f813 	bl	8003694 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e064      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567c:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <HAL_RCC_OscConfig+0x41e>
 8005688:	e05c      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568a:	4b10      	ldr	r3, [pc, #64]	@ (80056cc <HAL_RCC_OscConfig+0x480>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fe f800 	bl	8003694 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005698:	f7fd fffc 	bl	8003694 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e04d      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCC_OscConfig+0x478>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x44c>
 80056b6:	e045      	b.n	8005744 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d107      	bne.n	80056d0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e040      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40007000 	.word	0x40007000
 80056cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005750 <HAL_RCC_OscConfig+0x504>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d030      	beq.n	8005740 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d129      	bne.n	8005740 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d122      	bne.n	8005740 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	4293      	cmp	r3, r2
 800570a:	d119      	bne.n	8005740 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	3b01      	subs	r3, #1
 800571a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d10f      	bne.n	8005740 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d107      	bne.n	8005740 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40023800 	.word	0x40023800

08005754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e042      	b.n	80057ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fc f812 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2224      	movs	r2, #36	@ 0x24
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f973 	bl	8005a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	@ 0x28
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b20      	cmp	r3, #32
 8005812:	d175      	bne.n	8005900 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_UART_Transmit+0x2c>
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e06e      	b.n	8005902 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2221      	movs	r2, #33	@ 0x21
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005832:	f7fd ff2f 	bl	8003694 <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	88fa      	ldrh	r2, [r7, #6]
 8005842:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584c:	d108      	bne.n	8005860 <HAL_UART_Transmit+0x6c>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d104      	bne.n	8005860 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	e003      	b.n	8005868 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005868:	e02e      	b.n	80058c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2200      	movs	r2, #0
 8005872:	2180      	movs	r1, #128	@ 0x80
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f848 	bl	800590a <UART_WaitOnFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e03a      	b.n	8005902 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	3302      	adds	r3, #2
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	e007      	b.n	80058ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1cb      	bne.n	800586a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2200      	movs	r2, #0
 80058da:	2140      	movs	r1, #64	@ 0x40
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f814 	bl	800590a <UART_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e006      	b.n	8005902 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	e000      	b.n	8005902 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	4613      	mov	r3, r2
 8005918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591a:	e03b      	b.n	8005994 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005922:	d037      	beq.n	8005994 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7fd feb6 	bl	8003694 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	6a3a      	ldr	r2, [r7, #32]
 8005930:	429a      	cmp	r2, r3
 8005932:	d302      	bcc.n	800593a <UART_WaitOnFlagUntilTimeout+0x30>
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e03a      	b.n	80059b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d023      	beq.n	8005994 <UART_WaitOnFlagUntilTimeout+0x8a>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b80      	cmp	r3, #128	@ 0x80
 8005950:	d020      	beq.n	8005994 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b40      	cmp	r3, #64	@ 0x40
 8005956:	d01d      	beq.n	8005994 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b08      	cmp	r3, #8
 8005964:	d116      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f81d 	bl	80059bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2208      	movs	r2, #8
 8005986:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e00f      	b.n	80059b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4013      	ands	r3, r2
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d0b4      	beq.n	800591c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b095      	sub	sp, #84	@ 0x54
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80059e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e5      	bne.n	80059c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3314      	adds	r3, #20
 80059fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d119      	bne.n	8005a68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f023 0310 	bic.w	r3, r3, #16
 8005a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a54:	61ba      	str	r2, [r7, #24]
 8005a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6979      	ldr	r1, [r7, #20]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	613b      	str	r3, [r7, #16]
   return(result);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a76:	bf00      	nop
 8005a78:	3754      	adds	r7, #84	@ 0x54
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a88:	b0c0      	sub	sp, #256	@ 0x100
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	68d9      	ldr	r1, [r3, #12]
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	ea40 0301 	orr.w	r3, r0, r1
 8005aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005adc:	f021 010c 	bic.w	r1, r1, #12
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005aea:	430b      	orrs	r3, r1
 8005aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afe:	6999      	ldr	r1, [r3, #24]
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	ea40 0301 	orr.w	r3, r0, r1
 8005b0a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b95      	ldr	r3, [pc, #596]	@ (8005d68 <UART_SetConfig+0x2e4>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d011      	beq.n	8005b3c <UART_SetConfig+0xb8>
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b93      	ldr	r3, [pc, #588]	@ (8005d6c <UART_SetConfig+0x2e8>)
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d00b      	beq.n	8005b3c <UART_SetConfig+0xb8>
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b91      	ldr	r3, [pc, #580]	@ (8005d70 <UART_SetConfig+0x2ec>)
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d005      	beq.n	8005b3c <UART_SetConfig+0xb8>
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b8f      	ldr	r3, [pc, #572]	@ (8005d74 <UART_SetConfig+0x2f0>)
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d104      	bne.n	8005b46 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b3c:	f7ff fb72 	bl	8005224 <HAL_RCC_GetPCLK2Freq>
 8005b40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b44:	e003      	b.n	8005b4e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b46:	f7ff fb59 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 8005b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b58:	f040 8110 	bne.w	8005d7c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b6e:	4622      	mov	r2, r4
 8005b70:	462b      	mov	r3, r5
 8005b72:	1891      	adds	r1, r2, r2
 8005b74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b76:	415b      	adcs	r3, r3
 8005b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b7e:	4621      	mov	r1, r4
 8005b80:	eb12 0801 	adds.w	r8, r2, r1
 8005b84:	4629      	mov	r1, r5
 8005b86:	eb43 0901 	adc.w	r9, r3, r1
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b9e:	4690      	mov	r8, r2
 8005ba0:	4699      	mov	r9, r3
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	eb18 0303 	adds.w	r3, r8, r3
 8005ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bac:	462b      	mov	r3, r5
 8005bae:	eb49 0303 	adc.w	r3, r9, r3
 8005bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bca:	460b      	mov	r3, r1
 8005bcc:	18db      	adds	r3, r3, r3
 8005bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	eb42 0303 	adc.w	r3, r2, r3
 8005bd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005be0:	f7fb f87a 	bl	8000cd8 <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4b63      	ldr	r3, [pc, #396]	@ (8005d78 <UART_SetConfig+0x2f4>)
 8005bea:	fba3 2302 	umull	r2, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	011c      	lsls	r4, r3, #4
 8005bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	1891      	adds	r1, r2, r2
 8005c0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c0c:	415b      	adcs	r3, r3
 8005c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c14:	4641      	mov	r1, r8
 8005c16:	eb12 0a01 	adds.w	sl, r2, r1
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c34:	4692      	mov	sl, r2
 8005c36:	469b      	mov	fp, r3
 8005c38:	4643      	mov	r3, r8
 8005c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c42:	464b      	mov	r3, r9
 8005c44:	eb4b 0303 	adc.w	r3, fp, r3
 8005c48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c60:	460b      	mov	r3, r1
 8005c62:	18db      	adds	r3, r3, r3
 8005c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c66:	4613      	mov	r3, r2
 8005c68:	eb42 0303 	adc.w	r3, r2, r3
 8005c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c76:	f7fb f82f 	bl	8000cd8 <__aeabi_uldivmod>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4b3d      	ldr	r3, [pc, #244]	@ (8005d78 <UART_SetConfig+0x2f4>)
 8005c82:	fba3 2301 	umull	r2, r3, r3, r1
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	2264      	movs	r2, #100	@ 0x64
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	1acb      	subs	r3, r1, r3
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c96:	4b38      	ldr	r3, [pc, #224]	@ (8005d78 <UART_SetConfig+0x2f4>)
 8005c98:	fba3 2302 	umull	r2, r3, r3, r2
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ca4:	441c      	add	r4, r3
 8005ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	1891      	adds	r1, r2, r2
 8005cbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cc0:	415b      	adcs	r3, r3
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cc8:	4641      	mov	r1, r8
 8005cca:	1851      	adds	r1, r2, r1
 8005ccc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cce:	4649      	mov	r1, r9
 8005cd0:	414b      	adcs	r3, r1
 8005cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	00cb      	lsls	r3, r1, #3
 8005ce4:	4651      	mov	r1, sl
 8005ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cea:	4651      	mov	r1, sl
 8005cec:	00ca      	lsls	r2, r1, #3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	189b      	adds	r3, r3, r2
 8005cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	460a      	mov	r2, r1
 8005d00:	eb42 0303 	adc.w	r3, r2, r3
 8005d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	18db      	adds	r3, r3, r3
 8005d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d22:	4613      	mov	r3, r2
 8005d24:	eb42 0303 	adc.w	r3, r2, r3
 8005d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d32:	f7fa ffd1 	bl	8000cd8 <__aeabi_uldivmod>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d78 <UART_SetConfig+0x2f4>)
 8005d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	2164      	movs	r1, #100	@ 0x64
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	3332      	adds	r3, #50	@ 0x32
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d78 <UART_SetConfig+0x2f4>)
 8005d50:	fba2 2303 	umull	r2, r3, r2, r3
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	f003 0207 	and.w	r2, r3, #7
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4422      	add	r2, r4
 8005d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d64:	e10a      	b.n	8005f7c <UART_SetConfig+0x4f8>
 8005d66:	bf00      	nop
 8005d68:	40011000 	.word	0x40011000
 8005d6c:	40011400 	.word	0x40011400
 8005d70:	40011800 	.word	0x40011800
 8005d74:	40011c00 	.word	0x40011c00
 8005d78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d8e:	4642      	mov	r2, r8
 8005d90:	464b      	mov	r3, r9
 8005d92:	1891      	adds	r1, r2, r2
 8005d94:	6239      	str	r1, [r7, #32]
 8005d96:	415b      	adcs	r3, r3
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d9e:	4641      	mov	r1, r8
 8005da0:	1854      	adds	r4, r2, r1
 8005da2:	4649      	mov	r1, r9
 8005da4:	eb43 0501 	adc.w	r5, r3, r1
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	00eb      	lsls	r3, r5, #3
 8005db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005db6:	00e2      	lsls	r2, r4, #3
 8005db8:	4614      	mov	r4, r2
 8005dba:	461d      	mov	r5, r3
 8005dbc:	4643      	mov	r3, r8
 8005dbe:	18e3      	adds	r3, r4, r3
 8005dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	eb45 0303 	adc.w	r3, r5, r3
 8005dca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dea:	4629      	mov	r1, r5
 8005dec:	008b      	lsls	r3, r1, #2
 8005dee:	4621      	mov	r1, r4
 8005df0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df4:	4621      	mov	r1, r4
 8005df6:	008a      	lsls	r2, r1, #2
 8005df8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005dfc:	f7fa ff6c 	bl	8000cd8 <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4b60      	ldr	r3, [pc, #384]	@ (8005f88 <UART_SetConfig+0x504>)
 8005e06:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	011c      	lsls	r4, r3, #4
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	1891      	adds	r1, r2, r2
 8005e26:	61b9      	str	r1, [r7, #24]
 8005e28:	415b      	adcs	r3, r3
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e30:	4641      	mov	r1, r8
 8005e32:	1851      	adds	r1, r2, r1
 8005e34:	6139      	str	r1, [r7, #16]
 8005e36:	4649      	mov	r1, r9
 8005e38:	414b      	adcs	r3, r1
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e48:	4659      	mov	r1, fp
 8005e4a:	00cb      	lsls	r3, r1, #3
 8005e4c:	4651      	mov	r1, sl
 8005e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e52:	4651      	mov	r1, sl
 8005e54:	00ca      	lsls	r2, r1, #3
 8005e56:	4610      	mov	r0, r2
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	189b      	adds	r3, r3, r2
 8005e60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e64:	464b      	mov	r3, r9
 8005e66:	460a      	mov	r2, r1
 8005e68:	eb42 0303 	adc.w	r3, r2, r3
 8005e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e88:	4649      	mov	r1, r9
 8005e8a:	008b      	lsls	r3, r1, #2
 8005e8c:	4641      	mov	r1, r8
 8005e8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e92:	4641      	mov	r1, r8
 8005e94:	008a      	lsls	r2, r1, #2
 8005e96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e9a:	f7fa ff1d 	bl	8000cd8 <__aeabi_uldivmod>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4b38      	ldr	r3, [pc, #224]	@ (8005f88 <UART_SetConfig+0x504>)
 8005ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	2264      	movs	r2, #100	@ 0x64
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	1acb      	subs	r3, r1, r3
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	3332      	adds	r3, #50	@ 0x32
 8005eb8:	4a33      	ldr	r2, [pc, #204]	@ (8005f88 <UART_SetConfig+0x504>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ec4:	441c      	add	r4, r3
 8005ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eca:	2200      	movs	r2, #0
 8005ecc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ece:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ed0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	1891      	adds	r1, r2, r2
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	415b      	adcs	r3, r3
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	1851      	adds	r1, r2, r1
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	4649      	mov	r1, r9
 8005eec:	414b      	adcs	r3, r1
 8005eee:	607b      	str	r3, [r7, #4]
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005efc:	4659      	mov	r1, fp
 8005efe:	00cb      	lsls	r3, r1, #3
 8005f00:	4651      	mov	r1, sl
 8005f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f06:	4651      	mov	r1, sl
 8005f08:	00ca      	lsls	r2, r1, #3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4642      	mov	r2, r8
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f16:	464b      	mov	r3, r9
 8005f18:	460a      	mov	r2, r1
 8005f1a:	eb42 0303 	adc.w	r3, r2, r3
 8005f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f38:	4649      	mov	r1, r9
 8005f3a:	008b      	lsls	r3, r1, #2
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f42:	4641      	mov	r1, r8
 8005f44:	008a      	lsls	r2, r1, #2
 8005f46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f4a:	f7fa fec5 	bl	8000cd8 <__aeabi_uldivmod>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <UART_SetConfig+0x504>)
 8005f54:	fba3 1302 	umull	r1, r3, r3, r2
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	2164      	movs	r1, #100	@ 0x64
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	3332      	adds	r3, #50	@ 0x32
 8005f66:	4a08      	ldr	r2, [pc, #32]	@ (8005f88 <UART_SetConfig+0x504>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	f003 020f 	and.w	r2, r3, #15
 8005f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4422      	add	r2, r4
 8005f7a:	609a      	str	r2, [r3, #8]
}
 8005f7c:	bf00      	nop
 8005f7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f82:	46bd      	mov	sp, r7
 8005f84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f88:	51eb851f 	.word	0x51eb851f

08005f8c <__cvt>:
 8005f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	ec57 6b10 	vmov	r6, r7, d0
 8005f94:	2f00      	cmp	r7, #0
 8005f96:	460c      	mov	r4, r1
 8005f98:	4619      	mov	r1, r3
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	bfbb      	ittet	lt
 8005f9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005fa2:	461f      	movlt	r7, r3
 8005fa4:	2300      	movge	r3, #0
 8005fa6:	232d      	movlt	r3, #45	@ 0x2d
 8005fa8:	700b      	strb	r3, [r1, #0]
 8005faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fb0:	4691      	mov	r9, r2
 8005fb2:	f023 0820 	bic.w	r8, r3, #32
 8005fb6:	bfbc      	itt	lt
 8005fb8:	4632      	movlt	r2, r6
 8005fba:	4616      	movlt	r6, r2
 8005fbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fc0:	d005      	beq.n	8005fce <__cvt+0x42>
 8005fc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fc6:	d100      	bne.n	8005fca <__cvt+0x3e>
 8005fc8:	3401      	adds	r4, #1
 8005fca:	2102      	movs	r1, #2
 8005fcc:	e000      	b.n	8005fd0 <__cvt+0x44>
 8005fce:	2103      	movs	r1, #3
 8005fd0:	ab03      	add	r3, sp, #12
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	ab02      	add	r3, sp, #8
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	ec47 6b10 	vmov	d0, r6, r7
 8005fdc:	4653      	mov	r3, sl
 8005fde:	4622      	mov	r2, r4
 8005fe0:	f001 fe9a 	bl	8007d18 <_dtoa_r>
 8005fe4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fe8:	4605      	mov	r5, r0
 8005fea:	d119      	bne.n	8006020 <__cvt+0x94>
 8005fec:	f019 0f01 	tst.w	r9, #1
 8005ff0:	d00e      	beq.n	8006010 <__cvt+0x84>
 8005ff2:	eb00 0904 	add.w	r9, r0, r4
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa fd8b 	bl	8000b18 <__aeabi_dcmpeq>
 8006002:	b108      	cbz	r0, 8006008 <__cvt+0x7c>
 8006004:	f8cd 900c 	str.w	r9, [sp, #12]
 8006008:	2230      	movs	r2, #48	@ 0x30
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	454b      	cmp	r3, r9
 800600e:	d31e      	bcc.n	800604e <__cvt+0xc2>
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006014:	1b5b      	subs	r3, r3, r5
 8006016:	4628      	mov	r0, r5
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	b004      	add	sp, #16
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006024:	eb00 0904 	add.w	r9, r0, r4
 8006028:	d1e5      	bne.n	8005ff6 <__cvt+0x6a>
 800602a:	7803      	ldrb	r3, [r0, #0]
 800602c:	2b30      	cmp	r3, #48	@ 0x30
 800602e:	d10a      	bne.n	8006046 <__cvt+0xba>
 8006030:	2200      	movs	r2, #0
 8006032:	2300      	movs	r3, #0
 8006034:	4630      	mov	r0, r6
 8006036:	4639      	mov	r1, r7
 8006038:	f7fa fd6e 	bl	8000b18 <__aeabi_dcmpeq>
 800603c:	b918      	cbnz	r0, 8006046 <__cvt+0xba>
 800603e:	f1c4 0401 	rsb	r4, r4, #1
 8006042:	f8ca 4000 	str.w	r4, [sl]
 8006046:	f8da 3000 	ldr.w	r3, [sl]
 800604a:	4499      	add	r9, r3
 800604c:	e7d3      	b.n	8005ff6 <__cvt+0x6a>
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	9103      	str	r1, [sp, #12]
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	e7d9      	b.n	800600a <__cvt+0x7e>

08006056 <__exponent>:
 8006056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006058:	2900      	cmp	r1, #0
 800605a:	bfba      	itte	lt
 800605c:	4249      	neglt	r1, r1
 800605e:	232d      	movlt	r3, #45	@ 0x2d
 8006060:	232b      	movge	r3, #43	@ 0x2b
 8006062:	2909      	cmp	r1, #9
 8006064:	7002      	strb	r2, [r0, #0]
 8006066:	7043      	strb	r3, [r0, #1]
 8006068:	dd29      	ble.n	80060be <__exponent+0x68>
 800606a:	f10d 0307 	add.w	r3, sp, #7
 800606e:	461d      	mov	r5, r3
 8006070:	270a      	movs	r7, #10
 8006072:	461a      	mov	r2, r3
 8006074:	fbb1 f6f7 	udiv	r6, r1, r7
 8006078:	fb07 1416 	mls	r4, r7, r6, r1
 800607c:	3430      	adds	r4, #48	@ 0x30
 800607e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006082:	460c      	mov	r4, r1
 8006084:	2c63      	cmp	r4, #99	@ 0x63
 8006086:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800608a:	4631      	mov	r1, r6
 800608c:	dcf1      	bgt.n	8006072 <__exponent+0x1c>
 800608e:	3130      	adds	r1, #48	@ 0x30
 8006090:	1e94      	subs	r4, r2, #2
 8006092:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006096:	1c41      	adds	r1, r0, #1
 8006098:	4623      	mov	r3, r4
 800609a:	42ab      	cmp	r3, r5
 800609c:	d30a      	bcc.n	80060b4 <__exponent+0x5e>
 800609e:	f10d 0309 	add.w	r3, sp, #9
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	42ac      	cmp	r4, r5
 80060a6:	bf88      	it	hi
 80060a8:	2300      	movhi	r3, #0
 80060aa:	3302      	adds	r3, #2
 80060ac:	4403      	add	r3, r0
 80060ae:	1a18      	subs	r0, r3, r0
 80060b0:	b003      	add	sp, #12
 80060b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060bc:	e7ed      	b.n	800609a <__exponent+0x44>
 80060be:	2330      	movs	r3, #48	@ 0x30
 80060c0:	3130      	adds	r1, #48	@ 0x30
 80060c2:	7083      	strb	r3, [r0, #2]
 80060c4:	70c1      	strb	r1, [r0, #3]
 80060c6:	1d03      	adds	r3, r0, #4
 80060c8:	e7f1      	b.n	80060ae <__exponent+0x58>
	...

080060cc <_printf_float>:
 80060cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d0:	b08d      	sub	sp, #52	@ 0x34
 80060d2:	460c      	mov	r4, r1
 80060d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060d8:	4616      	mov	r6, r2
 80060da:	461f      	mov	r7, r3
 80060dc:	4605      	mov	r5, r0
 80060de:	f001 fd41 	bl	8007b64 <_localeconv_r>
 80060e2:	6803      	ldr	r3, [r0, #0]
 80060e4:	9304      	str	r3, [sp, #16]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fa f8ea 	bl	80002c0 <strlen>
 80060ec:	2300      	movs	r3, #0
 80060ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f0:	f8d8 3000 	ldr.w	r3, [r8]
 80060f4:	9005      	str	r0, [sp, #20]
 80060f6:	3307      	adds	r3, #7
 80060f8:	f023 0307 	bic.w	r3, r3, #7
 80060fc:	f103 0208 	add.w	r2, r3, #8
 8006100:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006104:	f8d4 b000 	ldr.w	fp, [r4]
 8006108:	f8c8 2000 	str.w	r2, [r8]
 800610c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006110:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	f8cd 8018 	str.w	r8, [sp, #24]
 800611a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800611e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006122:	4b9c      	ldr	r3, [pc, #624]	@ (8006394 <_printf_float+0x2c8>)
 8006124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006128:	f7fa fd28 	bl	8000b7c <__aeabi_dcmpun>
 800612c:	bb70      	cbnz	r0, 800618c <_printf_float+0xc0>
 800612e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006132:	4b98      	ldr	r3, [pc, #608]	@ (8006394 <_printf_float+0x2c8>)
 8006134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006138:	f7fa fd02 	bl	8000b40 <__aeabi_dcmple>
 800613c:	bb30      	cbnz	r0, 800618c <_printf_float+0xc0>
 800613e:	2200      	movs	r2, #0
 8006140:	2300      	movs	r3, #0
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa fcf1 	bl	8000b2c <__aeabi_dcmplt>
 800614a:	b110      	cbz	r0, 8006152 <_printf_float+0x86>
 800614c:	232d      	movs	r3, #45	@ 0x2d
 800614e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006152:	4a91      	ldr	r2, [pc, #580]	@ (8006398 <_printf_float+0x2cc>)
 8006154:	4b91      	ldr	r3, [pc, #580]	@ (800639c <_printf_float+0x2d0>)
 8006156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800615a:	bf94      	ite	ls
 800615c:	4690      	movls	r8, r2
 800615e:	4698      	movhi	r8, r3
 8006160:	2303      	movs	r3, #3
 8006162:	6123      	str	r3, [r4, #16]
 8006164:	f02b 0304 	bic.w	r3, fp, #4
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	f04f 0900 	mov.w	r9, #0
 800616e:	9700      	str	r7, [sp, #0]
 8006170:	4633      	mov	r3, r6
 8006172:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006174:	4621      	mov	r1, r4
 8006176:	4628      	mov	r0, r5
 8006178:	f000 f9d2 	bl	8006520 <_printf_common>
 800617c:	3001      	adds	r0, #1
 800617e:	f040 808d 	bne.w	800629c <_printf_float+0x1d0>
 8006182:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006186:	b00d      	add	sp, #52	@ 0x34
 8006188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	f7fa fcf2 	bl	8000b7c <__aeabi_dcmpun>
 8006198:	b140      	cbz	r0, 80061ac <_printf_float+0xe0>
 800619a:	464b      	mov	r3, r9
 800619c:	2b00      	cmp	r3, #0
 800619e:	bfbc      	itt	lt
 80061a0:	232d      	movlt	r3, #45	@ 0x2d
 80061a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061a6:	4a7e      	ldr	r2, [pc, #504]	@ (80063a0 <_printf_float+0x2d4>)
 80061a8:	4b7e      	ldr	r3, [pc, #504]	@ (80063a4 <_printf_float+0x2d8>)
 80061aa:	e7d4      	b.n	8006156 <_printf_float+0x8a>
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061b2:	9206      	str	r2, [sp, #24]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	d13b      	bne.n	8006230 <_printf_float+0x164>
 80061b8:	2306      	movs	r3, #6
 80061ba:	6063      	str	r3, [r4, #4]
 80061bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061c0:	2300      	movs	r3, #0
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	9303      	str	r3, [sp, #12]
 80061c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80061c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061cc:	ab09      	add	r3, sp, #36	@ 0x24
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	6861      	ldr	r1, [r4, #4]
 80061d2:	ec49 8b10 	vmov	d0, r8, r9
 80061d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061da:	4628      	mov	r0, r5
 80061dc:	f7ff fed6 	bl	8005f8c <__cvt>
 80061e0:	9b06      	ldr	r3, [sp, #24]
 80061e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061e4:	2b47      	cmp	r3, #71	@ 0x47
 80061e6:	4680      	mov	r8, r0
 80061e8:	d129      	bne.n	800623e <_printf_float+0x172>
 80061ea:	1cc8      	adds	r0, r1, #3
 80061ec:	db02      	blt.n	80061f4 <_printf_float+0x128>
 80061ee:	6863      	ldr	r3, [r4, #4]
 80061f0:	4299      	cmp	r1, r3
 80061f2:	dd41      	ble.n	8006278 <_printf_float+0x1ac>
 80061f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80061f8:	fa5f fa8a 	uxtb.w	sl, sl
 80061fc:	3901      	subs	r1, #1
 80061fe:	4652      	mov	r2, sl
 8006200:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006204:	9109      	str	r1, [sp, #36]	@ 0x24
 8006206:	f7ff ff26 	bl	8006056 <__exponent>
 800620a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800620c:	1813      	adds	r3, r2, r0
 800620e:	2a01      	cmp	r2, #1
 8006210:	4681      	mov	r9, r0
 8006212:	6123      	str	r3, [r4, #16]
 8006214:	dc02      	bgt.n	800621c <_printf_float+0x150>
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	07d2      	lsls	r2, r2, #31
 800621a:	d501      	bpl.n	8006220 <_printf_float+0x154>
 800621c:	3301      	adds	r3, #1
 800621e:	6123      	str	r3, [r4, #16]
 8006220:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0a2      	beq.n	800616e <_printf_float+0xa2>
 8006228:	232d      	movs	r3, #45	@ 0x2d
 800622a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800622e:	e79e      	b.n	800616e <_printf_float+0xa2>
 8006230:	9a06      	ldr	r2, [sp, #24]
 8006232:	2a47      	cmp	r2, #71	@ 0x47
 8006234:	d1c2      	bne.n	80061bc <_printf_float+0xf0>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1c0      	bne.n	80061bc <_printf_float+0xf0>
 800623a:	2301      	movs	r3, #1
 800623c:	e7bd      	b.n	80061ba <_printf_float+0xee>
 800623e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006242:	d9db      	bls.n	80061fc <_printf_float+0x130>
 8006244:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006248:	d118      	bne.n	800627c <_printf_float+0x1b0>
 800624a:	2900      	cmp	r1, #0
 800624c:	6863      	ldr	r3, [r4, #4]
 800624e:	dd0b      	ble.n	8006268 <_printf_float+0x19c>
 8006250:	6121      	str	r1, [r4, #16]
 8006252:	b913      	cbnz	r3, 800625a <_printf_float+0x18e>
 8006254:	6822      	ldr	r2, [r4, #0]
 8006256:	07d0      	lsls	r0, r2, #31
 8006258:	d502      	bpl.n	8006260 <_printf_float+0x194>
 800625a:	3301      	adds	r3, #1
 800625c:	440b      	add	r3, r1
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006262:	f04f 0900 	mov.w	r9, #0
 8006266:	e7db      	b.n	8006220 <_printf_float+0x154>
 8006268:	b913      	cbnz	r3, 8006270 <_printf_float+0x1a4>
 800626a:	6822      	ldr	r2, [r4, #0]
 800626c:	07d2      	lsls	r2, r2, #31
 800626e:	d501      	bpl.n	8006274 <_printf_float+0x1a8>
 8006270:	3302      	adds	r3, #2
 8006272:	e7f4      	b.n	800625e <_printf_float+0x192>
 8006274:	2301      	movs	r3, #1
 8006276:	e7f2      	b.n	800625e <_printf_float+0x192>
 8006278:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800627c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800627e:	4299      	cmp	r1, r3
 8006280:	db05      	blt.n	800628e <_printf_float+0x1c2>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	6121      	str	r1, [r4, #16]
 8006286:	07d8      	lsls	r0, r3, #31
 8006288:	d5ea      	bpl.n	8006260 <_printf_float+0x194>
 800628a:	1c4b      	adds	r3, r1, #1
 800628c:	e7e7      	b.n	800625e <_printf_float+0x192>
 800628e:	2900      	cmp	r1, #0
 8006290:	bfd4      	ite	le
 8006292:	f1c1 0202 	rsble	r2, r1, #2
 8006296:	2201      	movgt	r2, #1
 8006298:	4413      	add	r3, r2
 800629a:	e7e0      	b.n	800625e <_printf_float+0x192>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	055a      	lsls	r2, r3, #21
 80062a0:	d407      	bmi.n	80062b2 <_printf_float+0x1e6>
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	4642      	mov	r2, r8
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	d12b      	bne.n	8006308 <_printf_float+0x23c>
 80062b0:	e767      	b.n	8006182 <_printf_float+0xb6>
 80062b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062b6:	f240 80dd 	bls.w	8006474 <_printf_float+0x3a8>
 80062ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062be:	2200      	movs	r2, #0
 80062c0:	2300      	movs	r3, #0
 80062c2:	f7fa fc29 	bl	8000b18 <__aeabi_dcmpeq>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d033      	beq.n	8006332 <_printf_float+0x266>
 80062ca:	4a37      	ldr	r2, [pc, #220]	@ (80063a8 <_printf_float+0x2dc>)
 80062cc:	2301      	movs	r3, #1
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f af54 	beq.w	8006182 <_printf_float+0xb6>
 80062da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062de:	4543      	cmp	r3, r8
 80062e0:	db02      	blt.n	80062e8 <_printf_float+0x21c>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	07d8      	lsls	r0, r3, #31
 80062e6:	d50f      	bpl.n	8006308 <_printf_float+0x23c>
 80062e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ec:	4631      	mov	r1, r6
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	f43f af45 	beq.w	8006182 <_printf_float+0xb6>
 80062f8:	f04f 0900 	mov.w	r9, #0
 80062fc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006300:	f104 0a1a 	add.w	sl, r4, #26
 8006304:	45c8      	cmp	r8, r9
 8006306:	dc09      	bgt.n	800631c <_printf_float+0x250>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	079b      	lsls	r3, r3, #30
 800630c:	f100 8103 	bmi.w	8006516 <_printf_float+0x44a>
 8006310:	68e0      	ldr	r0, [r4, #12]
 8006312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006314:	4298      	cmp	r0, r3
 8006316:	bfb8      	it	lt
 8006318:	4618      	movlt	r0, r3
 800631a:	e734      	b.n	8006186 <_printf_float+0xba>
 800631c:	2301      	movs	r3, #1
 800631e:	4652      	mov	r2, sl
 8006320:	4631      	mov	r1, r6
 8006322:	4628      	mov	r0, r5
 8006324:	47b8      	blx	r7
 8006326:	3001      	adds	r0, #1
 8006328:	f43f af2b 	beq.w	8006182 <_printf_float+0xb6>
 800632c:	f109 0901 	add.w	r9, r9, #1
 8006330:	e7e8      	b.n	8006304 <_printf_float+0x238>
 8006332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	dc39      	bgt.n	80063ac <_printf_float+0x2e0>
 8006338:	4a1b      	ldr	r2, [pc, #108]	@ (80063a8 <_printf_float+0x2dc>)
 800633a:	2301      	movs	r3, #1
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af1d 	beq.w	8006182 <_printf_float+0xb6>
 8006348:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800634c:	ea59 0303 	orrs.w	r3, r9, r3
 8006350:	d102      	bne.n	8006358 <_printf_float+0x28c>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	07d9      	lsls	r1, r3, #31
 8006356:	d5d7      	bpl.n	8006308 <_printf_float+0x23c>
 8006358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f af0d 	beq.w	8006182 <_printf_float+0xb6>
 8006368:	f04f 0a00 	mov.w	sl, #0
 800636c:	f104 0b1a 	add.w	fp, r4, #26
 8006370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006372:	425b      	negs	r3, r3
 8006374:	4553      	cmp	r3, sl
 8006376:	dc01      	bgt.n	800637c <_printf_float+0x2b0>
 8006378:	464b      	mov	r3, r9
 800637a:	e793      	b.n	80062a4 <_printf_float+0x1d8>
 800637c:	2301      	movs	r3, #1
 800637e:	465a      	mov	r2, fp
 8006380:	4631      	mov	r1, r6
 8006382:	4628      	mov	r0, r5
 8006384:	47b8      	blx	r7
 8006386:	3001      	adds	r0, #1
 8006388:	f43f aefb 	beq.w	8006182 <_printf_float+0xb6>
 800638c:	f10a 0a01 	add.w	sl, sl, #1
 8006390:	e7ee      	b.n	8006370 <_printf_float+0x2a4>
 8006392:	bf00      	nop
 8006394:	7fefffff 	.word	0x7fefffff
 8006398:	0800a84c 	.word	0x0800a84c
 800639c:	0800a850 	.word	0x0800a850
 80063a0:	0800a854 	.word	0x0800a854
 80063a4:	0800a858 	.word	0x0800a858
 80063a8:	0800a85c 	.word	0x0800a85c
 80063ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063b2:	4553      	cmp	r3, sl
 80063b4:	bfa8      	it	ge
 80063b6:	4653      	movge	r3, sl
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	4699      	mov	r9, r3
 80063bc:	dc36      	bgt.n	800642c <_printf_float+0x360>
 80063be:	f04f 0b00 	mov.w	fp, #0
 80063c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063c6:	f104 021a 	add.w	r2, r4, #26
 80063ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063cc:	9306      	str	r3, [sp, #24]
 80063ce:	eba3 0309 	sub.w	r3, r3, r9
 80063d2:	455b      	cmp	r3, fp
 80063d4:	dc31      	bgt.n	800643a <_printf_float+0x36e>
 80063d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d8:	459a      	cmp	sl, r3
 80063da:	dc3a      	bgt.n	8006452 <_printf_float+0x386>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	07da      	lsls	r2, r3, #31
 80063e0:	d437      	bmi.n	8006452 <_printf_float+0x386>
 80063e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e4:	ebaa 0903 	sub.w	r9, sl, r3
 80063e8:	9b06      	ldr	r3, [sp, #24]
 80063ea:	ebaa 0303 	sub.w	r3, sl, r3
 80063ee:	4599      	cmp	r9, r3
 80063f0:	bfa8      	it	ge
 80063f2:	4699      	movge	r9, r3
 80063f4:	f1b9 0f00 	cmp.w	r9, #0
 80063f8:	dc33      	bgt.n	8006462 <_printf_float+0x396>
 80063fa:	f04f 0800 	mov.w	r8, #0
 80063fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006402:	f104 0b1a 	add.w	fp, r4, #26
 8006406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006408:	ebaa 0303 	sub.w	r3, sl, r3
 800640c:	eba3 0309 	sub.w	r3, r3, r9
 8006410:	4543      	cmp	r3, r8
 8006412:	f77f af79 	ble.w	8006308 <_printf_float+0x23c>
 8006416:	2301      	movs	r3, #1
 8006418:	465a      	mov	r2, fp
 800641a:	4631      	mov	r1, r6
 800641c:	4628      	mov	r0, r5
 800641e:	47b8      	blx	r7
 8006420:	3001      	adds	r0, #1
 8006422:	f43f aeae 	beq.w	8006182 <_printf_float+0xb6>
 8006426:	f108 0801 	add.w	r8, r8, #1
 800642a:	e7ec      	b.n	8006406 <_printf_float+0x33a>
 800642c:	4642      	mov	r2, r8
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	d1c2      	bne.n	80063be <_printf_float+0x2f2>
 8006438:	e6a3      	b.n	8006182 <_printf_float+0xb6>
 800643a:	2301      	movs	r3, #1
 800643c:	4631      	mov	r1, r6
 800643e:	4628      	mov	r0, r5
 8006440:	9206      	str	r2, [sp, #24]
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	f43f ae9c 	beq.w	8006182 <_printf_float+0xb6>
 800644a:	9a06      	ldr	r2, [sp, #24]
 800644c:	f10b 0b01 	add.w	fp, fp, #1
 8006450:	e7bb      	b.n	80063ca <_printf_float+0x2fe>
 8006452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006456:	4631      	mov	r1, r6
 8006458:	4628      	mov	r0, r5
 800645a:	47b8      	blx	r7
 800645c:	3001      	adds	r0, #1
 800645e:	d1c0      	bne.n	80063e2 <_printf_float+0x316>
 8006460:	e68f      	b.n	8006182 <_printf_float+0xb6>
 8006462:	9a06      	ldr	r2, [sp, #24]
 8006464:	464b      	mov	r3, r9
 8006466:	4442      	add	r2, r8
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	d1c3      	bne.n	80063fa <_printf_float+0x32e>
 8006472:	e686      	b.n	8006182 <_printf_float+0xb6>
 8006474:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006478:	f1ba 0f01 	cmp.w	sl, #1
 800647c:	dc01      	bgt.n	8006482 <_printf_float+0x3b6>
 800647e:	07db      	lsls	r3, r3, #31
 8006480:	d536      	bpl.n	80064f0 <_printf_float+0x424>
 8006482:	2301      	movs	r3, #1
 8006484:	4642      	mov	r2, r8
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f ae78 	beq.w	8006182 <_printf_float+0xb6>
 8006492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	f43f ae70 	beq.w	8006182 <_printf_float+0xb6>
 80064a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064a6:	2200      	movs	r2, #0
 80064a8:	2300      	movs	r3, #0
 80064aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80064ae:	f7fa fb33 	bl	8000b18 <__aeabi_dcmpeq>
 80064b2:	b9c0      	cbnz	r0, 80064e6 <_printf_float+0x41a>
 80064b4:	4653      	mov	r3, sl
 80064b6:	f108 0201 	add.w	r2, r8, #1
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	d10c      	bne.n	80064de <_printf_float+0x412>
 80064c4:	e65d      	b.n	8006182 <_printf_float+0xb6>
 80064c6:	2301      	movs	r3, #1
 80064c8:	465a      	mov	r2, fp
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	f43f ae56 	beq.w	8006182 <_printf_float+0xb6>
 80064d6:	f108 0801 	add.w	r8, r8, #1
 80064da:	45d0      	cmp	r8, sl
 80064dc:	dbf3      	blt.n	80064c6 <_printf_float+0x3fa>
 80064de:	464b      	mov	r3, r9
 80064e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064e4:	e6df      	b.n	80062a6 <_printf_float+0x1da>
 80064e6:	f04f 0800 	mov.w	r8, #0
 80064ea:	f104 0b1a 	add.w	fp, r4, #26
 80064ee:	e7f4      	b.n	80064da <_printf_float+0x40e>
 80064f0:	2301      	movs	r3, #1
 80064f2:	4642      	mov	r2, r8
 80064f4:	e7e1      	b.n	80064ba <_printf_float+0x3ee>
 80064f6:	2301      	movs	r3, #1
 80064f8:	464a      	mov	r2, r9
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	f43f ae3e 	beq.w	8006182 <_printf_float+0xb6>
 8006506:	f108 0801 	add.w	r8, r8, #1
 800650a:	68e3      	ldr	r3, [r4, #12]
 800650c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800650e:	1a5b      	subs	r3, r3, r1
 8006510:	4543      	cmp	r3, r8
 8006512:	dcf0      	bgt.n	80064f6 <_printf_float+0x42a>
 8006514:	e6fc      	b.n	8006310 <_printf_float+0x244>
 8006516:	f04f 0800 	mov.w	r8, #0
 800651a:	f104 0919 	add.w	r9, r4, #25
 800651e:	e7f4      	b.n	800650a <_printf_float+0x43e>

08006520 <_printf_common>:
 8006520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	4616      	mov	r6, r2
 8006526:	4698      	mov	r8, r3
 8006528:	688a      	ldr	r2, [r1, #8]
 800652a:	690b      	ldr	r3, [r1, #16]
 800652c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006530:	4293      	cmp	r3, r2
 8006532:	bfb8      	it	lt
 8006534:	4613      	movlt	r3, r2
 8006536:	6033      	str	r3, [r6, #0]
 8006538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800653c:	4607      	mov	r7, r0
 800653e:	460c      	mov	r4, r1
 8006540:	b10a      	cbz	r2, 8006546 <_printf_common+0x26>
 8006542:	3301      	adds	r3, #1
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	0699      	lsls	r1, r3, #26
 800654a:	bf42      	ittt	mi
 800654c:	6833      	ldrmi	r3, [r6, #0]
 800654e:	3302      	addmi	r3, #2
 8006550:	6033      	strmi	r3, [r6, #0]
 8006552:	6825      	ldr	r5, [r4, #0]
 8006554:	f015 0506 	ands.w	r5, r5, #6
 8006558:	d106      	bne.n	8006568 <_printf_common+0x48>
 800655a:	f104 0a19 	add.w	sl, r4, #25
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	6832      	ldr	r2, [r6, #0]
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	42ab      	cmp	r3, r5
 8006566:	dc26      	bgt.n	80065b6 <_printf_common+0x96>
 8006568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	3b00      	subs	r3, #0
 8006570:	bf18      	it	ne
 8006572:	2301      	movne	r3, #1
 8006574:	0692      	lsls	r2, r2, #26
 8006576:	d42b      	bmi.n	80065d0 <_printf_common+0xb0>
 8006578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800657c:	4641      	mov	r1, r8
 800657e:	4638      	mov	r0, r7
 8006580:	47c8      	blx	r9
 8006582:	3001      	adds	r0, #1
 8006584:	d01e      	beq.n	80065c4 <_printf_common+0xa4>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	6922      	ldr	r2, [r4, #16]
 800658a:	f003 0306 	and.w	r3, r3, #6
 800658e:	2b04      	cmp	r3, #4
 8006590:	bf02      	ittt	eq
 8006592:	68e5      	ldreq	r5, [r4, #12]
 8006594:	6833      	ldreq	r3, [r6, #0]
 8006596:	1aed      	subeq	r5, r5, r3
 8006598:	68a3      	ldr	r3, [r4, #8]
 800659a:	bf0c      	ite	eq
 800659c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a0:	2500      	movne	r5, #0
 80065a2:	4293      	cmp	r3, r2
 80065a4:	bfc4      	itt	gt
 80065a6:	1a9b      	subgt	r3, r3, r2
 80065a8:	18ed      	addgt	r5, r5, r3
 80065aa:	2600      	movs	r6, #0
 80065ac:	341a      	adds	r4, #26
 80065ae:	42b5      	cmp	r5, r6
 80065b0:	d11a      	bne.n	80065e8 <_printf_common+0xc8>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e008      	b.n	80065c8 <_printf_common+0xa8>
 80065b6:	2301      	movs	r3, #1
 80065b8:	4652      	mov	r2, sl
 80065ba:	4641      	mov	r1, r8
 80065bc:	4638      	mov	r0, r7
 80065be:	47c8      	blx	r9
 80065c0:	3001      	adds	r0, #1
 80065c2:	d103      	bne.n	80065cc <_printf_common+0xac>
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	3501      	adds	r5, #1
 80065ce:	e7c6      	b.n	800655e <_printf_common+0x3e>
 80065d0:	18e1      	adds	r1, r4, r3
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	2030      	movs	r0, #48	@ 0x30
 80065d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065da:	4422      	add	r2, r4
 80065dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065e4:	3302      	adds	r3, #2
 80065e6:	e7c7      	b.n	8006578 <_printf_common+0x58>
 80065e8:	2301      	movs	r3, #1
 80065ea:	4622      	mov	r2, r4
 80065ec:	4641      	mov	r1, r8
 80065ee:	4638      	mov	r0, r7
 80065f0:	47c8      	blx	r9
 80065f2:	3001      	adds	r0, #1
 80065f4:	d0e6      	beq.n	80065c4 <_printf_common+0xa4>
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7d9      	b.n	80065ae <_printf_common+0x8e>
	...

080065fc <_printf_i>:
 80065fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	7e0f      	ldrb	r7, [r1, #24]
 8006602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006604:	2f78      	cmp	r7, #120	@ 0x78
 8006606:	4691      	mov	r9, r2
 8006608:	4680      	mov	r8, r0
 800660a:	460c      	mov	r4, r1
 800660c:	469a      	mov	sl, r3
 800660e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006612:	d807      	bhi.n	8006624 <_printf_i+0x28>
 8006614:	2f62      	cmp	r7, #98	@ 0x62
 8006616:	d80a      	bhi.n	800662e <_printf_i+0x32>
 8006618:	2f00      	cmp	r7, #0
 800661a:	f000 80d2 	beq.w	80067c2 <_printf_i+0x1c6>
 800661e:	2f58      	cmp	r7, #88	@ 0x58
 8006620:	f000 80b9 	beq.w	8006796 <_printf_i+0x19a>
 8006624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800662c:	e03a      	b.n	80066a4 <_printf_i+0xa8>
 800662e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006632:	2b15      	cmp	r3, #21
 8006634:	d8f6      	bhi.n	8006624 <_printf_i+0x28>
 8006636:	a101      	add	r1, pc, #4	@ (adr r1, 800663c <_printf_i+0x40>)
 8006638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800663c:	08006695 	.word	0x08006695
 8006640:	080066a9 	.word	0x080066a9
 8006644:	08006625 	.word	0x08006625
 8006648:	08006625 	.word	0x08006625
 800664c:	08006625 	.word	0x08006625
 8006650:	08006625 	.word	0x08006625
 8006654:	080066a9 	.word	0x080066a9
 8006658:	08006625 	.word	0x08006625
 800665c:	08006625 	.word	0x08006625
 8006660:	08006625 	.word	0x08006625
 8006664:	08006625 	.word	0x08006625
 8006668:	080067a9 	.word	0x080067a9
 800666c:	080066d3 	.word	0x080066d3
 8006670:	08006763 	.word	0x08006763
 8006674:	08006625 	.word	0x08006625
 8006678:	08006625 	.word	0x08006625
 800667c:	080067cb 	.word	0x080067cb
 8006680:	08006625 	.word	0x08006625
 8006684:	080066d3 	.word	0x080066d3
 8006688:	08006625 	.word	0x08006625
 800668c:	08006625 	.word	0x08006625
 8006690:	0800676b 	.word	0x0800676b
 8006694:	6833      	ldr	r3, [r6, #0]
 8006696:	1d1a      	adds	r2, r3, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6032      	str	r2, [r6, #0]
 800669c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066a4:	2301      	movs	r3, #1
 80066a6:	e09d      	b.n	80067e4 <_printf_i+0x1e8>
 80066a8:	6833      	ldr	r3, [r6, #0]
 80066aa:	6820      	ldr	r0, [r4, #0]
 80066ac:	1d19      	adds	r1, r3, #4
 80066ae:	6031      	str	r1, [r6, #0]
 80066b0:	0606      	lsls	r6, r0, #24
 80066b2:	d501      	bpl.n	80066b8 <_printf_i+0xbc>
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	e003      	b.n	80066c0 <_printf_i+0xc4>
 80066b8:	0645      	lsls	r5, r0, #25
 80066ba:	d5fb      	bpl.n	80066b4 <_printf_i+0xb8>
 80066bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	da03      	bge.n	80066cc <_printf_i+0xd0>
 80066c4:	232d      	movs	r3, #45	@ 0x2d
 80066c6:	426d      	negs	r5, r5
 80066c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066cc:	4859      	ldr	r0, [pc, #356]	@ (8006834 <_printf_i+0x238>)
 80066ce:	230a      	movs	r3, #10
 80066d0:	e011      	b.n	80066f6 <_printf_i+0xfa>
 80066d2:	6821      	ldr	r1, [r4, #0]
 80066d4:	6833      	ldr	r3, [r6, #0]
 80066d6:	0608      	lsls	r0, r1, #24
 80066d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066dc:	d402      	bmi.n	80066e4 <_printf_i+0xe8>
 80066de:	0649      	lsls	r1, r1, #25
 80066e0:	bf48      	it	mi
 80066e2:	b2ad      	uxthmi	r5, r5
 80066e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066e6:	4853      	ldr	r0, [pc, #332]	@ (8006834 <_printf_i+0x238>)
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	bf14      	ite	ne
 80066ec:	230a      	movne	r3, #10
 80066ee:	2308      	moveq	r3, #8
 80066f0:	2100      	movs	r1, #0
 80066f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066f6:	6866      	ldr	r6, [r4, #4]
 80066f8:	60a6      	str	r6, [r4, #8]
 80066fa:	2e00      	cmp	r6, #0
 80066fc:	bfa2      	ittt	ge
 80066fe:	6821      	ldrge	r1, [r4, #0]
 8006700:	f021 0104 	bicge.w	r1, r1, #4
 8006704:	6021      	strge	r1, [r4, #0]
 8006706:	b90d      	cbnz	r5, 800670c <_printf_i+0x110>
 8006708:	2e00      	cmp	r6, #0
 800670a:	d04b      	beq.n	80067a4 <_printf_i+0x1a8>
 800670c:	4616      	mov	r6, r2
 800670e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006712:	fb03 5711 	mls	r7, r3, r1, r5
 8006716:	5dc7      	ldrb	r7, [r0, r7]
 8006718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800671c:	462f      	mov	r7, r5
 800671e:	42bb      	cmp	r3, r7
 8006720:	460d      	mov	r5, r1
 8006722:	d9f4      	bls.n	800670e <_printf_i+0x112>
 8006724:	2b08      	cmp	r3, #8
 8006726:	d10b      	bne.n	8006740 <_printf_i+0x144>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	07df      	lsls	r7, r3, #31
 800672c:	d508      	bpl.n	8006740 <_printf_i+0x144>
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	6861      	ldr	r1, [r4, #4]
 8006732:	4299      	cmp	r1, r3
 8006734:	bfde      	ittt	le
 8006736:	2330      	movle	r3, #48	@ 0x30
 8006738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800673c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006740:	1b92      	subs	r2, r2, r6
 8006742:	6122      	str	r2, [r4, #16]
 8006744:	f8cd a000 	str.w	sl, [sp]
 8006748:	464b      	mov	r3, r9
 800674a:	aa03      	add	r2, sp, #12
 800674c:	4621      	mov	r1, r4
 800674e:	4640      	mov	r0, r8
 8006750:	f7ff fee6 	bl	8006520 <_printf_common>
 8006754:	3001      	adds	r0, #1
 8006756:	d14a      	bne.n	80067ee <_printf_i+0x1f2>
 8006758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800675c:	b004      	add	sp, #16
 800675e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	f043 0320 	orr.w	r3, r3, #32
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	4833      	ldr	r0, [pc, #204]	@ (8006838 <_printf_i+0x23c>)
 800676c:	2778      	movs	r7, #120	@ 0x78
 800676e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	6831      	ldr	r1, [r6, #0]
 8006776:	061f      	lsls	r7, r3, #24
 8006778:	f851 5b04 	ldr.w	r5, [r1], #4
 800677c:	d402      	bmi.n	8006784 <_printf_i+0x188>
 800677e:	065f      	lsls	r7, r3, #25
 8006780:	bf48      	it	mi
 8006782:	b2ad      	uxthmi	r5, r5
 8006784:	6031      	str	r1, [r6, #0]
 8006786:	07d9      	lsls	r1, r3, #31
 8006788:	bf44      	itt	mi
 800678a:	f043 0320 	orrmi.w	r3, r3, #32
 800678e:	6023      	strmi	r3, [r4, #0]
 8006790:	b11d      	cbz	r5, 800679a <_printf_i+0x19e>
 8006792:	2310      	movs	r3, #16
 8006794:	e7ac      	b.n	80066f0 <_printf_i+0xf4>
 8006796:	4827      	ldr	r0, [pc, #156]	@ (8006834 <_printf_i+0x238>)
 8006798:	e7e9      	b.n	800676e <_printf_i+0x172>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f023 0320 	bic.w	r3, r3, #32
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	e7f6      	b.n	8006792 <_printf_i+0x196>
 80067a4:	4616      	mov	r6, r2
 80067a6:	e7bd      	b.n	8006724 <_printf_i+0x128>
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	6825      	ldr	r5, [r4, #0]
 80067ac:	6961      	ldr	r1, [r4, #20]
 80067ae:	1d18      	adds	r0, r3, #4
 80067b0:	6030      	str	r0, [r6, #0]
 80067b2:	062e      	lsls	r6, r5, #24
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	d501      	bpl.n	80067bc <_printf_i+0x1c0>
 80067b8:	6019      	str	r1, [r3, #0]
 80067ba:	e002      	b.n	80067c2 <_printf_i+0x1c6>
 80067bc:	0668      	lsls	r0, r5, #25
 80067be:	d5fb      	bpl.n	80067b8 <_printf_i+0x1bc>
 80067c0:	8019      	strh	r1, [r3, #0]
 80067c2:	2300      	movs	r3, #0
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	4616      	mov	r6, r2
 80067c8:	e7bc      	b.n	8006744 <_printf_i+0x148>
 80067ca:	6833      	ldr	r3, [r6, #0]
 80067cc:	1d1a      	adds	r2, r3, #4
 80067ce:	6032      	str	r2, [r6, #0]
 80067d0:	681e      	ldr	r6, [r3, #0]
 80067d2:	6862      	ldr	r2, [r4, #4]
 80067d4:	2100      	movs	r1, #0
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7f9 fd22 	bl	8000220 <memchr>
 80067dc:	b108      	cbz	r0, 80067e2 <_printf_i+0x1e6>
 80067de:	1b80      	subs	r0, r0, r6
 80067e0:	6060      	str	r0, [r4, #4]
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	2300      	movs	r3, #0
 80067e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ec:	e7aa      	b.n	8006744 <_printf_i+0x148>
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	4632      	mov	r2, r6
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d0ad      	beq.n	8006758 <_printf_i+0x15c>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	079b      	lsls	r3, r3, #30
 8006800:	d413      	bmi.n	800682a <_printf_i+0x22e>
 8006802:	68e0      	ldr	r0, [r4, #12]
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	4298      	cmp	r0, r3
 8006808:	bfb8      	it	lt
 800680a:	4618      	movlt	r0, r3
 800680c:	e7a6      	b.n	800675c <_printf_i+0x160>
 800680e:	2301      	movs	r3, #1
 8006810:	4632      	mov	r2, r6
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	47d0      	blx	sl
 8006818:	3001      	adds	r0, #1
 800681a:	d09d      	beq.n	8006758 <_printf_i+0x15c>
 800681c:	3501      	adds	r5, #1
 800681e:	68e3      	ldr	r3, [r4, #12]
 8006820:	9903      	ldr	r1, [sp, #12]
 8006822:	1a5b      	subs	r3, r3, r1
 8006824:	42ab      	cmp	r3, r5
 8006826:	dcf2      	bgt.n	800680e <_printf_i+0x212>
 8006828:	e7eb      	b.n	8006802 <_printf_i+0x206>
 800682a:	2500      	movs	r5, #0
 800682c:	f104 0619 	add.w	r6, r4, #25
 8006830:	e7f5      	b.n	800681e <_printf_i+0x222>
 8006832:	bf00      	nop
 8006834:	0800a85e 	.word	0x0800a85e
 8006838:	0800a86f 	.word	0x0800a86f

0800683c <_scanf_float>:
 800683c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	b087      	sub	sp, #28
 8006842:	4617      	mov	r7, r2
 8006844:	9303      	str	r3, [sp, #12]
 8006846:	688b      	ldr	r3, [r1, #8]
 8006848:	1e5a      	subs	r2, r3, #1
 800684a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800684e:	bf81      	itttt	hi
 8006850:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006854:	eb03 0b05 	addhi.w	fp, r3, r5
 8006858:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800685c:	608b      	strhi	r3, [r1, #8]
 800685e:	680b      	ldr	r3, [r1, #0]
 8006860:	460a      	mov	r2, r1
 8006862:	f04f 0500 	mov.w	r5, #0
 8006866:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800686a:	f842 3b1c 	str.w	r3, [r2], #28
 800686e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006872:	4680      	mov	r8, r0
 8006874:	460c      	mov	r4, r1
 8006876:	bf98      	it	ls
 8006878:	f04f 0b00 	movls.w	fp, #0
 800687c:	9201      	str	r2, [sp, #4]
 800687e:	4616      	mov	r6, r2
 8006880:	46aa      	mov	sl, r5
 8006882:	46a9      	mov	r9, r5
 8006884:	9502      	str	r5, [sp, #8]
 8006886:	68a2      	ldr	r2, [r4, #8]
 8006888:	b152      	cbz	r2, 80068a0 <_scanf_float+0x64>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006890:	d864      	bhi.n	800695c <_scanf_float+0x120>
 8006892:	2b40      	cmp	r3, #64	@ 0x40
 8006894:	d83c      	bhi.n	8006910 <_scanf_float+0xd4>
 8006896:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800689a:	b2c8      	uxtb	r0, r1
 800689c:	280e      	cmp	r0, #14
 800689e:	d93a      	bls.n	8006916 <_scanf_float+0xda>
 80068a0:	f1b9 0f00 	cmp.w	r9, #0
 80068a4:	d003      	beq.n	80068ae <_scanf_float+0x72>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80068b2:	f1ba 0f01 	cmp.w	sl, #1
 80068b6:	f200 8117 	bhi.w	8006ae8 <_scanf_float+0x2ac>
 80068ba:	9b01      	ldr	r3, [sp, #4]
 80068bc:	429e      	cmp	r6, r3
 80068be:	f200 8108 	bhi.w	8006ad2 <_scanf_float+0x296>
 80068c2:	2001      	movs	r0, #1
 80068c4:	b007      	add	sp, #28
 80068c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80068ce:	2a0d      	cmp	r2, #13
 80068d0:	d8e6      	bhi.n	80068a0 <_scanf_float+0x64>
 80068d2:	a101      	add	r1, pc, #4	@ (adr r1, 80068d8 <_scanf_float+0x9c>)
 80068d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068d8:	08006a1f 	.word	0x08006a1f
 80068dc:	080068a1 	.word	0x080068a1
 80068e0:	080068a1 	.word	0x080068a1
 80068e4:	080068a1 	.word	0x080068a1
 80068e8:	08006a7f 	.word	0x08006a7f
 80068ec:	08006a57 	.word	0x08006a57
 80068f0:	080068a1 	.word	0x080068a1
 80068f4:	080068a1 	.word	0x080068a1
 80068f8:	08006a2d 	.word	0x08006a2d
 80068fc:	080068a1 	.word	0x080068a1
 8006900:	080068a1 	.word	0x080068a1
 8006904:	080068a1 	.word	0x080068a1
 8006908:	080068a1 	.word	0x080068a1
 800690c:	080069e5 	.word	0x080069e5
 8006910:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006914:	e7db      	b.n	80068ce <_scanf_float+0x92>
 8006916:	290e      	cmp	r1, #14
 8006918:	d8c2      	bhi.n	80068a0 <_scanf_float+0x64>
 800691a:	a001      	add	r0, pc, #4	@ (adr r0, 8006920 <_scanf_float+0xe4>)
 800691c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006920:	080069d5 	.word	0x080069d5
 8006924:	080068a1 	.word	0x080068a1
 8006928:	080069d5 	.word	0x080069d5
 800692c:	08006a6b 	.word	0x08006a6b
 8006930:	080068a1 	.word	0x080068a1
 8006934:	0800697d 	.word	0x0800697d
 8006938:	080069bb 	.word	0x080069bb
 800693c:	080069bb 	.word	0x080069bb
 8006940:	080069bb 	.word	0x080069bb
 8006944:	080069bb 	.word	0x080069bb
 8006948:	080069bb 	.word	0x080069bb
 800694c:	080069bb 	.word	0x080069bb
 8006950:	080069bb 	.word	0x080069bb
 8006954:	080069bb 	.word	0x080069bb
 8006958:	080069bb 	.word	0x080069bb
 800695c:	2b6e      	cmp	r3, #110	@ 0x6e
 800695e:	d809      	bhi.n	8006974 <_scanf_float+0x138>
 8006960:	2b60      	cmp	r3, #96	@ 0x60
 8006962:	d8b2      	bhi.n	80068ca <_scanf_float+0x8e>
 8006964:	2b54      	cmp	r3, #84	@ 0x54
 8006966:	d07b      	beq.n	8006a60 <_scanf_float+0x224>
 8006968:	2b59      	cmp	r3, #89	@ 0x59
 800696a:	d199      	bne.n	80068a0 <_scanf_float+0x64>
 800696c:	2d07      	cmp	r5, #7
 800696e:	d197      	bne.n	80068a0 <_scanf_float+0x64>
 8006970:	2508      	movs	r5, #8
 8006972:	e02c      	b.n	80069ce <_scanf_float+0x192>
 8006974:	2b74      	cmp	r3, #116	@ 0x74
 8006976:	d073      	beq.n	8006a60 <_scanf_float+0x224>
 8006978:	2b79      	cmp	r3, #121	@ 0x79
 800697a:	e7f6      	b.n	800696a <_scanf_float+0x12e>
 800697c:	6821      	ldr	r1, [r4, #0]
 800697e:	05c8      	lsls	r0, r1, #23
 8006980:	d51b      	bpl.n	80069ba <_scanf_float+0x17e>
 8006982:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006986:	6021      	str	r1, [r4, #0]
 8006988:	f109 0901 	add.w	r9, r9, #1
 800698c:	f1bb 0f00 	cmp.w	fp, #0
 8006990:	d003      	beq.n	800699a <_scanf_float+0x15e>
 8006992:	3201      	adds	r2, #1
 8006994:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006998:	60a2      	str	r2, [r4, #8]
 800699a:	68a3      	ldr	r3, [r4, #8]
 800699c:	3b01      	subs	r3, #1
 800699e:	60a3      	str	r3, [r4, #8]
 80069a0:	6923      	ldr	r3, [r4, #16]
 80069a2:	3301      	adds	r3, #1
 80069a4:	6123      	str	r3, [r4, #16]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	f340 8087 	ble.w	8006ac0 <_scanf_float+0x284>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	e765      	b.n	8006886 <_scanf_float+0x4a>
 80069ba:	eb1a 0105 	adds.w	r1, sl, r5
 80069be:	f47f af6f 	bne.w	80068a0 <_scanf_float+0x64>
 80069c2:	6822      	ldr	r2, [r4, #0]
 80069c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80069c8:	6022      	str	r2, [r4, #0]
 80069ca:	460d      	mov	r5, r1
 80069cc:	468a      	mov	sl, r1
 80069ce:	f806 3b01 	strb.w	r3, [r6], #1
 80069d2:	e7e2      	b.n	800699a <_scanf_float+0x15e>
 80069d4:	6822      	ldr	r2, [r4, #0]
 80069d6:	0610      	lsls	r0, r2, #24
 80069d8:	f57f af62 	bpl.w	80068a0 <_scanf_float+0x64>
 80069dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	e7f4      	b.n	80069ce <_scanf_float+0x192>
 80069e4:	f1ba 0f00 	cmp.w	sl, #0
 80069e8:	d10e      	bne.n	8006a08 <_scanf_float+0x1cc>
 80069ea:	f1b9 0f00 	cmp.w	r9, #0
 80069ee:	d10e      	bne.n	8006a0e <_scanf_float+0x1d2>
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069fa:	d108      	bne.n	8006a0e <_scanf_float+0x1d2>
 80069fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a00:	6022      	str	r2, [r4, #0]
 8006a02:	f04f 0a01 	mov.w	sl, #1
 8006a06:	e7e2      	b.n	80069ce <_scanf_float+0x192>
 8006a08:	f1ba 0f02 	cmp.w	sl, #2
 8006a0c:	d055      	beq.n	8006aba <_scanf_float+0x27e>
 8006a0e:	2d01      	cmp	r5, #1
 8006a10:	d002      	beq.n	8006a18 <_scanf_float+0x1dc>
 8006a12:	2d04      	cmp	r5, #4
 8006a14:	f47f af44 	bne.w	80068a0 <_scanf_float+0x64>
 8006a18:	3501      	adds	r5, #1
 8006a1a:	b2ed      	uxtb	r5, r5
 8006a1c:	e7d7      	b.n	80069ce <_scanf_float+0x192>
 8006a1e:	f1ba 0f01 	cmp.w	sl, #1
 8006a22:	f47f af3d 	bne.w	80068a0 <_scanf_float+0x64>
 8006a26:	f04f 0a02 	mov.w	sl, #2
 8006a2a:	e7d0      	b.n	80069ce <_scanf_float+0x192>
 8006a2c:	b97d      	cbnz	r5, 8006a4e <_scanf_float+0x212>
 8006a2e:	f1b9 0f00 	cmp.w	r9, #0
 8006a32:	f47f af38 	bne.w	80068a6 <_scanf_float+0x6a>
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a40:	f040 8108 	bne.w	8006c54 <_scanf_float+0x418>
 8006a44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	2501      	movs	r5, #1
 8006a4c:	e7bf      	b.n	80069ce <_scanf_float+0x192>
 8006a4e:	2d03      	cmp	r5, #3
 8006a50:	d0e2      	beq.n	8006a18 <_scanf_float+0x1dc>
 8006a52:	2d05      	cmp	r5, #5
 8006a54:	e7de      	b.n	8006a14 <_scanf_float+0x1d8>
 8006a56:	2d02      	cmp	r5, #2
 8006a58:	f47f af22 	bne.w	80068a0 <_scanf_float+0x64>
 8006a5c:	2503      	movs	r5, #3
 8006a5e:	e7b6      	b.n	80069ce <_scanf_float+0x192>
 8006a60:	2d06      	cmp	r5, #6
 8006a62:	f47f af1d 	bne.w	80068a0 <_scanf_float+0x64>
 8006a66:	2507      	movs	r5, #7
 8006a68:	e7b1      	b.n	80069ce <_scanf_float+0x192>
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	0591      	lsls	r1, r2, #22
 8006a6e:	f57f af17 	bpl.w	80068a0 <_scanf_float+0x64>
 8006a72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a7c:	e7a7      	b.n	80069ce <_scanf_float+0x192>
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006a84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006a88:	d006      	beq.n	8006a98 <_scanf_float+0x25c>
 8006a8a:	0550      	lsls	r0, r2, #21
 8006a8c:	f57f af08 	bpl.w	80068a0 <_scanf_float+0x64>
 8006a90:	f1b9 0f00 	cmp.w	r9, #0
 8006a94:	f000 80de 	beq.w	8006c54 <_scanf_float+0x418>
 8006a98:	0591      	lsls	r1, r2, #22
 8006a9a:	bf58      	it	pl
 8006a9c:	9902      	ldrpl	r1, [sp, #8]
 8006a9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006aa2:	bf58      	it	pl
 8006aa4:	eba9 0101 	subpl.w	r1, r9, r1
 8006aa8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006aac:	bf58      	it	pl
 8006aae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ab2:	6022      	str	r2, [r4, #0]
 8006ab4:	f04f 0900 	mov.w	r9, #0
 8006ab8:	e789      	b.n	80069ce <_scanf_float+0x192>
 8006aba:	f04f 0a03 	mov.w	sl, #3
 8006abe:	e786      	b.n	80069ce <_scanf_float+0x192>
 8006ac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4798      	blx	r3
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f43f aedb 	beq.w	8006886 <_scanf_float+0x4a>
 8006ad0:	e6e6      	b.n	80068a0 <_scanf_float+0x64>
 8006ad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ada:	463a      	mov	r2, r7
 8006adc:	4640      	mov	r0, r8
 8006ade:	4798      	blx	r3
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	e6e8      	b.n	80068ba <_scanf_float+0x7e>
 8006ae8:	1e6b      	subs	r3, r5, #1
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d824      	bhi.n	8006b38 <_scanf_float+0x2fc>
 8006aee:	2d02      	cmp	r5, #2
 8006af0:	d836      	bhi.n	8006b60 <_scanf_float+0x324>
 8006af2:	9b01      	ldr	r3, [sp, #4]
 8006af4:	429e      	cmp	r6, r3
 8006af6:	f67f aee4 	bls.w	80068c2 <_scanf_float+0x86>
 8006afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006afe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b02:	463a      	mov	r2, r7
 8006b04:	4640      	mov	r0, r8
 8006b06:	4798      	blx	r3
 8006b08:	6923      	ldr	r3, [r4, #16]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	e7f0      	b.n	8006af2 <_scanf_float+0x2b6>
 8006b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b18:	463a      	mov	r2, r7
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4798      	blx	r3
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	6123      	str	r3, [r4, #16]
 8006b24:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006b28:	fa5f fa8a 	uxtb.w	sl, sl
 8006b2c:	f1ba 0f02 	cmp.w	sl, #2
 8006b30:	d1ee      	bne.n	8006b10 <_scanf_float+0x2d4>
 8006b32:	3d03      	subs	r5, #3
 8006b34:	b2ed      	uxtb	r5, r5
 8006b36:	1b76      	subs	r6, r6, r5
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	05da      	lsls	r2, r3, #23
 8006b3c:	d530      	bpl.n	8006ba0 <_scanf_float+0x364>
 8006b3e:	055b      	lsls	r3, r3, #21
 8006b40:	d511      	bpl.n	8006b66 <_scanf_float+0x32a>
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	429e      	cmp	r6, r3
 8006b46:	f67f aebc 	bls.w	80068c2 <_scanf_float+0x86>
 8006b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b52:	463a      	mov	r2, r7
 8006b54:	4640      	mov	r0, r8
 8006b56:	4798      	blx	r3
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	e7f0      	b.n	8006b42 <_scanf_float+0x306>
 8006b60:	46aa      	mov	sl, r5
 8006b62:	46b3      	mov	fp, r6
 8006b64:	e7de      	b.n	8006b24 <_scanf_float+0x2e8>
 8006b66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	2965      	cmp	r1, #101	@ 0x65
 8006b6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006b72:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	d00c      	beq.n	8006b94 <_scanf_float+0x358>
 8006b7a:	2945      	cmp	r1, #69	@ 0x45
 8006b7c:	d00a      	beq.n	8006b94 <_scanf_float+0x358>
 8006b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b82:	463a      	mov	r2, r7
 8006b84:	4640      	mov	r0, r8
 8006b86:	4798      	blx	r3
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	1eb5      	subs	r5, r6, #2
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b98:	463a      	mov	r2, r7
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4798      	blx	r3
 8006b9e:	462e      	mov	r6, r5
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	f012 0210 	ands.w	r2, r2, #16
 8006ba6:	d001      	beq.n	8006bac <_scanf_float+0x370>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e68b      	b.n	80068c4 <_scanf_float+0x88>
 8006bac:	7032      	strb	r2, [r6, #0]
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bb8:	d11c      	bne.n	8006bf4 <_scanf_float+0x3b8>
 8006bba:	9b02      	ldr	r3, [sp, #8]
 8006bbc:	454b      	cmp	r3, r9
 8006bbe:	eba3 0209 	sub.w	r2, r3, r9
 8006bc2:	d123      	bne.n	8006c0c <_scanf_float+0x3d0>
 8006bc4:	9901      	ldr	r1, [sp, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4640      	mov	r0, r8
 8006bca:	f000 ff11 	bl	80079f0 <_strtod_r>
 8006bce:	9b03      	ldr	r3, [sp, #12]
 8006bd0:	6821      	ldr	r1, [r4, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f011 0f02 	tst.w	r1, #2
 8006bd8:	ec57 6b10 	vmov	r6, r7, d0
 8006bdc:	f103 0204 	add.w	r2, r3, #4
 8006be0:	d01f      	beq.n	8006c22 <_scanf_float+0x3e6>
 8006be2:	9903      	ldr	r1, [sp, #12]
 8006be4:	600a      	str	r2, [r1, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	e9c3 6700 	strd	r6, r7, [r3]
 8006bec:	68e3      	ldr	r3, [r4, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60e3      	str	r3, [r4, #12]
 8006bf2:	e7d9      	b.n	8006ba8 <_scanf_float+0x36c>
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0e4      	beq.n	8006bc4 <_scanf_float+0x388>
 8006bfa:	9905      	ldr	r1, [sp, #20]
 8006bfc:	230a      	movs	r3, #10
 8006bfe:	3101      	adds	r1, #1
 8006c00:	4640      	mov	r0, r8
 8006c02:	f000 ff75 	bl	8007af0 <_strtol_r>
 8006c06:	9b04      	ldr	r3, [sp, #16]
 8006c08:	9e05      	ldr	r6, [sp, #20]
 8006c0a:	1ac2      	subs	r2, r0, r3
 8006c0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c10:	429e      	cmp	r6, r3
 8006c12:	bf28      	it	cs
 8006c14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c18:	4910      	ldr	r1, [pc, #64]	@ (8006c5c <_scanf_float+0x420>)
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f000 f822 	bl	8006c64 <siprintf>
 8006c20:	e7d0      	b.n	8006bc4 <_scanf_float+0x388>
 8006c22:	f011 0f04 	tst.w	r1, #4
 8006c26:	9903      	ldr	r1, [sp, #12]
 8006c28:	600a      	str	r2, [r1, #0]
 8006c2a:	d1dc      	bne.n	8006be6 <_scanf_float+0x3aa>
 8006c2c:	681d      	ldr	r5, [r3, #0]
 8006c2e:	4632      	mov	r2, r6
 8006c30:	463b      	mov	r3, r7
 8006c32:	4630      	mov	r0, r6
 8006c34:	4639      	mov	r1, r7
 8006c36:	f7f9 ffa1 	bl	8000b7c <__aeabi_dcmpun>
 8006c3a:	b128      	cbz	r0, 8006c48 <_scanf_float+0x40c>
 8006c3c:	4808      	ldr	r0, [pc, #32]	@ (8006c60 <_scanf_float+0x424>)
 8006c3e:	f000 ffdb 	bl	8007bf8 <nanf>
 8006c42:	ed85 0a00 	vstr	s0, [r5]
 8006c46:	e7d1      	b.n	8006bec <_scanf_float+0x3b0>
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 fff4 	bl	8000c38 <__aeabi_d2f>
 8006c50:	6028      	str	r0, [r5, #0]
 8006c52:	e7cb      	b.n	8006bec <_scanf_float+0x3b0>
 8006c54:	f04f 0900 	mov.w	r9, #0
 8006c58:	e629      	b.n	80068ae <_scanf_float+0x72>
 8006c5a:	bf00      	nop
 8006c5c:	0800a880 	.word	0x0800a880
 8006c60:	0800ac73 	.word	0x0800ac73

08006c64 <siprintf>:
 8006c64:	b40e      	push	{r1, r2, r3}
 8006c66:	b500      	push	{lr}
 8006c68:	b09c      	sub	sp, #112	@ 0x70
 8006c6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c6c:	9002      	str	r0, [sp, #8]
 8006c6e:	9006      	str	r0, [sp, #24]
 8006c70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c74:	4809      	ldr	r0, [pc, #36]	@ (8006c9c <siprintf+0x38>)
 8006c76:	9107      	str	r1, [sp, #28]
 8006c78:	9104      	str	r1, [sp, #16]
 8006c7a:	4909      	ldr	r1, [pc, #36]	@ (8006ca0 <siprintf+0x3c>)
 8006c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c80:	9105      	str	r1, [sp, #20]
 8006c82:	6800      	ldr	r0, [r0, #0]
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	a902      	add	r1, sp, #8
 8006c88:	f002 f99e 	bl	8008fc8 <_svfiprintf_r>
 8006c8c:	9b02      	ldr	r3, [sp, #8]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	b01c      	add	sp, #112	@ 0x70
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	b003      	add	sp, #12
 8006c9a:	4770      	bx	lr
 8006c9c:	20000184 	.word	0x20000184
 8006ca0:	ffff0208 	.word	0xffff0208

08006ca4 <std>:
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	b510      	push	{r4, lr}
 8006ca8:	4604      	mov	r4, r0
 8006caa:	e9c0 3300 	strd	r3, r3, [r0]
 8006cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cb2:	6083      	str	r3, [r0, #8]
 8006cb4:	8181      	strh	r1, [r0, #12]
 8006cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cb8:	81c2      	strh	r2, [r0, #14]
 8006cba:	6183      	str	r3, [r0, #24]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	305c      	adds	r0, #92	@ 0x5c
 8006cc2:	f000 ff47 	bl	8007b54 <memset>
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <std+0x58>)
 8006cc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <std+0x5c>)
 8006ccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cce:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <std+0x60>)
 8006cd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <std+0x64>)
 8006cd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <std+0x68>)
 8006cd8:	6224      	str	r4, [r4, #32]
 8006cda:	429c      	cmp	r4, r3
 8006cdc:	d006      	beq.n	8006cec <std+0x48>
 8006cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ce2:	4294      	cmp	r4, r2
 8006ce4:	d002      	beq.n	8006cec <std+0x48>
 8006ce6:	33d0      	adds	r3, #208	@ 0xd0
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	d105      	bne.n	8006cf8 <std+0x54>
 8006cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf4:	f000 bf64 	b.w	8007bc0 <__retarget_lock_init_recursive>
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	bf00      	nop
 8006cfc:	08009e0d 	.word	0x08009e0d
 8006d00:	08009e2f 	.word	0x08009e2f
 8006d04:	08009e67 	.word	0x08009e67
 8006d08:	08009e8b 	.word	0x08009e8b
 8006d0c:	20000294 	.word	0x20000294

08006d10 <stdio_exit_handler>:
 8006d10:	4a02      	ldr	r2, [pc, #8]	@ (8006d1c <stdio_exit_handler+0xc>)
 8006d12:	4903      	ldr	r1, [pc, #12]	@ (8006d20 <stdio_exit_handler+0x10>)
 8006d14:	4803      	ldr	r0, [pc, #12]	@ (8006d24 <stdio_exit_handler+0x14>)
 8006d16:	f000 beed 	b.w	8007af4 <_fwalk_sglue>
 8006d1a:	bf00      	nop
 8006d1c:	2000000c 	.word	0x2000000c
 8006d20:	08009441 	.word	0x08009441
 8006d24:	20000188 	.word	0x20000188

08006d28 <cleanup_stdio>:
 8006d28:	6841      	ldr	r1, [r0, #4]
 8006d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d5c <cleanup_stdio+0x34>)
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	4604      	mov	r4, r0
 8006d32:	d001      	beq.n	8006d38 <cleanup_stdio+0x10>
 8006d34:	f002 fb84 	bl	8009440 <_fflush_r>
 8006d38:	68a1      	ldr	r1, [r4, #8]
 8006d3a:	4b09      	ldr	r3, [pc, #36]	@ (8006d60 <cleanup_stdio+0x38>)
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	d002      	beq.n	8006d46 <cleanup_stdio+0x1e>
 8006d40:	4620      	mov	r0, r4
 8006d42:	f002 fb7d 	bl	8009440 <_fflush_r>
 8006d46:	68e1      	ldr	r1, [r4, #12]
 8006d48:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <cleanup_stdio+0x3c>)
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	d004      	beq.n	8006d58 <cleanup_stdio+0x30>
 8006d4e:	4620      	mov	r0, r4
 8006d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d54:	f002 bb74 	b.w	8009440 <_fflush_r>
 8006d58:	bd10      	pop	{r4, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000294 	.word	0x20000294
 8006d60:	200002fc 	.word	0x200002fc
 8006d64:	20000364 	.word	0x20000364

08006d68 <global_stdio_init.part.0>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <global_stdio_init.part.0+0x30>)
 8006d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8006d9c <global_stdio_init.part.0+0x34>)
 8006d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8006da0 <global_stdio_init.part.0+0x38>)
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	4620      	mov	r0, r4
 8006d74:	2200      	movs	r2, #0
 8006d76:	2104      	movs	r1, #4
 8006d78:	f7ff ff94 	bl	8006ca4 <std>
 8006d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d80:	2201      	movs	r2, #1
 8006d82:	2109      	movs	r1, #9
 8006d84:	f7ff ff8e 	bl	8006ca4 <std>
 8006d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d92:	2112      	movs	r1, #18
 8006d94:	f7ff bf86 	b.w	8006ca4 <std>
 8006d98:	200003cc 	.word	0x200003cc
 8006d9c:	20000294 	.word	0x20000294
 8006da0:	08006d11 	.word	0x08006d11

08006da4 <__sfp_lock_acquire>:
 8006da4:	4801      	ldr	r0, [pc, #4]	@ (8006dac <__sfp_lock_acquire+0x8>)
 8006da6:	f000 bf0c 	b.w	8007bc2 <__retarget_lock_acquire_recursive>
 8006daa:	bf00      	nop
 8006dac:	200003d1 	.word	0x200003d1

08006db0 <__sfp_lock_release>:
 8006db0:	4801      	ldr	r0, [pc, #4]	@ (8006db8 <__sfp_lock_release+0x8>)
 8006db2:	f000 bf07 	b.w	8007bc4 <__retarget_lock_release_recursive>
 8006db6:	bf00      	nop
 8006db8:	200003d1 	.word	0x200003d1

08006dbc <__sinit>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	f7ff fff0 	bl	8006da4 <__sfp_lock_acquire>
 8006dc4:	6a23      	ldr	r3, [r4, #32]
 8006dc6:	b11b      	cbz	r3, 8006dd0 <__sinit+0x14>
 8006dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dcc:	f7ff bff0 	b.w	8006db0 <__sfp_lock_release>
 8006dd0:	4b04      	ldr	r3, [pc, #16]	@ (8006de4 <__sinit+0x28>)
 8006dd2:	6223      	str	r3, [r4, #32]
 8006dd4:	4b04      	ldr	r3, [pc, #16]	@ (8006de8 <__sinit+0x2c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f5      	bne.n	8006dc8 <__sinit+0xc>
 8006ddc:	f7ff ffc4 	bl	8006d68 <global_stdio_init.part.0>
 8006de0:	e7f2      	b.n	8006dc8 <__sinit+0xc>
 8006de2:	bf00      	nop
 8006de4:	08006d29 	.word	0x08006d29
 8006de8:	200003cc 	.word	0x200003cc

08006dec <sulp>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4604      	mov	r4, r0
 8006df0:	460d      	mov	r5, r1
 8006df2:	ec45 4b10 	vmov	d0, r4, r5
 8006df6:	4616      	mov	r6, r2
 8006df8:	f002 feca 	bl	8009b90 <__ulp>
 8006dfc:	ec51 0b10 	vmov	r0, r1, d0
 8006e00:	b17e      	cbz	r6, 8006e22 <sulp+0x36>
 8006e02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dd09      	ble.n	8006e22 <sulp+0x36>
 8006e0e:	051b      	lsls	r3, r3, #20
 8006e10:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006e14:	2400      	movs	r4, #0
 8006e16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	f7f9 fc13 	bl	8000648 <__aeabi_dmul>
 8006e22:	ec41 0b10 	vmov	d0, r0, r1
 8006e26:	bd70      	pop	{r4, r5, r6, pc}

08006e28 <_strtod_l>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	b09f      	sub	sp, #124	@ 0x7c
 8006e2e:	460c      	mov	r4, r1
 8006e30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006e32:	2200      	movs	r2, #0
 8006e34:	921a      	str	r2, [sp, #104]	@ 0x68
 8006e36:	9005      	str	r0, [sp, #20]
 8006e38:	f04f 0a00 	mov.w	sl, #0
 8006e3c:	f04f 0b00 	mov.w	fp, #0
 8006e40:	460a      	mov	r2, r1
 8006e42:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e44:	7811      	ldrb	r1, [r2, #0]
 8006e46:	292b      	cmp	r1, #43	@ 0x2b
 8006e48:	d04a      	beq.n	8006ee0 <_strtod_l+0xb8>
 8006e4a:	d838      	bhi.n	8006ebe <_strtod_l+0x96>
 8006e4c:	290d      	cmp	r1, #13
 8006e4e:	d832      	bhi.n	8006eb6 <_strtod_l+0x8e>
 8006e50:	2908      	cmp	r1, #8
 8006e52:	d832      	bhi.n	8006eba <_strtod_l+0x92>
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d03b      	beq.n	8006ed0 <_strtod_l+0xa8>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006e5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006e5e:	782a      	ldrb	r2, [r5, #0]
 8006e60:	2a30      	cmp	r2, #48	@ 0x30
 8006e62:	f040 80b3 	bne.w	8006fcc <_strtod_l+0x1a4>
 8006e66:	786a      	ldrb	r2, [r5, #1]
 8006e68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e6c:	2a58      	cmp	r2, #88	@ 0x58
 8006e6e:	d16e      	bne.n	8006f4e <_strtod_l+0x126>
 8006e70:	9302      	str	r3, [sp, #8]
 8006e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	ab1a      	add	r3, sp, #104	@ 0x68
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	4a8e      	ldr	r2, [pc, #568]	@ (80070b4 <_strtod_l+0x28c>)
 8006e7c:	9805      	ldr	r0, [sp, #20]
 8006e7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006e80:	a919      	add	r1, sp, #100	@ 0x64
 8006e82:	f001 fd75 	bl	8008970 <__gethex>
 8006e86:	f010 060f 	ands.w	r6, r0, #15
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	d005      	beq.n	8006e9a <_strtod_l+0x72>
 8006e8e:	2e06      	cmp	r6, #6
 8006e90:	d128      	bne.n	8006ee4 <_strtod_l+0xbc>
 8006e92:	3501      	adds	r5, #1
 8006e94:	2300      	movs	r3, #0
 8006e96:	9519      	str	r5, [sp, #100]	@ 0x64
 8006e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 858e 	bne.w	80079be <_strtod_l+0xb96>
 8006ea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ea4:	b1cb      	cbz	r3, 8006eda <_strtod_l+0xb2>
 8006ea6:	4652      	mov	r2, sl
 8006ea8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006eac:	ec43 2b10 	vmov	d0, r2, r3
 8006eb0:	b01f      	add	sp, #124	@ 0x7c
 8006eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb6:	2920      	cmp	r1, #32
 8006eb8:	d1ce      	bne.n	8006e58 <_strtod_l+0x30>
 8006eba:	3201      	adds	r2, #1
 8006ebc:	e7c1      	b.n	8006e42 <_strtod_l+0x1a>
 8006ebe:	292d      	cmp	r1, #45	@ 0x2d
 8006ec0:	d1ca      	bne.n	8006e58 <_strtod_l+0x30>
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ec6:	1c51      	adds	r1, r2, #1
 8006ec8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006eca:	7852      	ldrb	r2, [r2, #1]
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d1c5      	bne.n	8006e5c <_strtod_l+0x34>
 8006ed0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ed2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f040 8570 	bne.w	80079ba <_strtod_l+0xb92>
 8006eda:	4652      	mov	r2, sl
 8006edc:	465b      	mov	r3, fp
 8006ede:	e7e5      	b.n	8006eac <_strtod_l+0x84>
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	e7ef      	b.n	8006ec4 <_strtod_l+0x9c>
 8006ee4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ee6:	b13a      	cbz	r2, 8006ef8 <_strtod_l+0xd0>
 8006ee8:	2135      	movs	r1, #53	@ 0x35
 8006eea:	a81c      	add	r0, sp, #112	@ 0x70
 8006eec:	f002 ff4a 	bl	8009d84 <__copybits>
 8006ef0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ef2:	9805      	ldr	r0, [sp, #20]
 8006ef4:	f002 fb18 	bl	8009528 <_Bfree>
 8006ef8:	3e01      	subs	r6, #1
 8006efa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006efc:	2e04      	cmp	r6, #4
 8006efe:	d806      	bhi.n	8006f0e <_strtod_l+0xe6>
 8006f00:	e8df f006 	tbb	[pc, r6]
 8006f04:	201d0314 	.word	0x201d0314
 8006f08:	14          	.byte	0x14
 8006f09:	00          	.byte	0x00
 8006f0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006f0e:	05e1      	lsls	r1, r4, #23
 8006f10:	bf48      	it	mi
 8006f12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006f16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f1a:	0d1b      	lsrs	r3, r3, #20
 8006f1c:	051b      	lsls	r3, r3, #20
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1bb      	bne.n	8006e9a <_strtod_l+0x72>
 8006f22:	f000 fe23 	bl	8007b6c <__errno>
 8006f26:	2322      	movs	r3, #34	@ 0x22
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	e7b6      	b.n	8006e9a <_strtod_l+0x72>
 8006f2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006f30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006f34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f3c:	e7e7      	b.n	8006f0e <_strtod_l+0xe6>
 8006f3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80070bc <_strtod_l+0x294>
 8006f42:	e7e4      	b.n	8006f0e <_strtod_l+0xe6>
 8006f44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006f48:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006f4c:	e7df      	b.n	8006f0e <_strtod_l+0xe6>
 8006f4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	2b30      	cmp	r3, #48	@ 0x30
 8006f58:	d0f9      	beq.n	8006f4e <_strtod_l+0x126>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d09d      	beq.n	8006e9a <_strtod_l+0x72>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f64:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f66:	2300      	movs	r3, #0
 8006f68:	9308      	str	r3, [sp, #32]
 8006f6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f6c:	461f      	mov	r7, r3
 8006f6e:	220a      	movs	r2, #10
 8006f70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006f72:	7805      	ldrb	r5, [r0, #0]
 8006f74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006f78:	b2d9      	uxtb	r1, r3
 8006f7a:	2909      	cmp	r1, #9
 8006f7c:	d928      	bls.n	8006fd0 <_strtod_l+0x1a8>
 8006f7e:	494e      	ldr	r1, [pc, #312]	@ (80070b8 <_strtod_l+0x290>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	f000 fdd5 	bl	8007b30 <strncmp>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d032      	beq.n	8006ff0 <_strtod_l+0x1c8>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	462a      	mov	r2, r5
 8006f8e:	4681      	mov	r9, r0
 8006f90:	463d      	mov	r5, r7
 8006f92:	4603      	mov	r3, r0
 8006f94:	2a65      	cmp	r2, #101	@ 0x65
 8006f96:	d001      	beq.n	8006f9c <_strtod_l+0x174>
 8006f98:	2a45      	cmp	r2, #69	@ 0x45
 8006f9a:	d114      	bne.n	8006fc6 <_strtod_l+0x19e>
 8006f9c:	b91d      	cbnz	r5, 8006fa6 <_strtod_l+0x17e>
 8006f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa0:	4302      	orrs	r2, r0
 8006fa2:	d095      	beq.n	8006ed0 <_strtod_l+0xa8>
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006fa8:	1c62      	adds	r2, r4, #1
 8006faa:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fac:	7862      	ldrb	r2, [r4, #1]
 8006fae:	2a2b      	cmp	r2, #43	@ 0x2b
 8006fb0:	d077      	beq.n	80070a2 <_strtod_l+0x27a>
 8006fb2:	2a2d      	cmp	r2, #45	@ 0x2d
 8006fb4:	d07b      	beq.n	80070ae <_strtod_l+0x286>
 8006fb6:	f04f 0c00 	mov.w	ip, #0
 8006fba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006fbe:	2909      	cmp	r1, #9
 8006fc0:	f240 8082 	bls.w	80070c8 <_strtod_l+0x2a0>
 8006fc4:	9419      	str	r4, [sp, #100]	@ 0x64
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	e0a2      	b.n	8007112 <_strtod_l+0x2ea>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e7c7      	b.n	8006f60 <_strtod_l+0x138>
 8006fd0:	2f08      	cmp	r7, #8
 8006fd2:	bfd5      	itete	le
 8006fd4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006fd6:	9908      	ldrgt	r1, [sp, #32]
 8006fd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fdc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006fe0:	f100 0001 	add.w	r0, r0, #1
 8006fe4:	bfd4      	ite	le
 8006fe6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006fe8:	9308      	strgt	r3, [sp, #32]
 8006fea:	3701      	adds	r7, #1
 8006fec:	9019      	str	r0, [sp, #100]	@ 0x64
 8006fee:	e7bf      	b.n	8006f70 <_strtod_l+0x148>
 8006ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ff6:	785a      	ldrb	r2, [r3, #1]
 8006ff8:	b37f      	cbz	r7, 800705a <_strtod_l+0x232>
 8006ffa:	4681      	mov	r9, r0
 8006ffc:	463d      	mov	r5, r7
 8006ffe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007002:	2b09      	cmp	r3, #9
 8007004:	d912      	bls.n	800702c <_strtod_l+0x204>
 8007006:	2301      	movs	r3, #1
 8007008:	e7c4      	b.n	8006f94 <_strtod_l+0x16c>
 800700a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007010:	785a      	ldrb	r2, [r3, #1]
 8007012:	3001      	adds	r0, #1
 8007014:	2a30      	cmp	r2, #48	@ 0x30
 8007016:	d0f8      	beq.n	800700a <_strtod_l+0x1e2>
 8007018:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800701c:	2b08      	cmp	r3, #8
 800701e:	f200 84d3 	bhi.w	80079c8 <_strtod_l+0xba0>
 8007022:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007024:	930c      	str	r3, [sp, #48]	@ 0x30
 8007026:	4681      	mov	r9, r0
 8007028:	2000      	movs	r0, #0
 800702a:	4605      	mov	r5, r0
 800702c:	3a30      	subs	r2, #48	@ 0x30
 800702e:	f100 0301 	add.w	r3, r0, #1
 8007032:	d02a      	beq.n	800708a <_strtod_l+0x262>
 8007034:	4499      	add	r9, r3
 8007036:	eb00 0c05 	add.w	ip, r0, r5
 800703a:	462b      	mov	r3, r5
 800703c:	210a      	movs	r1, #10
 800703e:	4563      	cmp	r3, ip
 8007040:	d10d      	bne.n	800705e <_strtod_l+0x236>
 8007042:	1c69      	adds	r1, r5, #1
 8007044:	4401      	add	r1, r0
 8007046:	4428      	add	r0, r5
 8007048:	2808      	cmp	r0, #8
 800704a:	dc16      	bgt.n	800707a <_strtod_l+0x252>
 800704c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800704e:	230a      	movs	r3, #10
 8007050:	fb03 2300 	mla	r3, r3, r0, r2
 8007054:	930a      	str	r3, [sp, #40]	@ 0x28
 8007056:	2300      	movs	r3, #0
 8007058:	e018      	b.n	800708c <_strtod_l+0x264>
 800705a:	4638      	mov	r0, r7
 800705c:	e7da      	b.n	8007014 <_strtod_l+0x1ec>
 800705e:	2b08      	cmp	r3, #8
 8007060:	f103 0301 	add.w	r3, r3, #1
 8007064:	dc03      	bgt.n	800706e <_strtod_l+0x246>
 8007066:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007068:	434e      	muls	r6, r1
 800706a:	960a      	str	r6, [sp, #40]	@ 0x28
 800706c:	e7e7      	b.n	800703e <_strtod_l+0x216>
 800706e:	2b10      	cmp	r3, #16
 8007070:	bfde      	ittt	le
 8007072:	9e08      	ldrle	r6, [sp, #32]
 8007074:	434e      	mulle	r6, r1
 8007076:	9608      	strle	r6, [sp, #32]
 8007078:	e7e1      	b.n	800703e <_strtod_l+0x216>
 800707a:	280f      	cmp	r0, #15
 800707c:	dceb      	bgt.n	8007056 <_strtod_l+0x22e>
 800707e:	9808      	ldr	r0, [sp, #32]
 8007080:	230a      	movs	r3, #10
 8007082:	fb03 2300 	mla	r3, r3, r0, r2
 8007086:	9308      	str	r3, [sp, #32]
 8007088:	e7e5      	b.n	8007056 <_strtod_l+0x22e>
 800708a:	4629      	mov	r1, r5
 800708c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800708e:	1c50      	adds	r0, r2, #1
 8007090:	9019      	str	r0, [sp, #100]	@ 0x64
 8007092:	7852      	ldrb	r2, [r2, #1]
 8007094:	4618      	mov	r0, r3
 8007096:	460d      	mov	r5, r1
 8007098:	e7b1      	b.n	8006ffe <_strtod_l+0x1d6>
 800709a:	f04f 0900 	mov.w	r9, #0
 800709e:	2301      	movs	r3, #1
 80070a0:	e77d      	b.n	8006f9e <_strtod_l+0x176>
 80070a2:	f04f 0c00 	mov.w	ip, #0
 80070a6:	1ca2      	adds	r2, r4, #2
 80070a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80070aa:	78a2      	ldrb	r2, [r4, #2]
 80070ac:	e785      	b.n	8006fba <_strtod_l+0x192>
 80070ae:	f04f 0c01 	mov.w	ip, #1
 80070b2:	e7f8      	b.n	80070a6 <_strtod_l+0x27e>
 80070b4:	0800a89c 	.word	0x0800a89c
 80070b8:	0800a885 	.word	0x0800a885
 80070bc:	7ff00000 	.word	0x7ff00000
 80070c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070c2:	1c51      	adds	r1, r2, #1
 80070c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80070c6:	7852      	ldrb	r2, [r2, #1]
 80070c8:	2a30      	cmp	r2, #48	@ 0x30
 80070ca:	d0f9      	beq.n	80070c0 <_strtod_l+0x298>
 80070cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80070d0:	2908      	cmp	r1, #8
 80070d2:	f63f af78 	bhi.w	8006fc6 <_strtod_l+0x19e>
 80070d6:	3a30      	subs	r2, #48	@ 0x30
 80070d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80070da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80070de:	f04f 080a 	mov.w	r8, #10
 80070e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070e4:	1c56      	adds	r6, r2, #1
 80070e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80070e8:	7852      	ldrb	r2, [r2, #1]
 80070ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80070ee:	f1be 0f09 	cmp.w	lr, #9
 80070f2:	d939      	bls.n	8007168 <_strtod_l+0x340>
 80070f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80070f6:	1a76      	subs	r6, r6, r1
 80070f8:	2e08      	cmp	r6, #8
 80070fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80070fe:	dc03      	bgt.n	8007108 <_strtod_l+0x2e0>
 8007100:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007102:	4588      	cmp	r8, r1
 8007104:	bfa8      	it	ge
 8007106:	4688      	movge	r8, r1
 8007108:	f1bc 0f00 	cmp.w	ip, #0
 800710c:	d001      	beq.n	8007112 <_strtod_l+0x2ea>
 800710e:	f1c8 0800 	rsb	r8, r8, #0
 8007112:	2d00      	cmp	r5, #0
 8007114:	d14e      	bne.n	80071b4 <_strtod_l+0x38c>
 8007116:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007118:	4308      	orrs	r0, r1
 800711a:	f47f aebe 	bne.w	8006e9a <_strtod_l+0x72>
 800711e:	2b00      	cmp	r3, #0
 8007120:	f47f aed6 	bne.w	8006ed0 <_strtod_l+0xa8>
 8007124:	2a69      	cmp	r2, #105	@ 0x69
 8007126:	d028      	beq.n	800717a <_strtod_l+0x352>
 8007128:	dc25      	bgt.n	8007176 <_strtod_l+0x34e>
 800712a:	2a49      	cmp	r2, #73	@ 0x49
 800712c:	d025      	beq.n	800717a <_strtod_l+0x352>
 800712e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007130:	f47f aece 	bne.w	8006ed0 <_strtod_l+0xa8>
 8007134:	499b      	ldr	r1, [pc, #620]	@ (80073a4 <_strtod_l+0x57c>)
 8007136:	a819      	add	r0, sp, #100	@ 0x64
 8007138:	f001 fe3c 	bl	8008db4 <__match>
 800713c:	2800      	cmp	r0, #0
 800713e:	f43f aec7 	beq.w	8006ed0 <_strtod_l+0xa8>
 8007142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b28      	cmp	r3, #40	@ 0x28
 8007148:	d12e      	bne.n	80071a8 <_strtod_l+0x380>
 800714a:	4997      	ldr	r1, [pc, #604]	@ (80073a8 <_strtod_l+0x580>)
 800714c:	aa1c      	add	r2, sp, #112	@ 0x70
 800714e:	a819      	add	r0, sp, #100	@ 0x64
 8007150:	f001 fe44 	bl	8008ddc <__hexnan>
 8007154:	2805      	cmp	r0, #5
 8007156:	d127      	bne.n	80071a8 <_strtod_l+0x380>
 8007158:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800715a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800715e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007162:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007166:	e698      	b.n	8006e9a <_strtod_l+0x72>
 8007168:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800716a:	fb08 2101 	mla	r1, r8, r1, r2
 800716e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007172:	920e      	str	r2, [sp, #56]	@ 0x38
 8007174:	e7b5      	b.n	80070e2 <_strtod_l+0x2ba>
 8007176:	2a6e      	cmp	r2, #110	@ 0x6e
 8007178:	e7da      	b.n	8007130 <_strtod_l+0x308>
 800717a:	498c      	ldr	r1, [pc, #560]	@ (80073ac <_strtod_l+0x584>)
 800717c:	a819      	add	r0, sp, #100	@ 0x64
 800717e:	f001 fe19 	bl	8008db4 <__match>
 8007182:	2800      	cmp	r0, #0
 8007184:	f43f aea4 	beq.w	8006ed0 <_strtod_l+0xa8>
 8007188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800718a:	4989      	ldr	r1, [pc, #548]	@ (80073b0 <_strtod_l+0x588>)
 800718c:	3b01      	subs	r3, #1
 800718e:	a819      	add	r0, sp, #100	@ 0x64
 8007190:	9319      	str	r3, [sp, #100]	@ 0x64
 8007192:	f001 fe0f 	bl	8008db4 <__match>
 8007196:	b910      	cbnz	r0, 800719e <_strtod_l+0x376>
 8007198:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800719a:	3301      	adds	r3, #1
 800719c:	9319      	str	r3, [sp, #100]	@ 0x64
 800719e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80073c0 <_strtod_l+0x598>
 80071a2:	f04f 0a00 	mov.w	sl, #0
 80071a6:	e678      	b.n	8006e9a <_strtod_l+0x72>
 80071a8:	4882      	ldr	r0, [pc, #520]	@ (80073b4 <_strtod_l+0x58c>)
 80071aa:	f000 fd1d 	bl	8007be8 <nan>
 80071ae:	ec5b ab10 	vmov	sl, fp, d0
 80071b2:	e672      	b.n	8006e9a <_strtod_l+0x72>
 80071b4:	eba8 0309 	sub.w	r3, r8, r9
 80071b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80071bc:	2f00      	cmp	r7, #0
 80071be:	bf08      	it	eq
 80071c0:	462f      	moveq	r7, r5
 80071c2:	2d10      	cmp	r5, #16
 80071c4:	462c      	mov	r4, r5
 80071c6:	bfa8      	it	ge
 80071c8:	2410      	movge	r4, #16
 80071ca:	f7f9 f9c3 	bl	8000554 <__aeabi_ui2d>
 80071ce:	2d09      	cmp	r5, #9
 80071d0:	4682      	mov	sl, r0
 80071d2:	468b      	mov	fp, r1
 80071d4:	dc13      	bgt.n	80071fe <_strtod_l+0x3d6>
 80071d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f43f ae5e 	beq.w	8006e9a <_strtod_l+0x72>
 80071de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e0:	dd78      	ble.n	80072d4 <_strtod_l+0x4ac>
 80071e2:	2b16      	cmp	r3, #22
 80071e4:	dc5f      	bgt.n	80072a6 <_strtod_l+0x47e>
 80071e6:	4974      	ldr	r1, [pc, #464]	@ (80073b8 <_strtod_l+0x590>)
 80071e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f0:	4652      	mov	r2, sl
 80071f2:	465b      	mov	r3, fp
 80071f4:	f7f9 fa28 	bl	8000648 <__aeabi_dmul>
 80071f8:	4682      	mov	sl, r0
 80071fa:	468b      	mov	fp, r1
 80071fc:	e64d      	b.n	8006e9a <_strtod_l+0x72>
 80071fe:	4b6e      	ldr	r3, [pc, #440]	@ (80073b8 <_strtod_l+0x590>)
 8007200:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007204:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007208:	f7f9 fa1e 	bl	8000648 <__aeabi_dmul>
 800720c:	4682      	mov	sl, r0
 800720e:	9808      	ldr	r0, [sp, #32]
 8007210:	468b      	mov	fp, r1
 8007212:	f7f9 f99f 	bl	8000554 <__aeabi_ui2d>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4650      	mov	r0, sl
 800721c:	4659      	mov	r1, fp
 800721e:	f7f9 f85d 	bl	80002dc <__adddf3>
 8007222:	2d0f      	cmp	r5, #15
 8007224:	4682      	mov	sl, r0
 8007226:	468b      	mov	fp, r1
 8007228:	ddd5      	ble.n	80071d6 <_strtod_l+0x3ae>
 800722a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722c:	1b2c      	subs	r4, r5, r4
 800722e:	441c      	add	r4, r3
 8007230:	2c00      	cmp	r4, #0
 8007232:	f340 8096 	ble.w	8007362 <_strtod_l+0x53a>
 8007236:	f014 030f 	ands.w	r3, r4, #15
 800723a:	d00a      	beq.n	8007252 <_strtod_l+0x42a>
 800723c:	495e      	ldr	r1, [pc, #376]	@ (80073b8 <_strtod_l+0x590>)
 800723e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007242:	4652      	mov	r2, sl
 8007244:	465b      	mov	r3, fp
 8007246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800724a:	f7f9 f9fd 	bl	8000648 <__aeabi_dmul>
 800724e:	4682      	mov	sl, r0
 8007250:	468b      	mov	fp, r1
 8007252:	f034 040f 	bics.w	r4, r4, #15
 8007256:	d073      	beq.n	8007340 <_strtod_l+0x518>
 8007258:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800725c:	dd48      	ble.n	80072f0 <_strtod_l+0x4c8>
 800725e:	2400      	movs	r4, #0
 8007260:	46a0      	mov	r8, r4
 8007262:	940a      	str	r4, [sp, #40]	@ 0x28
 8007264:	46a1      	mov	r9, r4
 8007266:	9a05      	ldr	r2, [sp, #20]
 8007268:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80073c0 <_strtod_l+0x598>
 800726c:	2322      	movs	r3, #34	@ 0x22
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	f04f 0a00 	mov.w	sl, #0
 8007274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007276:	2b00      	cmp	r3, #0
 8007278:	f43f ae0f 	beq.w	8006e9a <_strtod_l+0x72>
 800727c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800727e:	9805      	ldr	r0, [sp, #20]
 8007280:	f002 f952 	bl	8009528 <_Bfree>
 8007284:	9805      	ldr	r0, [sp, #20]
 8007286:	4649      	mov	r1, r9
 8007288:	f002 f94e 	bl	8009528 <_Bfree>
 800728c:	9805      	ldr	r0, [sp, #20]
 800728e:	4641      	mov	r1, r8
 8007290:	f002 f94a 	bl	8009528 <_Bfree>
 8007294:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007296:	9805      	ldr	r0, [sp, #20]
 8007298:	f002 f946 	bl	8009528 <_Bfree>
 800729c:	9805      	ldr	r0, [sp, #20]
 800729e:	4621      	mov	r1, r4
 80072a0:	f002 f942 	bl	8009528 <_Bfree>
 80072a4:	e5f9      	b.n	8006e9a <_strtod_l+0x72>
 80072a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80072ac:	4293      	cmp	r3, r2
 80072ae:	dbbc      	blt.n	800722a <_strtod_l+0x402>
 80072b0:	4c41      	ldr	r4, [pc, #260]	@ (80073b8 <_strtod_l+0x590>)
 80072b2:	f1c5 050f 	rsb	r5, r5, #15
 80072b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80072ba:	4652      	mov	r2, sl
 80072bc:	465b      	mov	r3, fp
 80072be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072c2:	f7f9 f9c1 	bl	8000648 <__aeabi_dmul>
 80072c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c8:	1b5d      	subs	r5, r3, r5
 80072ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072d2:	e78f      	b.n	80071f4 <_strtod_l+0x3cc>
 80072d4:	3316      	adds	r3, #22
 80072d6:	dba8      	blt.n	800722a <_strtod_l+0x402>
 80072d8:	4b37      	ldr	r3, [pc, #220]	@ (80073b8 <_strtod_l+0x590>)
 80072da:	eba9 0808 	sub.w	r8, r9, r8
 80072de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80072e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80072e6:	4650      	mov	r0, sl
 80072e8:	4659      	mov	r1, fp
 80072ea:	f7f9 fad7 	bl	800089c <__aeabi_ddiv>
 80072ee:	e783      	b.n	80071f8 <_strtod_l+0x3d0>
 80072f0:	4b32      	ldr	r3, [pc, #200]	@ (80073bc <_strtod_l+0x594>)
 80072f2:	9308      	str	r3, [sp, #32]
 80072f4:	2300      	movs	r3, #0
 80072f6:	1124      	asrs	r4, r4, #4
 80072f8:	4650      	mov	r0, sl
 80072fa:	4659      	mov	r1, fp
 80072fc:	461e      	mov	r6, r3
 80072fe:	2c01      	cmp	r4, #1
 8007300:	dc21      	bgt.n	8007346 <_strtod_l+0x51e>
 8007302:	b10b      	cbz	r3, 8007308 <_strtod_l+0x4e0>
 8007304:	4682      	mov	sl, r0
 8007306:	468b      	mov	fp, r1
 8007308:	492c      	ldr	r1, [pc, #176]	@ (80073bc <_strtod_l+0x594>)
 800730a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800730e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007312:	4652      	mov	r2, sl
 8007314:	465b      	mov	r3, fp
 8007316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800731a:	f7f9 f995 	bl	8000648 <__aeabi_dmul>
 800731e:	4b28      	ldr	r3, [pc, #160]	@ (80073c0 <_strtod_l+0x598>)
 8007320:	460a      	mov	r2, r1
 8007322:	400b      	ands	r3, r1
 8007324:	4927      	ldr	r1, [pc, #156]	@ (80073c4 <_strtod_l+0x59c>)
 8007326:	428b      	cmp	r3, r1
 8007328:	4682      	mov	sl, r0
 800732a:	d898      	bhi.n	800725e <_strtod_l+0x436>
 800732c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007330:	428b      	cmp	r3, r1
 8007332:	bf86      	itte	hi
 8007334:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80073c8 <_strtod_l+0x5a0>
 8007338:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800733c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007340:	2300      	movs	r3, #0
 8007342:	9308      	str	r3, [sp, #32]
 8007344:	e07a      	b.n	800743c <_strtod_l+0x614>
 8007346:	07e2      	lsls	r2, r4, #31
 8007348:	d505      	bpl.n	8007356 <_strtod_l+0x52e>
 800734a:	9b08      	ldr	r3, [sp, #32]
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f7f9 f97a 	bl	8000648 <__aeabi_dmul>
 8007354:	2301      	movs	r3, #1
 8007356:	9a08      	ldr	r2, [sp, #32]
 8007358:	3208      	adds	r2, #8
 800735a:	3601      	adds	r6, #1
 800735c:	1064      	asrs	r4, r4, #1
 800735e:	9208      	str	r2, [sp, #32]
 8007360:	e7cd      	b.n	80072fe <_strtod_l+0x4d6>
 8007362:	d0ed      	beq.n	8007340 <_strtod_l+0x518>
 8007364:	4264      	negs	r4, r4
 8007366:	f014 020f 	ands.w	r2, r4, #15
 800736a:	d00a      	beq.n	8007382 <_strtod_l+0x55a>
 800736c:	4b12      	ldr	r3, [pc, #72]	@ (80073b8 <_strtod_l+0x590>)
 800736e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007372:	4650      	mov	r0, sl
 8007374:	4659      	mov	r1, fp
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f9 fa8f 	bl	800089c <__aeabi_ddiv>
 800737e:	4682      	mov	sl, r0
 8007380:	468b      	mov	fp, r1
 8007382:	1124      	asrs	r4, r4, #4
 8007384:	d0dc      	beq.n	8007340 <_strtod_l+0x518>
 8007386:	2c1f      	cmp	r4, #31
 8007388:	dd20      	ble.n	80073cc <_strtod_l+0x5a4>
 800738a:	2400      	movs	r4, #0
 800738c:	46a0      	mov	r8, r4
 800738e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007390:	46a1      	mov	r9, r4
 8007392:	9a05      	ldr	r2, [sp, #20]
 8007394:	2322      	movs	r3, #34	@ 0x22
 8007396:	f04f 0a00 	mov.w	sl, #0
 800739a:	f04f 0b00 	mov.w	fp, #0
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	e768      	b.n	8007274 <_strtod_l+0x44c>
 80073a2:	bf00      	nop
 80073a4:	0800a859 	.word	0x0800a859
 80073a8:	0800a888 	.word	0x0800a888
 80073ac:	0800a851 	.word	0x0800a851
 80073b0:	0800a9e4 	.word	0x0800a9e4
 80073b4:	0800ac73 	.word	0x0800ac73
 80073b8:	0800ab70 	.word	0x0800ab70
 80073bc:	0800ab48 	.word	0x0800ab48
 80073c0:	7ff00000 	.word	0x7ff00000
 80073c4:	7ca00000 	.word	0x7ca00000
 80073c8:	7fefffff 	.word	0x7fefffff
 80073cc:	f014 0310 	ands.w	r3, r4, #16
 80073d0:	bf18      	it	ne
 80073d2:	236a      	movne	r3, #106	@ 0x6a
 80073d4:	4ea9      	ldr	r6, [pc, #676]	@ (800767c <_strtod_l+0x854>)
 80073d6:	9308      	str	r3, [sp, #32]
 80073d8:	4650      	mov	r0, sl
 80073da:	4659      	mov	r1, fp
 80073dc:	2300      	movs	r3, #0
 80073de:	07e2      	lsls	r2, r4, #31
 80073e0:	d504      	bpl.n	80073ec <_strtod_l+0x5c4>
 80073e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073e6:	f7f9 f92f 	bl	8000648 <__aeabi_dmul>
 80073ea:	2301      	movs	r3, #1
 80073ec:	1064      	asrs	r4, r4, #1
 80073ee:	f106 0608 	add.w	r6, r6, #8
 80073f2:	d1f4      	bne.n	80073de <_strtod_l+0x5b6>
 80073f4:	b10b      	cbz	r3, 80073fa <_strtod_l+0x5d2>
 80073f6:	4682      	mov	sl, r0
 80073f8:	468b      	mov	fp, r1
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	b1b3      	cbz	r3, 800742c <_strtod_l+0x604>
 80073fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007402:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007406:	2b00      	cmp	r3, #0
 8007408:	4659      	mov	r1, fp
 800740a:	dd0f      	ble.n	800742c <_strtod_l+0x604>
 800740c:	2b1f      	cmp	r3, #31
 800740e:	dd55      	ble.n	80074bc <_strtod_l+0x694>
 8007410:	2b34      	cmp	r3, #52	@ 0x34
 8007412:	bfde      	ittt	le
 8007414:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007418:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800741c:	4093      	lslle	r3, r2
 800741e:	f04f 0a00 	mov.w	sl, #0
 8007422:	bfcc      	ite	gt
 8007424:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007428:	ea03 0b01 	andle.w	fp, r3, r1
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	4650      	mov	r0, sl
 8007432:	4659      	mov	r1, fp
 8007434:	f7f9 fb70 	bl	8000b18 <__aeabi_dcmpeq>
 8007438:	2800      	cmp	r0, #0
 800743a:	d1a6      	bne.n	800738a <_strtod_l+0x562>
 800743c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007442:	9805      	ldr	r0, [sp, #20]
 8007444:	462b      	mov	r3, r5
 8007446:	463a      	mov	r2, r7
 8007448:	f002 f8d6 	bl	80095f8 <__s2b>
 800744c:	900a      	str	r0, [sp, #40]	@ 0x28
 800744e:	2800      	cmp	r0, #0
 8007450:	f43f af05 	beq.w	800725e <_strtod_l+0x436>
 8007454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007456:	2a00      	cmp	r2, #0
 8007458:	eba9 0308 	sub.w	r3, r9, r8
 800745c:	bfa8      	it	ge
 800745e:	2300      	movge	r3, #0
 8007460:	9312      	str	r3, [sp, #72]	@ 0x48
 8007462:	2400      	movs	r4, #0
 8007464:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007468:	9316      	str	r3, [sp, #88]	@ 0x58
 800746a:	46a0      	mov	r8, r4
 800746c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746e:	9805      	ldr	r0, [sp, #20]
 8007470:	6859      	ldr	r1, [r3, #4]
 8007472:	f002 f819 	bl	80094a8 <_Balloc>
 8007476:	4681      	mov	r9, r0
 8007478:	2800      	cmp	r0, #0
 800747a:	f43f aef4 	beq.w	8007266 <_strtod_l+0x43e>
 800747e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	3202      	adds	r2, #2
 8007484:	f103 010c 	add.w	r1, r3, #12
 8007488:	0092      	lsls	r2, r2, #2
 800748a:	300c      	adds	r0, #12
 800748c:	f000 fb9b 	bl	8007bc6 <memcpy>
 8007490:	ec4b ab10 	vmov	d0, sl, fp
 8007494:	9805      	ldr	r0, [sp, #20]
 8007496:	aa1c      	add	r2, sp, #112	@ 0x70
 8007498:	a91b      	add	r1, sp, #108	@ 0x6c
 800749a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800749e:	f002 fbe7 	bl	8009c70 <__d2b>
 80074a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f43f aede 	beq.w	8007266 <_strtod_l+0x43e>
 80074aa:	9805      	ldr	r0, [sp, #20]
 80074ac:	2101      	movs	r1, #1
 80074ae:	f002 f939 	bl	8009724 <__i2b>
 80074b2:	4680      	mov	r8, r0
 80074b4:	b948      	cbnz	r0, 80074ca <_strtod_l+0x6a2>
 80074b6:	f04f 0800 	mov.w	r8, #0
 80074ba:	e6d4      	b.n	8007266 <_strtod_l+0x43e>
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	ea03 0a0a 	and.w	sl, r3, sl
 80074c8:	e7b0      	b.n	800742c <_strtod_l+0x604>
 80074ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80074cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	bfab      	itete	ge
 80074d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80074d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80074d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80074d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80074da:	bfac      	ite	ge
 80074dc:	18ef      	addge	r7, r5, r3
 80074de:	1b5e      	sublt	r6, r3, r5
 80074e0:	9b08      	ldr	r3, [sp, #32]
 80074e2:	1aed      	subs	r5, r5, r3
 80074e4:	4415      	add	r5, r2
 80074e6:	4b66      	ldr	r3, [pc, #408]	@ (8007680 <_strtod_l+0x858>)
 80074e8:	3d01      	subs	r5, #1
 80074ea:	429d      	cmp	r5, r3
 80074ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80074f0:	da50      	bge.n	8007594 <_strtod_l+0x76c>
 80074f2:	1b5b      	subs	r3, r3, r5
 80074f4:	2b1f      	cmp	r3, #31
 80074f6:	eba2 0203 	sub.w	r2, r2, r3
 80074fa:	f04f 0101 	mov.w	r1, #1
 80074fe:	dc3d      	bgt.n	800757c <_strtod_l+0x754>
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007506:	2300      	movs	r3, #0
 8007508:	9310      	str	r3, [sp, #64]	@ 0x40
 800750a:	18bd      	adds	r5, r7, r2
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	42af      	cmp	r7, r5
 8007510:	4416      	add	r6, r2
 8007512:	441e      	add	r6, r3
 8007514:	463b      	mov	r3, r7
 8007516:	bfa8      	it	ge
 8007518:	462b      	movge	r3, r5
 800751a:	42b3      	cmp	r3, r6
 800751c:	bfa8      	it	ge
 800751e:	4633      	movge	r3, r6
 8007520:	2b00      	cmp	r3, #0
 8007522:	bfc2      	ittt	gt
 8007524:	1aed      	subgt	r5, r5, r3
 8007526:	1af6      	subgt	r6, r6, r3
 8007528:	1aff      	subgt	r7, r7, r3
 800752a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800752c:	2b00      	cmp	r3, #0
 800752e:	dd16      	ble.n	800755e <_strtod_l+0x736>
 8007530:	4641      	mov	r1, r8
 8007532:	9805      	ldr	r0, [sp, #20]
 8007534:	461a      	mov	r2, r3
 8007536:	f002 f9b5 	bl	80098a4 <__pow5mult>
 800753a:	4680      	mov	r8, r0
 800753c:	2800      	cmp	r0, #0
 800753e:	d0ba      	beq.n	80074b6 <_strtod_l+0x68e>
 8007540:	4601      	mov	r1, r0
 8007542:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007544:	9805      	ldr	r0, [sp, #20]
 8007546:	f002 f903 	bl	8009750 <__multiply>
 800754a:	900e      	str	r0, [sp, #56]	@ 0x38
 800754c:	2800      	cmp	r0, #0
 800754e:	f43f ae8a 	beq.w	8007266 <_strtod_l+0x43e>
 8007552:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007554:	9805      	ldr	r0, [sp, #20]
 8007556:	f001 ffe7 	bl	8009528 <_Bfree>
 800755a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800755c:	931a      	str	r3, [sp, #104]	@ 0x68
 800755e:	2d00      	cmp	r5, #0
 8007560:	dc1d      	bgt.n	800759e <_strtod_l+0x776>
 8007562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	dd23      	ble.n	80075b0 <_strtod_l+0x788>
 8007568:	4649      	mov	r1, r9
 800756a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800756c:	9805      	ldr	r0, [sp, #20]
 800756e:	f002 f999 	bl	80098a4 <__pow5mult>
 8007572:	4681      	mov	r9, r0
 8007574:	b9e0      	cbnz	r0, 80075b0 <_strtod_l+0x788>
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	e674      	b.n	8007266 <_strtod_l+0x43e>
 800757c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007580:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007584:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007588:	35e2      	adds	r5, #226	@ 0xe2
 800758a:	fa01 f305 	lsl.w	r3, r1, r5
 800758e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007590:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007592:	e7ba      	b.n	800750a <_strtod_l+0x6e2>
 8007594:	2300      	movs	r3, #0
 8007596:	9310      	str	r3, [sp, #64]	@ 0x40
 8007598:	2301      	movs	r3, #1
 800759a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800759c:	e7b5      	b.n	800750a <_strtod_l+0x6e2>
 800759e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075a0:	9805      	ldr	r0, [sp, #20]
 80075a2:	462a      	mov	r2, r5
 80075a4:	f002 f9d8 	bl	8009958 <__lshift>
 80075a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d1d9      	bne.n	8007562 <_strtod_l+0x73a>
 80075ae:	e65a      	b.n	8007266 <_strtod_l+0x43e>
 80075b0:	2e00      	cmp	r6, #0
 80075b2:	dd07      	ble.n	80075c4 <_strtod_l+0x79c>
 80075b4:	4649      	mov	r1, r9
 80075b6:	9805      	ldr	r0, [sp, #20]
 80075b8:	4632      	mov	r2, r6
 80075ba:	f002 f9cd 	bl	8009958 <__lshift>
 80075be:	4681      	mov	r9, r0
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d0d8      	beq.n	8007576 <_strtod_l+0x74e>
 80075c4:	2f00      	cmp	r7, #0
 80075c6:	dd08      	ble.n	80075da <_strtod_l+0x7b2>
 80075c8:	4641      	mov	r1, r8
 80075ca:	9805      	ldr	r0, [sp, #20]
 80075cc:	463a      	mov	r2, r7
 80075ce:	f002 f9c3 	bl	8009958 <__lshift>
 80075d2:	4680      	mov	r8, r0
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f43f ae46 	beq.w	8007266 <_strtod_l+0x43e>
 80075da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075dc:	9805      	ldr	r0, [sp, #20]
 80075de:	464a      	mov	r2, r9
 80075e0:	f002 fa42 	bl	8009a68 <__mdiff>
 80075e4:	4604      	mov	r4, r0
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f43f ae3d 	beq.w	8007266 <_strtod_l+0x43e>
 80075ec:	68c3      	ldr	r3, [r0, #12]
 80075ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075f0:	2300      	movs	r3, #0
 80075f2:	60c3      	str	r3, [r0, #12]
 80075f4:	4641      	mov	r1, r8
 80075f6:	f002 fa1b 	bl	8009a30 <__mcmp>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	da46      	bge.n	800768c <_strtod_l+0x864>
 80075fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007600:	ea53 030a 	orrs.w	r3, r3, sl
 8007604:	d16c      	bne.n	80076e0 <_strtod_l+0x8b8>
 8007606:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800760a:	2b00      	cmp	r3, #0
 800760c:	d168      	bne.n	80076e0 <_strtod_l+0x8b8>
 800760e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007612:	0d1b      	lsrs	r3, r3, #20
 8007614:	051b      	lsls	r3, r3, #20
 8007616:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800761a:	d961      	bls.n	80076e0 <_strtod_l+0x8b8>
 800761c:	6963      	ldr	r3, [r4, #20]
 800761e:	b913      	cbnz	r3, 8007626 <_strtod_l+0x7fe>
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	2b01      	cmp	r3, #1
 8007624:	dd5c      	ble.n	80076e0 <_strtod_l+0x8b8>
 8007626:	4621      	mov	r1, r4
 8007628:	2201      	movs	r2, #1
 800762a:	9805      	ldr	r0, [sp, #20]
 800762c:	f002 f994 	bl	8009958 <__lshift>
 8007630:	4641      	mov	r1, r8
 8007632:	4604      	mov	r4, r0
 8007634:	f002 f9fc 	bl	8009a30 <__mcmp>
 8007638:	2800      	cmp	r0, #0
 800763a:	dd51      	ble.n	80076e0 <_strtod_l+0x8b8>
 800763c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007640:	9a08      	ldr	r2, [sp, #32]
 8007642:	0d1b      	lsrs	r3, r3, #20
 8007644:	051b      	lsls	r3, r3, #20
 8007646:	2a00      	cmp	r2, #0
 8007648:	d06b      	beq.n	8007722 <_strtod_l+0x8fa>
 800764a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800764e:	d868      	bhi.n	8007722 <_strtod_l+0x8fa>
 8007650:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007654:	f67f ae9d 	bls.w	8007392 <_strtod_l+0x56a>
 8007658:	4b0a      	ldr	r3, [pc, #40]	@ (8007684 <_strtod_l+0x85c>)
 800765a:	4650      	mov	r0, sl
 800765c:	4659      	mov	r1, fp
 800765e:	2200      	movs	r2, #0
 8007660:	f7f8 fff2 	bl	8000648 <__aeabi_dmul>
 8007664:	4b08      	ldr	r3, [pc, #32]	@ (8007688 <_strtod_l+0x860>)
 8007666:	400b      	ands	r3, r1
 8007668:	4682      	mov	sl, r0
 800766a:	468b      	mov	fp, r1
 800766c:	2b00      	cmp	r3, #0
 800766e:	f47f ae05 	bne.w	800727c <_strtod_l+0x454>
 8007672:	9a05      	ldr	r2, [sp, #20]
 8007674:	2322      	movs	r3, #34	@ 0x22
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e600      	b.n	800727c <_strtod_l+0x454>
 800767a:	bf00      	nop
 800767c:	0800a8b0 	.word	0x0800a8b0
 8007680:	fffffc02 	.word	0xfffffc02
 8007684:	39500000 	.word	0x39500000
 8007688:	7ff00000 	.word	0x7ff00000
 800768c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007690:	d165      	bne.n	800775e <_strtod_l+0x936>
 8007692:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007698:	b35a      	cbz	r2, 80076f2 <_strtod_l+0x8ca>
 800769a:	4a9f      	ldr	r2, [pc, #636]	@ (8007918 <_strtod_l+0xaf0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d12b      	bne.n	80076f8 <_strtod_l+0x8d0>
 80076a0:	9b08      	ldr	r3, [sp, #32]
 80076a2:	4651      	mov	r1, sl
 80076a4:	b303      	cbz	r3, 80076e8 <_strtod_l+0x8c0>
 80076a6:	4b9d      	ldr	r3, [pc, #628]	@ (800791c <_strtod_l+0xaf4>)
 80076a8:	465a      	mov	r2, fp
 80076aa:	4013      	ands	r3, r2
 80076ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076b4:	d81b      	bhi.n	80076ee <_strtod_l+0x8c6>
 80076b6:	0d1b      	lsrs	r3, r3, #20
 80076b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	4299      	cmp	r1, r3
 80076c2:	d119      	bne.n	80076f8 <_strtod_l+0x8d0>
 80076c4:	4b96      	ldr	r3, [pc, #600]	@ (8007920 <_strtod_l+0xaf8>)
 80076c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d102      	bne.n	80076d2 <_strtod_l+0x8aa>
 80076cc:	3101      	adds	r1, #1
 80076ce:	f43f adca 	beq.w	8007266 <_strtod_l+0x43e>
 80076d2:	4b92      	ldr	r3, [pc, #584]	@ (800791c <_strtod_l+0xaf4>)
 80076d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076d6:	401a      	ands	r2, r3
 80076d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80076dc:	f04f 0a00 	mov.w	sl, #0
 80076e0:	9b08      	ldr	r3, [sp, #32]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1b8      	bne.n	8007658 <_strtod_l+0x830>
 80076e6:	e5c9      	b.n	800727c <_strtod_l+0x454>
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076ec:	e7e8      	b.n	80076c0 <_strtod_l+0x898>
 80076ee:	4613      	mov	r3, r2
 80076f0:	e7e6      	b.n	80076c0 <_strtod_l+0x898>
 80076f2:	ea53 030a 	orrs.w	r3, r3, sl
 80076f6:	d0a1      	beq.n	800763c <_strtod_l+0x814>
 80076f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076fa:	b1db      	cbz	r3, 8007734 <_strtod_l+0x90c>
 80076fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076fe:	4213      	tst	r3, r2
 8007700:	d0ee      	beq.n	80076e0 <_strtod_l+0x8b8>
 8007702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007704:	9a08      	ldr	r2, [sp, #32]
 8007706:	4650      	mov	r0, sl
 8007708:	4659      	mov	r1, fp
 800770a:	b1bb      	cbz	r3, 800773c <_strtod_l+0x914>
 800770c:	f7ff fb6e 	bl	8006dec <sulp>
 8007710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007714:	ec53 2b10 	vmov	r2, r3, d0
 8007718:	f7f8 fde0 	bl	80002dc <__adddf3>
 800771c:	4682      	mov	sl, r0
 800771e:	468b      	mov	fp, r1
 8007720:	e7de      	b.n	80076e0 <_strtod_l+0x8b8>
 8007722:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007726:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800772a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800772e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007732:	e7d5      	b.n	80076e0 <_strtod_l+0x8b8>
 8007734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007736:	ea13 0f0a 	tst.w	r3, sl
 800773a:	e7e1      	b.n	8007700 <_strtod_l+0x8d8>
 800773c:	f7ff fb56 	bl	8006dec <sulp>
 8007740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007744:	ec53 2b10 	vmov	r2, r3, d0
 8007748:	f7f8 fdc6 	bl	80002d8 <__aeabi_dsub>
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	4682      	mov	sl, r0
 8007752:	468b      	mov	fp, r1
 8007754:	f7f9 f9e0 	bl	8000b18 <__aeabi_dcmpeq>
 8007758:	2800      	cmp	r0, #0
 800775a:	d0c1      	beq.n	80076e0 <_strtod_l+0x8b8>
 800775c:	e619      	b.n	8007392 <_strtod_l+0x56a>
 800775e:	4641      	mov	r1, r8
 8007760:	4620      	mov	r0, r4
 8007762:	f002 fadd 	bl	8009d20 <__ratio>
 8007766:	ec57 6b10 	vmov	r6, r7, d0
 800776a:	2200      	movs	r2, #0
 800776c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007770:	4630      	mov	r0, r6
 8007772:	4639      	mov	r1, r7
 8007774:	f7f9 f9e4 	bl	8000b40 <__aeabi_dcmple>
 8007778:	2800      	cmp	r0, #0
 800777a:	d06f      	beq.n	800785c <_strtod_l+0xa34>
 800777c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d17a      	bne.n	8007878 <_strtod_l+0xa50>
 8007782:	f1ba 0f00 	cmp.w	sl, #0
 8007786:	d158      	bne.n	800783a <_strtod_l+0xa12>
 8007788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800778a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800778e:	2b00      	cmp	r3, #0
 8007790:	d15a      	bne.n	8007848 <_strtod_l+0xa20>
 8007792:	4b64      	ldr	r3, [pc, #400]	@ (8007924 <_strtod_l+0xafc>)
 8007794:	2200      	movs	r2, #0
 8007796:	4630      	mov	r0, r6
 8007798:	4639      	mov	r1, r7
 800779a:	f7f9 f9c7 	bl	8000b2c <__aeabi_dcmplt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d159      	bne.n	8007856 <_strtod_l+0xa2e>
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	4b60      	ldr	r3, [pc, #384]	@ (8007928 <_strtod_l+0xb00>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	f7f8 ff4d 	bl	8000648 <__aeabi_dmul>
 80077ae:	4606      	mov	r6, r0
 80077b0:	460f      	mov	r7, r1
 80077b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80077b6:	9606      	str	r6, [sp, #24]
 80077b8:	9307      	str	r3, [sp, #28]
 80077ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077be:	4d57      	ldr	r5, [pc, #348]	@ (800791c <_strtod_l+0xaf4>)
 80077c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80077c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077c6:	401d      	ands	r5, r3
 80077c8:	4b58      	ldr	r3, [pc, #352]	@ (800792c <_strtod_l+0xb04>)
 80077ca:	429d      	cmp	r5, r3
 80077cc:	f040 80b2 	bne.w	8007934 <_strtod_l+0xb0c>
 80077d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80077d6:	ec4b ab10 	vmov	d0, sl, fp
 80077da:	f002 f9d9 	bl	8009b90 <__ulp>
 80077de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077e2:	ec51 0b10 	vmov	r0, r1, d0
 80077e6:	f7f8 ff2f 	bl	8000648 <__aeabi_dmul>
 80077ea:	4652      	mov	r2, sl
 80077ec:	465b      	mov	r3, fp
 80077ee:	f7f8 fd75 	bl	80002dc <__adddf3>
 80077f2:	460b      	mov	r3, r1
 80077f4:	4949      	ldr	r1, [pc, #292]	@ (800791c <_strtod_l+0xaf4>)
 80077f6:	4a4e      	ldr	r2, [pc, #312]	@ (8007930 <_strtod_l+0xb08>)
 80077f8:	4019      	ands	r1, r3
 80077fa:	4291      	cmp	r1, r2
 80077fc:	4682      	mov	sl, r0
 80077fe:	d942      	bls.n	8007886 <_strtod_l+0xa5e>
 8007800:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007802:	4b47      	ldr	r3, [pc, #284]	@ (8007920 <_strtod_l+0xaf8>)
 8007804:	429a      	cmp	r2, r3
 8007806:	d103      	bne.n	8007810 <_strtod_l+0x9e8>
 8007808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800780a:	3301      	adds	r3, #1
 800780c:	f43f ad2b 	beq.w	8007266 <_strtod_l+0x43e>
 8007810:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007920 <_strtod_l+0xaf8>
 8007814:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007818:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800781a:	9805      	ldr	r0, [sp, #20]
 800781c:	f001 fe84 	bl	8009528 <_Bfree>
 8007820:	9805      	ldr	r0, [sp, #20]
 8007822:	4649      	mov	r1, r9
 8007824:	f001 fe80 	bl	8009528 <_Bfree>
 8007828:	9805      	ldr	r0, [sp, #20]
 800782a:	4641      	mov	r1, r8
 800782c:	f001 fe7c 	bl	8009528 <_Bfree>
 8007830:	9805      	ldr	r0, [sp, #20]
 8007832:	4621      	mov	r1, r4
 8007834:	f001 fe78 	bl	8009528 <_Bfree>
 8007838:	e618      	b.n	800746c <_strtod_l+0x644>
 800783a:	f1ba 0f01 	cmp.w	sl, #1
 800783e:	d103      	bne.n	8007848 <_strtod_l+0xa20>
 8007840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007842:	2b00      	cmp	r3, #0
 8007844:	f43f ada5 	beq.w	8007392 <_strtod_l+0x56a>
 8007848:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80078f8 <_strtod_l+0xad0>
 800784c:	4f35      	ldr	r7, [pc, #212]	@ (8007924 <_strtod_l+0xafc>)
 800784e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007852:	2600      	movs	r6, #0
 8007854:	e7b1      	b.n	80077ba <_strtod_l+0x992>
 8007856:	4f34      	ldr	r7, [pc, #208]	@ (8007928 <_strtod_l+0xb00>)
 8007858:	2600      	movs	r6, #0
 800785a:	e7aa      	b.n	80077b2 <_strtod_l+0x98a>
 800785c:	4b32      	ldr	r3, [pc, #200]	@ (8007928 <_strtod_l+0xb00>)
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	2200      	movs	r2, #0
 8007864:	f7f8 fef0 	bl	8000648 <__aeabi_dmul>
 8007868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786a:	4606      	mov	r6, r0
 800786c:	460f      	mov	r7, r1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d09f      	beq.n	80077b2 <_strtod_l+0x98a>
 8007872:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007876:	e7a0      	b.n	80077ba <_strtod_l+0x992>
 8007878:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007900 <_strtod_l+0xad8>
 800787c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007880:	ec57 6b17 	vmov	r6, r7, d7
 8007884:	e799      	b.n	80077ba <_strtod_l+0x992>
 8007886:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1c1      	bne.n	8007818 <_strtod_l+0x9f0>
 8007894:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007898:	0d1b      	lsrs	r3, r3, #20
 800789a:	051b      	lsls	r3, r3, #20
 800789c:	429d      	cmp	r5, r3
 800789e:	d1bb      	bne.n	8007818 <_strtod_l+0x9f0>
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f9 fa30 	bl	8000d08 <__aeabi_d2lz>
 80078a8:	f7f8 fea0 	bl	80005ec <__aeabi_l2d>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4630      	mov	r0, r6
 80078b2:	4639      	mov	r1, r7
 80078b4:	f7f8 fd10 	bl	80002d8 <__aeabi_dsub>
 80078b8:	460b      	mov	r3, r1
 80078ba:	4602      	mov	r2, r0
 80078bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80078c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80078c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078c6:	ea46 060a 	orr.w	r6, r6, sl
 80078ca:	431e      	orrs	r6, r3
 80078cc:	d06f      	beq.n	80079ae <_strtod_l+0xb86>
 80078ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8007908 <_strtod_l+0xae0>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f9 f92a 	bl	8000b2c <__aeabi_dcmplt>
 80078d8:	2800      	cmp	r0, #0
 80078da:	f47f accf 	bne.w	800727c <_strtod_l+0x454>
 80078de:	a30c      	add	r3, pc, #48	@ (adr r3, 8007910 <_strtod_l+0xae8>)
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078e8:	f7f9 f93e 	bl	8000b68 <__aeabi_dcmpgt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d093      	beq.n	8007818 <_strtod_l+0x9f0>
 80078f0:	e4c4      	b.n	800727c <_strtod_l+0x454>
 80078f2:	bf00      	nop
 80078f4:	f3af 8000 	nop.w
 80078f8:	00000000 	.word	0x00000000
 80078fc:	bff00000 	.word	0xbff00000
 8007900:	00000000 	.word	0x00000000
 8007904:	3ff00000 	.word	0x3ff00000
 8007908:	94a03595 	.word	0x94a03595
 800790c:	3fdfffff 	.word	0x3fdfffff
 8007910:	35afe535 	.word	0x35afe535
 8007914:	3fe00000 	.word	0x3fe00000
 8007918:	000fffff 	.word	0x000fffff
 800791c:	7ff00000 	.word	0x7ff00000
 8007920:	7fefffff 	.word	0x7fefffff
 8007924:	3ff00000 	.word	0x3ff00000
 8007928:	3fe00000 	.word	0x3fe00000
 800792c:	7fe00000 	.word	0x7fe00000
 8007930:	7c9fffff 	.word	0x7c9fffff
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	b323      	cbz	r3, 8007982 <_strtod_l+0xb5a>
 8007938:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800793c:	d821      	bhi.n	8007982 <_strtod_l+0xb5a>
 800793e:	a328      	add	r3, pc, #160	@ (adr r3, 80079e0 <_strtod_l+0xbb8>)
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	f7f9 f8fa 	bl	8000b40 <__aeabi_dcmple>
 800794c:	b1a0      	cbz	r0, 8007978 <_strtod_l+0xb50>
 800794e:	4639      	mov	r1, r7
 8007950:	4630      	mov	r0, r6
 8007952:	f7f9 f951 	bl	8000bf8 <__aeabi_d2uiz>
 8007956:	2801      	cmp	r0, #1
 8007958:	bf38      	it	cc
 800795a:	2001      	movcc	r0, #1
 800795c:	f7f8 fdfa 	bl	8000554 <__aeabi_ui2d>
 8007960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007962:	4606      	mov	r6, r0
 8007964:	460f      	mov	r7, r1
 8007966:	b9fb      	cbnz	r3, 80079a8 <_strtod_l+0xb80>
 8007968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800796c:	9014      	str	r0, [sp, #80]	@ 0x50
 800796e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007970:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007974:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007978:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800797a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800797e:	1b5b      	subs	r3, r3, r5
 8007980:	9311      	str	r3, [sp, #68]	@ 0x44
 8007982:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007986:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800798a:	f002 f901 	bl	8009b90 <__ulp>
 800798e:	4650      	mov	r0, sl
 8007990:	ec53 2b10 	vmov	r2, r3, d0
 8007994:	4659      	mov	r1, fp
 8007996:	f7f8 fe57 	bl	8000648 <__aeabi_dmul>
 800799a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800799e:	f7f8 fc9d 	bl	80002dc <__adddf3>
 80079a2:	4682      	mov	sl, r0
 80079a4:	468b      	mov	fp, r1
 80079a6:	e770      	b.n	800788a <_strtod_l+0xa62>
 80079a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80079ac:	e7e0      	b.n	8007970 <_strtod_l+0xb48>
 80079ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80079e8 <_strtod_l+0xbc0>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f9 f8ba 	bl	8000b2c <__aeabi_dcmplt>
 80079b8:	e798      	b.n	80078ec <_strtod_l+0xac4>
 80079ba:	2300      	movs	r3, #0
 80079bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80079c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	f7ff ba6d 	b.w	8006ea2 <_strtod_l+0x7a>
 80079c8:	2a65      	cmp	r2, #101	@ 0x65
 80079ca:	f43f ab66 	beq.w	800709a <_strtod_l+0x272>
 80079ce:	2a45      	cmp	r2, #69	@ 0x45
 80079d0:	f43f ab63 	beq.w	800709a <_strtod_l+0x272>
 80079d4:	2301      	movs	r3, #1
 80079d6:	f7ff bb9e 	b.w	8007116 <_strtod_l+0x2ee>
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	ffc00000 	.word	0xffc00000
 80079e4:	41dfffff 	.word	0x41dfffff
 80079e8:	94a03595 	.word	0x94a03595
 80079ec:	3fcfffff 	.word	0x3fcfffff

080079f0 <_strtod_r>:
 80079f0:	4b01      	ldr	r3, [pc, #4]	@ (80079f8 <_strtod_r+0x8>)
 80079f2:	f7ff ba19 	b.w	8006e28 <_strtod_l>
 80079f6:	bf00      	nop
 80079f8:	20000018 	.word	0x20000018

080079fc <_strtol_l.constprop.0>:
 80079fc:	2b24      	cmp	r3, #36	@ 0x24
 80079fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a02:	4686      	mov	lr, r0
 8007a04:	4690      	mov	r8, r2
 8007a06:	d801      	bhi.n	8007a0c <_strtol_l.constprop.0+0x10>
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <_strtol_l.constprop.0+0x1e>
 8007a0c:	f000 f8ae 	bl	8007b6c <__errno>
 8007a10:	2316      	movs	r3, #22
 8007a12:	6003      	str	r3, [r0, #0]
 8007a14:	2000      	movs	r0, #0
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	4834      	ldr	r0, [pc, #208]	@ (8007aec <_strtol_l.constprop.0+0xf0>)
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	462a      	mov	r2, r5
 8007a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a24:	5d06      	ldrb	r6, [r0, r4]
 8007a26:	f016 0608 	ands.w	r6, r6, #8
 8007a2a:	d1f8      	bne.n	8007a1e <_strtol_l.constprop.0+0x22>
 8007a2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a2e:	d12d      	bne.n	8007a8c <_strtol_l.constprop.0+0x90>
 8007a30:	782c      	ldrb	r4, [r5, #0]
 8007a32:	2601      	movs	r6, #1
 8007a34:	1c95      	adds	r5, r2, #2
 8007a36:	f033 0210 	bics.w	r2, r3, #16
 8007a3a:	d109      	bne.n	8007a50 <_strtol_l.constprop.0+0x54>
 8007a3c:	2c30      	cmp	r4, #48	@ 0x30
 8007a3e:	d12a      	bne.n	8007a96 <_strtol_l.constprop.0+0x9a>
 8007a40:	782a      	ldrb	r2, [r5, #0]
 8007a42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007a46:	2a58      	cmp	r2, #88	@ 0x58
 8007a48:	d125      	bne.n	8007a96 <_strtol_l.constprop.0+0x9a>
 8007a4a:	786c      	ldrb	r4, [r5, #1]
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	3502      	adds	r5, #2
 8007a50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007a54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007a58:	2200      	movs	r2, #0
 8007a5a:	fbbc f9f3 	udiv	r9, ip, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007a68:	2f09      	cmp	r7, #9
 8007a6a:	d81b      	bhi.n	8007aa4 <_strtol_l.constprop.0+0xa8>
 8007a6c:	463c      	mov	r4, r7
 8007a6e:	42a3      	cmp	r3, r4
 8007a70:	dd27      	ble.n	8007ac2 <_strtol_l.constprop.0+0xc6>
 8007a72:	1c57      	adds	r7, r2, #1
 8007a74:	d007      	beq.n	8007a86 <_strtol_l.constprop.0+0x8a>
 8007a76:	4581      	cmp	r9, r0
 8007a78:	d320      	bcc.n	8007abc <_strtol_l.constprop.0+0xc0>
 8007a7a:	d101      	bne.n	8007a80 <_strtol_l.constprop.0+0x84>
 8007a7c:	45a2      	cmp	sl, r4
 8007a7e:	db1d      	blt.n	8007abc <_strtol_l.constprop.0+0xc0>
 8007a80:	fb00 4003 	mla	r0, r0, r3, r4
 8007a84:	2201      	movs	r2, #1
 8007a86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a8a:	e7eb      	b.n	8007a64 <_strtol_l.constprop.0+0x68>
 8007a8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007a8e:	bf04      	itt	eq
 8007a90:	782c      	ldrbeq	r4, [r5, #0]
 8007a92:	1c95      	addeq	r5, r2, #2
 8007a94:	e7cf      	b.n	8007a36 <_strtol_l.constprop.0+0x3a>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1da      	bne.n	8007a50 <_strtol_l.constprop.0+0x54>
 8007a9a:	2c30      	cmp	r4, #48	@ 0x30
 8007a9c:	bf0c      	ite	eq
 8007a9e:	2308      	moveq	r3, #8
 8007aa0:	230a      	movne	r3, #10
 8007aa2:	e7d5      	b.n	8007a50 <_strtol_l.constprop.0+0x54>
 8007aa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007aa8:	2f19      	cmp	r7, #25
 8007aaa:	d801      	bhi.n	8007ab0 <_strtol_l.constprop.0+0xb4>
 8007aac:	3c37      	subs	r4, #55	@ 0x37
 8007aae:	e7de      	b.n	8007a6e <_strtol_l.constprop.0+0x72>
 8007ab0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ab4:	2f19      	cmp	r7, #25
 8007ab6:	d804      	bhi.n	8007ac2 <_strtol_l.constprop.0+0xc6>
 8007ab8:	3c57      	subs	r4, #87	@ 0x57
 8007aba:	e7d8      	b.n	8007a6e <_strtol_l.constprop.0+0x72>
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ac0:	e7e1      	b.n	8007a86 <_strtol_l.constprop.0+0x8a>
 8007ac2:	1c53      	adds	r3, r2, #1
 8007ac4:	d108      	bne.n	8007ad8 <_strtol_l.constprop.0+0xdc>
 8007ac6:	2322      	movs	r3, #34	@ 0x22
 8007ac8:	f8ce 3000 	str.w	r3, [lr]
 8007acc:	4660      	mov	r0, ip
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	d0a0      	beq.n	8007a16 <_strtol_l.constprop.0+0x1a>
 8007ad4:	1e69      	subs	r1, r5, #1
 8007ad6:	e006      	b.n	8007ae6 <_strtol_l.constprop.0+0xea>
 8007ad8:	b106      	cbz	r6, 8007adc <_strtol_l.constprop.0+0xe0>
 8007ada:	4240      	negs	r0, r0
 8007adc:	f1b8 0f00 	cmp.w	r8, #0
 8007ae0:	d099      	beq.n	8007a16 <_strtol_l.constprop.0+0x1a>
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d1f6      	bne.n	8007ad4 <_strtol_l.constprop.0+0xd8>
 8007ae6:	f8c8 1000 	str.w	r1, [r8]
 8007aea:	e794      	b.n	8007a16 <_strtol_l.constprop.0+0x1a>
 8007aec:	0800a8e1 	.word	0x0800a8e1

08007af0 <_strtol_r>:
 8007af0:	f7ff bf84 	b.w	80079fc <_strtol_l.constprop.0>

08007af4 <_fwalk_sglue>:
 8007af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af8:	4607      	mov	r7, r0
 8007afa:	4688      	mov	r8, r1
 8007afc:	4614      	mov	r4, r2
 8007afe:	2600      	movs	r6, #0
 8007b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b04:	f1b9 0901 	subs.w	r9, r9, #1
 8007b08:	d505      	bpl.n	8007b16 <_fwalk_sglue+0x22>
 8007b0a:	6824      	ldr	r4, [r4, #0]
 8007b0c:	2c00      	cmp	r4, #0
 8007b0e:	d1f7      	bne.n	8007b00 <_fwalk_sglue+0xc>
 8007b10:	4630      	mov	r0, r6
 8007b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b16:	89ab      	ldrh	r3, [r5, #12]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d907      	bls.n	8007b2c <_fwalk_sglue+0x38>
 8007b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b20:	3301      	adds	r3, #1
 8007b22:	d003      	beq.n	8007b2c <_fwalk_sglue+0x38>
 8007b24:	4629      	mov	r1, r5
 8007b26:	4638      	mov	r0, r7
 8007b28:	47c0      	blx	r8
 8007b2a:	4306      	orrs	r6, r0
 8007b2c:	3568      	adds	r5, #104	@ 0x68
 8007b2e:	e7e9      	b.n	8007b04 <_fwalk_sglue+0x10>

08007b30 <strncmp>:
 8007b30:	b510      	push	{r4, lr}
 8007b32:	b16a      	cbz	r2, 8007b50 <strncmp+0x20>
 8007b34:	3901      	subs	r1, #1
 8007b36:	1884      	adds	r4, r0, r2
 8007b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d103      	bne.n	8007b4c <strncmp+0x1c>
 8007b44:	42a0      	cmp	r0, r4
 8007b46:	d001      	beq.n	8007b4c <strncmp+0x1c>
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	d1f5      	bne.n	8007b38 <strncmp+0x8>
 8007b4c:	1ad0      	subs	r0, r2, r3
 8007b4e:	bd10      	pop	{r4, pc}
 8007b50:	4610      	mov	r0, r2
 8007b52:	e7fc      	b.n	8007b4e <strncmp+0x1e>

08007b54 <memset>:
 8007b54:	4402      	add	r2, r0
 8007b56:	4603      	mov	r3, r0
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d100      	bne.n	8007b5e <memset+0xa>
 8007b5c:	4770      	bx	lr
 8007b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b62:	e7f9      	b.n	8007b58 <memset+0x4>

08007b64 <_localeconv_r>:
 8007b64:	4800      	ldr	r0, [pc, #0]	@ (8007b68 <_localeconv_r+0x4>)
 8007b66:	4770      	bx	lr
 8007b68:	20000108 	.word	0x20000108

08007b6c <__errno>:
 8007b6c:	4b01      	ldr	r3, [pc, #4]	@ (8007b74 <__errno+0x8>)
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000184 	.word	0x20000184

08007b78 <__libc_init_array>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8007bb0 <__libc_init_array+0x38>)
 8007b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8007bb4 <__libc_init_array+0x3c>)
 8007b7e:	1b64      	subs	r4, r4, r5
 8007b80:	10a4      	asrs	r4, r4, #2
 8007b82:	2600      	movs	r6, #0
 8007b84:	42a6      	cmp	r6, r4
 8007b86:	d109      	bne.n	8007b9c <__libc_init_array+0x24>
 8007b88:	4d0b      	ldr	r5, [pc, #44]	@ (8007bb8 <__libc_init_array+0x40>)
 8007b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007bbc <__libc_init_array+0x44>)
 8007b8c:	f002 fd66 	bl	800a65c <_init>
 8007b90:	1b64      	subs	r4, r4, r5
 8007b92:	10a4      	asrs	r4, r4, #2
 8007b94:	2600      	movs	r6, #0
 8007b96:	42a6      	cmp	r6, r4
 8007b98:	d105      	bne.n	8007ba6 <__libc_init_array+0x2e>
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba0:	4798      	blx	r3
 8007ba2:	3601      	adds	r6, #1
 8007ba4:	e7ee      	b.n	8007b84 <__libc_init_array+0xc>
 8007ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007baa:	4798      	blx	r3
 8007bac:	3601      	adds	r6, #1
 8007bae:	e7f2      	b.n	8007b96 <__libc_init_array+0x1e>
 8007bb0:	0800ac7c 	.word	0x0800ac7c
 8007bb4:	0800ac7c 	.word	0x0800ac7c
 8007bb8:	0800ac7c 	.word	0x0800ac7c
 8007bbc:	0800ac80 	.word	0x0800ac80

08007bc0 <__retarget_lock_init_recursive>:
 8007bc0:	4770      	bx	lr

08007bc2 <__retarget_lock_acquire_recursive>:
 8007bc2:	4770      	bx	lr

08007bc4 <__retarget_lock_release_recursive>:
 8007bc4:	4770      	bx	lr

08007bc6 <memcpy>:
 8007bc6:	440a      	add	r2, r1
 8007bc8:	4291      	cmp	r1, r2
 8007bca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007bce:	d100      	bne.n	8007bd2 <memcpy+0xc>
 8007bd0:	4770      	bx	lr
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bdc:	4291      	cmp	r1, r2
 8007bde:	d1f9      	bne.n	8007bd4 <memcpy+0xe>
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	0000      	movs	r0, r0
 8007be4:	0000      	movs	r0, r0
	...

08007be8 <nan>:
 8007be8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007bf0 <nan+0x8>
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	00000000 	.word	0x00000000
 8007bf4:	7ff80000 	.word	0x7ff80000

08007bf8 <nanf>:
 8007bf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007c00 <nanf+0x8>
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	7fc00000 	.word	0x7fc00000

08007c04 <quorem>:
 8007c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	6903      	ldr	r3, [r0, #16]
 8007c0a:	690c      	ldr	r4, [r1, #16]
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	4607      	mov	r7, r0
 8007c10:	db7e      	blt.n	8007d10 <quorem+0x10c>
 8007c12:	3c01      	subs	r4, #1
 8007c14:	f101 0814 	add.w	r8, r1, #20
 8007c18:	00a3      	lsls	r3, r4, #2
 8007c1a:	f100 0514 	add.w	r5, r0, #20
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	429a      	cmp	r2, r3
 8007c32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c36:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c3a:	d32e      	bcc.n	8007c9a <quorem+0x96>
 8007c3c:	f04f 0a00 	mov.w	sl, #0
 8007c40:	46c4      	mov	ip, r8
 8007c42:	46ae      	mov	lr, r5
 8007c44:	46d3      	mov	fp, sl
 8007c46:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c4a:	b298      	uxth	r0, r3
 8007c4c:	fb06 a000 	mla	r0, r6, r0, sl
 8007c50:	0c02      	lsrs	r2, r0, #16
 8007c52:	0c1b      	lsrs	r3, r3, #16
 8007c54:	fb06 2303 	mla	r3, r6, r3, r2
 8007c58:	f8de 2000 	ldr.w	r2, [lr]
 8007c5c:	b280      	uxth	r0, r0
 8007c5e:	b292      	uxth	r2, r2
 8007c60:	1a12      	subs	r2, r2, r0
 8007c62:	445a      	add	r2, fp
 8007c64:	f8de 0000 	ldr.w	r0, [lr]
 8007c68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c76:	b292      	uxth	r2, r2
 8007c78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c7c:	45e1      	cmp	r9, ip
 8007c7e:	f84e 2b04 	str.w	r2, [lr], #4
 8007c82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c86:	d2de      	bcs.n	8007c46 <quorem+0x42>
 8007c88:	9b00      	ldr	r3, [sp, #0]
 8007c8a:	58eb      	ldr	r3, [r5, r3]
 8007c8c:	b92b      	cbnz	r3, 8007c9a <quorem+0x96>
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	3b04      	subs	r3, #4
 8007c92:	429d      	cmp	r5, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	d32f      	bcc.n	8007cf8 <quorem+0xf4>
 8007c98:	613c      	str	r4, [r7, #16]
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	f001 fec8 	bl	8009a30 <__mcmp>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	db25      	blt.n	8007cf0 <quorem+0xec>
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cac:	f8d1 c000 	ldr.w	ip, [r1]
 8007cb0:	fa1f fe82 	uxth.w	lr, r2
 8007cb4:	fa1f f38c 	uxth.w	r3, ip
 8007cb8:	eba3 030e 	sub.w	r3, r3, lr
 8007cbc:	4403      	add	r3, r0
 8007cbe:	0c12      	lsrs	r2, r2, #16
 8007cc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007cc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cce:	45c1      	cmp	r9, r8
 8007cd0:	f841 3b04 	str.w	r3, [r1], #4
 8007cd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007cd8:	d2e6      	bcs.n	8007ca8 <quorem+0xa4>
 8007cda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ce2:	b922      	cbnz	r2, 8007cee <quorem+0xea>
 8007ce4:	3b04      	subs	r3, #4
 8007ce6:	429d      	cmp	r5, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	d30b      	bcc.n	8007d04 <quorem+0x100>
 8007cec:	613c      	str	r4, [r7, #16]
 8007cee:	3601      	adds	r6, #1
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	b003      	add	sp, #12
 8007cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf8:	6812      	ldr	r2, [r2, #0]
 8007cfa:	3b04      	subs	r3, #4
 8007cfc:	2a00      	cmp	r2, #0
 8007cfe:	d1cb      	bne.n	8007c98 <quorem+0x94>
 8007d00:	3c01      	subs	r4, #1
 8007d02:	e7c6      	b.n	8007c92 <quorem+0x8e>
 8007d04:	6812      	ldr	r2, [r2, #0]
 8007d06:	3b04      	subs	r3, #4
 8007d08:	2a00      	cmp	r2, #0
 8007d0a:	d1ef      	bne.n	8007cec <quorem+0xe8>
 8007d0c:	3c01      	subs	r4, #1
 8007d0e:	e7ea      	b.n	8007ce6 <quorem+0xe2>
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7ee      	b.n	8007cf2 <quorem+0xee>
 8007d14:	0000      	movs	r0, r0
	...

08007d18 <_dtoa_r>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	69c7      	ldr	r7, [r0, #28]
 8007d1e:	b099      	sub	sp, #100	@ 0x64
 8007d20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d24:	ec55 4b10 	vmov	r4, r5, d0
 8007d28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007d2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d2c:	4683      	mov	fp, r0
 8007d2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d32:	b97f      	cbnz	r7, 8007d54 <_dtoa_r+0x3c>
 8007d34:	2010      	movs	r0, #16
 8007d36:	f001 fa43 	bl	80091c0 <malloc>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007d40:	b920      	cbnz	r0, 8007d4c <_dtoa_r+0x34>
 8007d42:	4ba7      	ldr	r3, [pc, #668]	@ (8007fe0 <_dtoa_r+0x2c8>)
 8007d44:	21ef      	movs	r1, #239	@ 0xef
 8007d46:	48a7      	ldr	r0, [pc, #668]	@ (8007fe4 <_dtoa_r+0x2cc>)
 8007d48:	f002 f94e 	bl	8009fe8 <__assert_func>
 8007d4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d50:	6007      	str	r7, [r0, #0]
 8007d52:	60c7      	str	r7, [r0, #12]
 8007d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d58:	6819      	ldr	r1, [r3, #0]
 8007d5a:	b159      	cbz	r1, 8007d74 <_dtoa_r+0x5c>
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	604a      	str	r2, [r1, #4]
 8007d60:	2301      	movs	r3, #1
 8007d62:	4093      	lsls	r3, r2
 8007d64:	608b      	str	r3, [r1, #8]
 8007d66:	4658      	mov	r0, fp
 8007d68:	f001 fbde 	bl	8009528 <_Bfree>
 8007d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	1e2b      	subs	r3, r5, #0
 8007d76:	bfb9      	ittee	lt
 8007d78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d7c:	9303      	strlt	r3, [sp, #12]
 8007d7e:	2300      	movge	r3, #0
 8007d80:	6033      	strge	r3, [r6, #0]
 8007d82:	9f03      	ldr	r7, [sp, #12]
 8007d84:	4b98      	ldr	r3, [pc, #608]	@ (8007fe8 <_dtoa_r+0x2d0>)
 8007d86:	bfbc      	itt	lt
 8007d88:	2201      	movlt	r2, #1
 8007d8a:	6032      	strlt	r2, [r6, #0]
 8007d8c:	43bb      	bics	r3, r7
 8007d8e:	d112      	bne.n	8007db6 <_dtoa_r+0x9e>
 8007d90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d9c:	4323      	orrs	r3, r4
 8007d9e:	f000 854d 	beq.w	800883c <_dtoa_r+0xb24>
 8007da2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007da4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007ffc <_dtoa_r+0x2e4>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 854f 	beq.w	800884c <_dtoa_r+0xb34>
 8007dae:	f10a 0303 	add.w	r3, sl, #3
 8007db2:	f000 bd49 	b.w	8008848 <_dtoa_r+0xb30>
 8007db6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	ec51 0b17 	vmov	r0, r1, d7
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007dc6:	f7f8 fea7 	bl	8000b18 <__aeabi_dcmpeq>
 8007dca:	4680      	mov	r8, r0
 8007dcc:	b158      	cbz	r0, 8007de6 <_dtoa_r+0xce>
 8007dce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dd6:	b113      	cbz	r3, 8007dde <_dtoa_r+0xc6>
 8007dd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dda:	4b84      	ldr	r3, [pc, #528]	@ (8007fec <_dtoa_r+0x2d4>)
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008000 <_dtoa_r+0x2e8>
 8007de2:	f000 bd33 	b.w	800884c <_dtoa_r+0xb34>
 8007de6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007dea:	aa16      	add	r2, sp, #88	@ 0x58
 8007dec:	a917      	add	r1, sp, #92	@ 0x5c
 8007dee:	4658      	mov	r0, fp
 8007df0:	f001 ff3e 	bl	8009c70 <__d2b>
 8007df4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007df8:	4681      	mov	r9, r0
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	d077      	beq.n	8007eee <_dtoa_r+0x1d6>
 8007dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e18:	4619      	mov	r1, r3
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4b74      	ldr	r3, [pc, #464]	@ (8007ff0 <_dtoa_r+0x2d8>)
 8007e1e:	f7f8 fa5b 	bl	80002d8 <__aeabi_dsub>
 8007e22:	a369      	add	r3, pc, #420	@ (adr r3, 8007fc8 <_dtoa_r+0x2b0>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f7f8 fc0e 	bl	8000648 <__aeabi_dmul>
 8007e2c:	a368      	add	r3, pc, #416	@ (adr r3, 8007fd0 <_dtoa_r+0x2b8>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 fa53 	bl	80002dc <__adddf3>
 8007e36:	4604      	mov	r4, r0
 8007e38:	4630      	mov	r0, r6
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	f7f8 fb9a 	bl	8000574 <__aeabi_i2d>
 8007e40:	a365      	add	r3, pc, #404	@ (adr r3, 8007fd8 <_dtoa_r+0x2c0>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f7f8 fbff 	bl	8000648 <__aeabi_dmul>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 fa43 	bl	80002dc <__adddf3>
 8007e56:	4604      	mov	r4, r0
 8007e58:	460d      	mov	r5, r1
 8007e5a:	f7f8 fea5 	bl	8000ba8 <__aeabi_d2iz>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4607      	mov	r7, r0
 8007e62:	2300      	movs	r3, #0
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fe60 	bl	8000b2c <__aeabi_dcmplt>
 8007e6c:	b140      	cbz	r0, 8007e80 <_dtoa_r+0x168>
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f7f8 fb80 	bl	8000574 <__aeabi_i2d>
 8007e74:	4622      	mov	r2, r4
 8007e76:	462b      	mov	r3, r5
 8007e78:	f7f8 fe4e 	bl	8000b18 <__aeabi_dcmpeq>
 8007e7c:	b900      	cbnz	r0, 8007e80 <_dtoa_r+0x168>
 8007e7e:	3f01      	subs	r7, #1
 8007e80:	2f16      	cmp	r7, #22
 8007e82:	d851      	bhi.n	8007f28 <_dtoa_r+0x210>
 8007e84:	4b5b      	ldr	r3, [pc, #364]	@ (8007ff4 <_dtoa_r+0x2dc>)
 8007e86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e92:	f7f8 fe4b 	bl	8000b2c <__aeabi_dcmplt>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d048      	beq.n	8007f2c <_dtoa_r+0x214>
 8007e9a:	3f01      	subs	r7, #1
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ea0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ea2:	1b9b      	subs	r3, r3, r6
 8007ea4:	1e5a      	subs	r2, r3, #1
 8007ea6:	bf44      	itt	mi
 8007ea8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007eac:	2300      	movmi	r3, #0
 8007eae:	9208      	str	r2, [sp, #32]
 8007eb0:	bf54      	ite	pl
 8007eb2:	f04f 0800 	movpl.w	r8, #0
 8007eb6:	9308      	strmi	r3, [sp, #32]
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	db39      	blt.n	8007f30 <_dtoa_r+0x218>
 8007ebc:	9b08      	ldr	r3, [sp, #32]
 8007ebe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ec0:	443b      	add	r3, r7
 8007ec2:	9308      	str	r3, [sp, #32]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eca:	2b09      	cmp	r3, #9
 8007ecc:	d864      	bhi.n	8007f98 <_dtoa_r+0x280>
 8007ece:	2b05      	cmp	r3, #5
 8007ed0:	bfc4      	itt	gt
 8007ed2:	3b04      	subgt	r3, #4
 8007ed4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed8:	f1a3 0302 	sub.w	r3, r3, #2
 8007edc:	bfcc      	ite	gt
 8007ede:	2400      	movgt	r4, #0
 8007ee0:	2401      	movle	r4, #1
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d863      	bhi.n	8007fae <_dtoa_r+0x296>
 8007ee6:	e8df f003 	tbb	[pc, r3]
 8007eea:	372a      	.short	0x372a
 8007eec:	5535      	.short	0x5535
 8007eee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007ef2:	441e      	add	r6, r3
 8007ef4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	bfc1      	itttt	gt
 8007efc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f00:	409f      	lslgt	r7, r3
 8007f02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f0a:	bfd6      	itet	le
 8007f0c:	f1c3 0320 	rsble	r3, r3, #32
 8007f10:	ea47 0003 	orrgt.w	r0, r7, r3
 8007f14:	fa04 f003 	lslle.w	r0, r4, r3
 8007f18:	f7f8 fb1c 	bl	8000554 <__aeabi_ui2d>
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f22:	3e01      	subs	r6, #1
 8007f24:	9214      	str	r2, [sp, #80]	@ 0x50
 8007f26:	e777      	b.n	8007e18 <_dtoa_r+0x100>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e7b8      	b.n	8007e9e <_dtoa_r+0x186>
 8007f2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007f2e:	e7b7      	b.n	8007ea0 <_dtoa_r+0x188>
 8007f30:	427b      	negs	r3, r7
 8007f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f34:	2300      	movs	r3, #0
 8007f36:	eba8 0807 	sub.w	r8, r8, r7
 8007f3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f3c:	e7c4      	b.n	8007ec8 <_dtoa_r+0x1b0>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dc35      	bgt.n	8007fb4 <_dtoa_r+0x29c>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	9307      	str	r3, [sp, #28]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f52:	e00b      	b.n	8007f6c <_dtoa_r+0x254>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e7f3      	b.n	8007f40 <_dtoa_r+0x228>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	9307      	str	r3, [sp, #28]
 8007f68:	bfb8      	it	lt
 8007f6a:	2301      	movlt	r3, #1
 8007f6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f70:	2100      	movs	r1, #0
 8007f72:	2204      	movs	r2, #4
 8007f74:	f102 0514 	add.w	r5, r2, #20
 8007f78:	429d      	cmp	r5, r3
 8007f7a:	d91f      	bls.n	8007fbc <_dtoa_r+0x2a4>
 8007f7c:	6041      	str	r1, [r0, #4]
 8007f7e:	4658      	mov	r0, fp
 8007f80:	f001 fa92 	bl	80094a8 <_Balloc>
 8007f84:	4682      	mov	sl, r0
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d13c      	bne.n	8008004 <_dtoa_r+0x2ec>
 8007f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff8 <_dtoa_r+0x2e0>)
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f92:	e6d8      	b.n	8007d46 <_dtoa_r+0x2e>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e7e0      	b.n	8007f5a <_dtoa_r+0x242>
 8007f98:	2401      	movs	r4, #1
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2312      	movs	r3, #18
 8007fac:	e7d0      	b.n	8007f50 <_dtoa_r+0x238>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fb2:	e7f5      	b.n	8007fa0 <_dtoa_r+0x288>
 8007fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	9307      	str	r3, [sp, #28]
 8007fba:	e7d7      	b.n	8007f6c <_dtoa_r+0x254>
 8007fbc:	3101      	adds	r1, #1
 8007fbe:	0052      	lsls	r2, r2, #1
 8007fc0:	e7d8      	b.n	8007f74 <_dtoa_r+0x25c>
 8007fc2:	bf00      	nop
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	636f4361 	.word	0x636f4361
 8007fcc:	3fd287a7 	.word	0x3fd287a7
 8007fd0:	8b60c8b3 	.word	0x8b60c8b3
 8007fd4:	3fc68a28 	.word	0x3fc68a28
 8007fd8:	509f79fb 	.word	0x509f79fb
 8007fdc:	3fd34413 	.word	0x3fd34413
 8007fe0:	0800a9ee 	.word	0x0800a9ee
 8007fe4:	0800aa05 	.word	0x0800aa05
 8007fe8:	7ff00000 	.word	0x7ff00000
 8007fec:	0800a85d 	.word	0x0800a85d
 8007ff0:	3ff80000 	.word	0x3ff80000
 8007ff4:	0800ab70 	.word	0x0800ab70
 8007ff8:	0800aa5d 	.word	0x0800aa5d
 8007ffc:	0800a9ea 	.word	0x0800a9ea
 8008000:	0800a85c 	.word	0x0800a85c
 8008004:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008008:	6018      	str	r0, [r3, #0]
 800800a:	9b07      	ldr	r3, [sp, #28]
 800800c:	2b0e      	cmp	r3, #14
 800800e:	f200 80a4 	bhi.w	800815a <_dtoa_r+0x442>
 8008012:	2c00      	cmp	r4, #0
 8008014:	f000 80a1 	beq.w	800815a <_dtoa_r+0x442>
 8008018:	2f00      	cmp	r7, #0
 800801a:	dd33      	ble.n	8008084 <_dtoa_r+0x36c>
 800801c:	4bad      	ldr	r3, [pc, #692]	@ (80082d4 <_dtoa_r+0x5bc>)
 800801e:	f007 020f 	and.w	r2, r7, #15
 8008022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008026:	ed93 7b00 	vldr	d7, [r3]
 800802a:	05f8      	lsls	r0, r7, #23
 800802c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008030:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008034:	d516      	bpl.n	8008064 <_dtoa_r+0x34c>
 8008036:	4ba8      	ldr	r3, [pc, #672]	@ (80082d8 <_dtoa_r+0x5c0>)
 8008038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800803c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008040:	f7f8 fc2c 	bl	800089c <__aeabi_ddiv>
 8008044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008048:	f004 040f 	and.w	r4, r4, #15
 800804c:	2603      	movs	r6, #3
 800804e:	4da2      	ldr	r5, [pc, #648]	@ (80082d8 <_dtoa_r+0x5c0>)
 8008050:	b954      	cbnz	r4, 8008068 <_dtoa_r+0x350>
 8008052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800805a:	f7f8 fc1f 	bl	800089c <__aeabi_ddiv>
 800805e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008062:	e028      	b.n	80080b6 <_dtoa_r+0x39e>
 8008064:	2602      	movs	r6, #2
 8008066:	e7f2      	b.n	800804e <_dtoa_r+0x336>
 8008068:	07e1      	lsls	r1, r4, #31
 800806a:	d508      	bpl.n	800807e <_dtoa_r+0x366>
 800806c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008070:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008074:	f7f8 fae8 	bl	8000648 <__aeabi_dmul>
 8008078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800807c:	3601      	adds	r6, #1
 800807e:	1064      	asrs	r4, r4, #1
 8008080:	3508      	adds	r5, #8
 8008082:	e7e5      	b.n	8008050 <_dtoa_r+0x338>
 8008084:	f000 80d2 	beq.w	800822c <_dtoa_r+0x514>
 8008088:	427c      	negs	r4, r7
 800808a:	4b92      	ldr	r3, [pc, #584]	@ (80082d4 <_dtoa_r+0x5bc>)
 800808c:	4d92      	ldr	r5, [pc, #584]	@ (80082d8 <_dtoa_r+0x5c0>)
 800808e:	f004 020f 	and.w	r2, r4, #15
 8008092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800809e:	f7f8 fad3 	bl	8000648 <__aeabi_dmul>
 80080a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080a6:	1124      	asrs	r4, r4, #4
 80080a8:	2300      	movs	r3, #0
 80080aa:	2602      	movs	r6, #2
 80080ac:	2c00      	cmp	r4, #0
 80080ae:	f040 80b2 	bne.w	8008216 <_dtoa_r+0x4fe>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1d3      	bne.n	800805e <_dtoa_r+0x346>
 80080b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80b7 	beq.w	8008230 <_dtoa_r+0x518>
 80080c2:	4b86      	ldr	r3, [pc, #536]	@ (80082dc <_dtoa_r+0x5c4>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	4620      	mov	r0, r4
 80080c8:	4629      	mov	r1, r5
 80080ca:	f7f8 fd2f 	bl	8000b2c <__aeabi_dcmplt>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f000 80ae 	beq.w	8008230 <_dtoa_r+0x518>
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80aa 	beq.w	8008230 <_dtoa_r+0x518>
 80080dc:	9b00      	ldr	r3, [sp, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dd37      	ble.n	8008152 <_dtoa_r+0x43a>
 80080e2:	1e7b      	subs	r3, r7, #1
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	4620      	mov	r0, r4
 80080e8:	4b7d      	ldr	r3, [pc, #500]	@ (80082e0 <_dtoa_r+0x5c8>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7f8 faab 	bl	8000648 <__aeabi_dmul>
 80080f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f6:	9c00      	ldr	r4, [sp, #0]
 80080f8:	3601      	adds	r6, #1
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7f8 fa3a 	bl	8000574 <__aeabi_i2d>
 8008100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008104:	f7f8 faa0 	bl	8000648 <__aeabi_dmul>
 8008108:	4b76      	ldr	r3, [pc, #472]	@ (80082e4 <_dtoa_r+0x5cc>)
 800810a:	2200      	movs	r2, #0
 800810c:	f7f8 f8e6 	bl	80002dc <__adddf3>
 8008110:	4605      	mov	r5, r0
 8008112:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008116:	2c00      	cmp	r4, #0
 8008118:	f040 808d 	bne.w	8008236 <_dtoa_r+0x51e>
 800811c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008120:	4b71      	ldr	r3, [pc, #452]	@ (80082e8 <_dtoa_r+0x5d0>)
 8008122:	2200      	movs	r2, #0
 8008124:	f7f8 f8d8 	bl	80002d8 <__aeabi_dsub>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008130:	462a      	mov	r2, r5
 8008132:	4633      	mov	r3, r6
 8008134:	f7f8 fd18 	bl	8000b68 <__aeabi_dcmpgt>
 8008138:	2800      	cmp	r0, #0
 800813a:	f040 828b 	bne.w	8008654 <_dtoa_r+0x93c>
 800813e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008142:	462a      	mov	r2, r5
 8008144:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008148:	f7f8 fcf0 	bl	8000b2c <__aeabi_dcmplt>
 800814c:	2800      	cmp	r0, #0
 800814e:	f040 8128 	bne.w	80083a2 <_dtoa_r+0x68a>
 8008152:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008156:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800815a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800815c:	2b00      	cmp	r3, #0
 800815e:	f2c0 815a 	blt.w	8008416 <_dtoa_r+0x6fe>
 8008162:	2f0e      	cmp	r7, #14
 8008164:	f300 8157 	bgt.w	8008416 <_dtoa_r+0x6fe>
 8008168:	4b5a      	ldr	r3, [pc, #360]	@ (80082d4 <_dtoa_r+0x5bc>)
 800816a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800816e:	ed93 7b00 	vldr	d7, [r3]
 8008172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008174:	2b00      	cmp	r3, #0
 8008176:	ed8d 7b00 	vstr	d7, [sp]
 800817a:	da03      	bge.n	8008184 <_dtoa_r+0x46c>
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f340 8101 	ble.w	8008386 <_dtoa_r+0x66e>
 8008184:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008188:	4656      	mov	r6, sl
 800818a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800818e:	4620      	mov	r0, r4
 8008190:	4629      	mov	r1, r5
 8008192:	f7f8 fb83 	bl	800089c <__aeabi_ddiv>
 8008196:	f7f8 fd07 	bl	8000ba8 <__aeabi_d2iz>
 800819a:	4680      	mov	r8, r0
 800819c:	f7f8 f9ea 	bl	8000574 <__aeabi_i2d>
 80081a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a4:	f7f8 fa50 	bl	8000648 <__aeabi_dmul>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081b4:	f7f8 f890 	bl	80002d8 <__aeabi_dsub>
 80081b8:	f806 4b01 	strb.w	r4, [r6], #1
 80081bc:	9d07      	ldr	r5, [sp, #28]
 80081be:	eba6 040a 	sub.w	r4, r6, sl
 80081c2:	42a5      	cmp	r5, r4
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	f040 8117 	bne.w	80083fa <_dtoa_r+0x6e2>
 80081cc:	f7f8 f886 	bl	80002dc <__adddf3>
 80081d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	f7f8 fcc6 	bl	8000b68 <__aeabi_dcmpgt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	f040 80f9 	bne.w	80083d4 <_dtoa_r+0x6bc>
 80081e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f8 fc95 	bl	8000b18 <__aeabi_dcmpeq>
 80081ee:	b118      	cbz	r0, 80081f8 <_dtoa_r+0x4e0>
 80081f0:	f018 0f01 	tst.w	r8, #1
 80081f4:	f040 80ee 	bne.w	80083d4 <_dtoa_r+0x6bc>
 80081f8:	4649      	mov	r1, r9
 80081fa:	4658      	mov	r0, fp
 80081fc:	f001 f994 	bl	8009528 <_Bfree>
 8008200:	2300      	movs	r3, #0
 8008202:	7033      	strb	r3, [r6, #0]
 8008204:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008206:	3701      	adds	r7, #1
 8008208:	601f      	str	r7, [r3, #0]
 800820a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 831d 	beq.w	800884c <_dtoa_r+0xb34>
 8008212:	601e      	str	r6, [r3, #0]
 8008214:	e31a      	b.n	800884c <_dtoa_r+0xb34>
 8008216:	07e2      	lsls	r2, r4, #31
 8008218:	d505      	bpl.n	8008226 <_dtoa_r+0x50e>
 800821a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800821e:	f7f8 fa13 	bl	8000648 <__aeabi_dmul>
 8008222:	3601      	adds	r6, #1
 8008224:	2301      	movs	r3, #1
 8008226:	1064      	asrs	r4, r4, #1
 8008228:	3508      	adds	r5, #8
 800822a:	e73f      	b.n	80080ac <_dtoa_r+0x394>
 800822c:	2602      	movs	r6, #2
 800822e:	e742      	b.n	80080b6 <_dtoa_r+0x39e>
 8008230:	9c07      	ldr	r4, [sp, #28]
 8008232:	9704      	str	r7, [sp, #16]
 8008234:	e761      	b.n	80080fa <_dtoa_r+0x3e2>
 8008236:	4b27      	ldr	r3, [pc, #156]	@ (80082d4 <_dtoa_r+0x5bc>)
 8008238:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800823a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800823e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008242:	4454      	add	r4, sl
 8008244:	2900      	cmp	r1, #0
 8008246:	d053      	beq.n	80082f0 <_dtoa_r+0x5d8>
 8008248:	4928      	ldr	r1, [pc, #160]	@ (80082ec <_dtoa_r+0x5d4>)
 800824a:	2000      	movs	r0, #0
 800824c:	f7f8 fb26 	bl	800089c <__aeabi_ddiv>
 8008250:	4633      	mov	r3, r6
 8008252:	462a      	mov	r2, r5
 8008254:	f7f8 f840 	bl	80002d8 <__aeabi_dsub>
 8008258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800825c:	4656      	mov	r6, sl
 800825e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008262:	f7f8 fca1 	bl	8000ba8 <__aeabi_d2iz>
 8008266:	4605      	mov	r5, r0
 8008268:	f7f8 f984 	bl	8000574 <__aeabi_i2d>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008274:	f7f8 f830 	bl	80002d8 <__aeabi_dsub>
 8008278:	3530      	adds	r5, #48	@ 0x30
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008282:	f806 5b01 	strb.w	r5, [r6], #1
 8008286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800828a:	f7f8 fc4f 	bl	8000b2c <__aeabi_dcmplt>
 800828e:	2800      	cmp	r0, #0
 8008290:	d171      	bne.n	8008376 <_dtoa_r+0x65e>
 8008292:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008296:	4911      	ldr	r1, [pc, #68]	@ (80082dc <_dtoa_r+0x5c4>)
 8008298:	2000      	movs	r0, #0
 800829a:	f7f8 f81d 	bl	80002d8 <__aeabi_dsub>
 800829e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082a2:	f7f8 fc43 	bl	8000b2c <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f040 8095 	bne.w	80083d6 <_dtoa_r+0x6be>
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	f43f af50 	beq.w	8008152 <_dtoa_r+0x43a>
 80082b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082b6:	4b0a      	ldr	r3, [pc, #40]	@ (80082e0 <_dtoa_r+0x5c8>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	f7f8 f9c5 	bl	8000648 <__aeabi_dmul>
 80082be:	4b08      	ldr	r3, [pc, #32]	@ (80082e0 <_dtoa_r+0x5c8>)
 80082c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082c4:	2200      	movs	r2, #0
 80082c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ca:	f7f8 f9bd 	bl	8000648 <__aeabi_dmul>
 80082ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d2:	e7c4      	b.n	800825e <_dtoa_r+0x546>
 80082d4:	0800ab70 	.word	0x0800ab70
 80082d8:	0800ab48 	.word	0x0800ab48
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	40240000 	.word	0x40240000
 80082e4:	401c0000 	.word	0x401c0000
 80082e8:	40140000 	.word	0x40140000
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	f7f8 f9a8 	bl	8000648 <__aeabi_dmul>
 80082f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80082fe:	4656      	mov	r6, sl
 8008300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008304:	f7f8 fc50 	bl	8000ba8 <__aeabi_d2iz>
 8008308:	4605      	mov	r5, r0
 800830a:	f7f8 f933 	bl	8000574 <__aeabi_i2d>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008316:	f7f7 ffdf 	bl	80002d8 <__aeabi_dsub>
 800831a:	3530      	adds	r5, #48	@ 0x30
 800831c:	f806 5b01 	strb.w	r5, [r6], #1
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	42a6      	cmp	r6, r4
 8008326:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800832a:	f04f 0200 	mov.w	r2, #0
 800832e:	d124      	bne.n	800837a <_dtoa_r+0x662>
 8008330:	4bac      	ldr	r3, [pc, #688]	@ (80085e4 <_dtoa_r+0x8cc>)
 8008332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008336:	f7f7 ffd1 	bl	80002dc <__adddf3>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008342:	f7f8 fc11 	bl	8000b68 <__aeabi_dcmpgt>
 8008346:	2800      	cmp	r0, #0
 8008348:	d145      	bne.n	80083d6 <_dtoa_r+0x6be>
 800834a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800834e:	49a5      	ldr	r1, [pc, #660]	@ (80085e4 <_dtoa_r+0x8cc>)
 8008350:	2000      	movs	r0, #0
 8008352:	f7f7 ffc1 	bl	80002d8 <__aeabi_dsub>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800835e:	f7f8 fbe5 	bl	8000b2c <__aeabi_dcmplt>
 8008362:	2800      	cmp	r0, #0
 8008364:	f43f aef5 	beq.w	8008152 <_dtoa_r+0x43a>
 8008368:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800836a:	1e73      	subs	r3, r6, #1
 800836c:	9315      	str	r3, [sp, #84]	@ 0x54
 800836e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008372:	2b30      	cmp	r3, #48	@ 0x30
 8008374:	d0f8      	beq.n	8008368 <_dtoa_r+0x650>
 8008376:	9f04      	ldr	r7, [sp, #16]
 8008378:	e73e      	b.n	80081f8 <_dtoa_r+0x4e0>
 800837a:	4b9b      	ldr	r3, [pc, #620]	@ (80085e8 <_dtoa_r+0x8d0>)
 800837c:	f7f8 f964 	bl	8000648 <__aeabi_dmul>
 8008380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008384:	e7bc      	b.n	8008300 <_dtoa_r+0x5e8>
 8008386:	d10c      	bne.n	80083a2 <_dtoa_r+0x68a>
 8008388:	4b98      	ldr	r3, [pc, #608]	@ (80085ec <_dtoa_r+0x8d4>)
 800838a:	2200      	movs	r2, #0
 800838c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008390:	f7f8 f95a 	bl	8000648 <__aeabi_dmul>
 8008394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008398:	f7f8 fbdc 	bl	8000b54 <__aeabi_dcmpge>
 800839c:	2800      	cmp	r0, #0
 800839e:	f000 8157 	beq.w	8008650 <_dtoa_r+0x938>
 80083a2:	2400      	movs	r4, #0
 80083a4:	4625      	mov	r5, r4
 80083a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083a8:	43db      	mvns	r3, r3
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	4656      	mov	r6, sl
 80083ae:	2700      	movs	r7, #0
 80083b0:	4621      	mov	r1, r4
 80083b2:	4658      	mov	r0, fp
 80083b4:	f001 f8b8 	bl	8009528 <_Bfree>
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	d0dc      	beq.n	8008376 <_dtoa_r+0x65e>
 80083bc:	b12f      	cbz	r7, 80083ca <_dtoa_r+0x6b2>
 80083be:	42af      	cmp	r7, r5
 80083c0:	d003      	beq.n	80083ca <_dtoa_r+0x6b2>
 80083c2:	4639      	mov	r1, r7
 80083c4:	4658      	mov	r0, fp
 80083c6:	f001 f8af 	bl	8009528 <_Bfree>
 80083ca:	4629      	mov	r1, r5
 80083cc:	4658      	mov	r0, fp
 80083ce:	f001 f8ab 	bl	8009528 <_Bfree>
 80083d2:	e7d0      	b.n	8008376 <_dtoa_r+0x65e>
 80083d4:	9704      	str	r7, [sp, #16]
 80083d6:	4633      	mov	r3, r6
 80083d8:	461e      	mov	r6, r3
 80083da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083de:	2a39      	cmp	r2, #57	@ 0x39
 80083e0:	d107      	bne.n	80083f2 <_dtoa_r+0x6da>
 80083e2:	459a      	cmp	sl, r3
 80083e4:	d1f8      	bne.n	80083d8 <_dtoa_r+0x6c0>
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	3201      	adds	r2, #1
 80083ea:	9204      	str	r2, [sp, #16]
 80083ec:	2230      	movs	r2, #48	@ 0x30
 80083ee:	f88a 2000 	strb.w	r2, [sl]
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	3201      	adds	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e7bd      	b.n	8008376 <_dtoa_r+0x65e>
 80083fa:	4b7b      	ldr	r3, [pc, #492]	@ (80085e8 <_dtoa_r+0x8d0>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	f7f8 f923 	bl	8000648 <__aeabi_dmul>
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	f7f8 fb85 	bl	8000b18 <__aeabi_dcmpeq>
 800840e:	2800      	cmp	r0, #0
 8008410:	f43f aebb 	beq.w	800818a <_dtoa_r+0x472>
 8008414:	e6f0      	b.n	80081f8 <_dtoa_r+0x4e0>
 8008416:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008418:	2a00      	cmp	r2, #0
 800841a:	f000 80db 	beq.w	80085d4 <_dtoa_r+0x8bc>
 800841e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008420:	2a01      	cmp	r2, #1
 8008422:	f300 80bf 	bgt.w	80085a4 <_dtoa_r+0x88c>
 8008426:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008428:	2a00      	cmp	r2, #0
 800842a:	f000 80b7 	beq.w	800859c <_dtoa_r+0x884>
 800842e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008432:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008434:	4646      	mov	r6, r8
 8008436:	9a08      	ldr	r2, [sp, #32]
 8008438:	2101      	movs	r1, #1
 800843a:	441a      	add	r2, r3
 800843c:	4658      	mov	r0, fp
 800843e:	4498      	add	r8, r3
 8008440:	9208      	str	r2, [sp, #32]
 8008442:	f001 f96f 	bl	8009724 <__i2b>
 8008446:	4605      	mov	r5, r0
 8008448:	b15e      	cbz	r6, 8008462 <_dtoa_r+0x74a>
 800844a:	9b08      	ldr	r3, [sp, #32]
 800844c:	2b00      	cmp	r3, #0
 800844e:	dd08      	ble.n	8008462 <_dtoa_r+0x74a>
 8008450:	42b3      	cmp	r3, r6
 8008452:	9a08      	ldr	r2, [sp, #32]
 8008454:	bfa8      	it	ge
 8008456:	4633      	movge	r3, r6
 8008458:	eba8 0803 	sub.w	r8, r8, r3
 800845c:	1af6      	subs	r6, r6, r3
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	9308      	str	r3, [sp, #32]
 8008462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008464:	b1f3      	cbz	r3, 80084a4 <_dtoa_r+0x78c>
 8008466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80b7 	beq.w	80085dc <_dtoa_r+0x8c4>
 800846e:	b18c      	cbz	r4, 8008494 <_dtoa_r+0x77c>
 8008470:	4629      	mov	r1, r5
 8008472:	4622      	mov	r2, r4
 8008474:	4658      	mov	r0, fp
 8008476:	f001 fa15 	bl	80098a4 <__pow5mult>
 800847a:	464a      	mov	r2, r9
 800847c:	4601      	mov	r1, r0
 800847e:	4605      	mov	r5, r0
 8008480:	4658      	mov	r0, fp
 8008482:	f001 f965 	bl	8009750 <__multiply>
 8008486:	4649      	mov	r1, r9
 8008488:	9004      	str	r0, [sp, #16]
 800848a:	4658      	mov	r0, fp
 800848c:	f001 f84c 	bl	8009528 <_Bfree>
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	4699      	mov	r9, r3
 8008494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008496:	1b1a      	subs	r2, r3, r4
 8008498:	d004      	beq.n	80084a4 <_dtoa_r+0x78c>
 800849a:	4649      	mov	r1, r9
 800849c:	4658      	mov	r0, fp
 800849e:	f001 fa01 	bl	80098a4 <__pow5mult>
 80084a2:	4681      	mov	r9, r0
 80084a4:	2101      	movs	r1, #1
 80084a6:	4658      	mov	r0, fp
 80084a8:	f001 f93c 	bl	8009724 <__i2b>
 80084ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ae:	4604      	mov	r4, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 81cf 	beq.w	8008854 <_dtoa_r+0xb3c>
 80084b6:	461a      	mov	r2, r3
 80084b8:	4601      	mov	r1, r0
 80084ba:	4658      	mov	r0, fp
 80084bc:	f001 f9f2 	bl	80098a4 <__pow5mult>
 80084c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	4604      	mov	r4, r0
 80084c6:	f300 8095 	bgt.w	80085f4 <_dtoa_r+0x8dc>
 80084ca:	9b02      	ldr	r3, [sp, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 8087 	bne.w	80085e0 <_dtoa_r+0x8c8>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 8089 	bne.w	80085f0 <_dtoa_r+0x8d8>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084e4:	0d1b      	lsrs	r3, r3, #20
 80084e6:	051b      	lsls	r3, r3, #20
 80084e8:	b12b      	cbz	r3, 80084f6 <_dtoa_r+0x7de>
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	3301      	adds	r3, #1
 80084ee:	9308      	str	r3, [sp, #32]
 80084f0:	f108 0801 	add.w	r8, r8, #1
 80084f4:	2301      	movs	r3, #1
 80084f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 81b0 	beq.w	8008860 <_dtoa_r+0xb48>
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008506:	6918      	ldr	r0, [r3, #16]
 8008508:	f001 f8c0 	bl	800968c <__hi0bits>
 800850c:	f1c0 0020 	rsb	r0, r0, #32
 8008510:	9b08      	ldr	r3, [sp, #32]
 8008512:	4418      	add	r0, r3
 8008514:	f010 001f 	ands.w	r0, r0, #31
 8008518:	d077      	beq.n	800860a <_dtoa_r+0x8f2>
 800851a:	f1c0 0320 	rsb	r3, r0, #32
 800851e:	2b04      	cmp	r3, #4
 8008520:	dd6b      	ble.n	80085fa <_dtoa_r+0x8e2>
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	f1c0 001c 	rsb	r0, r0, #28
 8008528:	4403      	add	r3, r0
 800852a:	4480      	add	r8, r0
 800852c:	4406      	add	r6, r0
 800852e:	9308      	str	r3, [sp, #32]
 8008530:	f1b8 0f00 	cmp.w	r8, #0
 8008534:	dd05      	ble.n	8008542 <_dtoa_r+0x82a>
 8008536:	4649      	mov	r1, r9
 8008538:	4642      	mov	r2, r8
 800853a:	4658      	mov	r0, fp
 800853c:	f001 fa0c 	bl	8009958 <__lshift>
 8008540:	4681      	mov	r9, r0
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	2b00      	cmp	r3, #0
 8008546:	dd05      	ble.n	8008554 <_dtoa_r+0x83c>
 8008548:	4621      	mov	r1, r4
 800854a:	461a      	mov	r2, r3
 800854c:	4658      	mov	r0, fp
 800854e:	f001 fa03 	bl	8009958 <__lshift>
 8008552:	4604      	mov	r4, r0
 8008554:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008556:	2b00      	cmp	r3, #0
 8008558:	d059      	beq.n	800860e <_dtoa_r+0x8f6>
 800855a:	4621      	mov	r1, r4
 800855c:	4648      	mov	r0, r9
 800855e:	f001 fa67 	bl	8009a30 <__mcmp>
 8008562:	2800      	cmp	r0, #0
 8008564:	da53      	bge.n	800860e <_dtoa_r+0x8f6>
 8008566:	1e7b      	subs	r3, r7, #1
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	4649      	mov	r1, r9
 800856c:	2300      	movs	r3, #0
 800856e:	220a      	movs	r2, #10
 8008570:	4658      	mov	r0, fp
 8008572:	f000 fffb 	bl	800956c <__multadd>
 8008576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008578:	4681      	mov	r9, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 8172 	beq.w	8008864 <_dtoa_r+0xb4c>
 8008580:	2300      	movs	r3, #0
 8008582:	4629      	mov	r1, r5
 8008584:	220a      	movs	r2, #10
 8008586:	4658      	mov	r0, fp
 8008588:	f000 fff0 	bl	800956c <__multadd>
 800858c:	9b00      	ldr	r3, [sp, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	4605      	mov	r5, r0
 8008592:	dc67      	bgt.n	8008664 <_dtoa_r+0x94c>
 8008594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008596:	2b02      	cmp	r3, #2
 8008598:	dc41      	bgt.n	800861e <_dtoa_r+0x906>
 800859a:	e063      	b.n	8008664 <_dtoa_r+0x94c>
 800859c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800859e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80085a2:	e746      	b.n	8008432 <_dtoa_r+0x71a>
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	1e5c      	subs	r4, r3, #1
 80085a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085aa:	42a3      	cmp	r3, r4
 80085ac:	bfbf      	itttt	lt
 80085ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80085b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80085b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80085b4:	1ae3      	sublt	r3, r4, r3
 80085b6:	bfb4      	ite	lt
 80085b8:	18d2      	addlt	r2, r2, r3
 80085ba:	1b1c      	subge	r4, r3, r4
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	bfbc      	itt	lt
 80085c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80085c2:	2400      	movlt	r4, #0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfb5      	itete	lt
 80085c8:	eba8 0603 	sublt.w	r6, r8, r3
 80085cc:	9b07      	ldrge	r3, [sp, #28]
 80085ce:	2300      	movlt	r3, #0
 80085d0:	4646      	movge	r6, r8
 80085d2:	e730      	b.n	8008436 <_dtoa_r+0x71e>
 80085d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80085d8:	4646      	mov	r6, r8
 80085da:	e735      	b.n	8008448 <_dtoa_r+0x730>
 80085dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085de:	e75c      	b.n	800849a <_dtoa_r+0x782>
 80085e0:	2300      	movs	r3, #0
 80085e2:	e788      	b.n	80084f6 <_dtoa_r+0x7de>
 80085e4:	3fe00000 	.word	0x3fe00000
 80085e8:	40240000 	.word	0x40240000
 80085ec:	40140000 	.word	0x40140000
 80085f0:	9b02      	ldr	r3, [sp, #8]
 80085f2:	e780      	b.n	80084f6 <_dtoa_r+0x7de>
 80085f4:	2300      	movs	r3, #0
 80085f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f8:	e782      	b.n	8008500 <_dtoa_r+0x7e8>
 80085fa:	d099      	beq.n	8008530 <_dtoa_r+0x818>
 80085fc:	9a08      	ldr	r2, [sp, #32]
 80085fe:	331c      	adds	r3, #28
 8008600:	441a      	add	r2, r3
 8008602:	4498      	add	r8, r3
 8008604:	441e      	add	r6, r3
 8008606:	9208      	str	r2, [sp, #32]
 8008608:	e792      	b.n	8008530 <_dtoa_r+0x818>
 800860a:	4603      	mov	r3, r0
 800860c:	e7f6      	b.n	80085fc <_dtoa_r+0x8e4>
 800860e:	9b07      	ldr	r3, [sp, #28]
 8008610:	9704      	str	r7, [sp, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	dc20      	bgt.n	8008658 <_dtoa_r+0x940>
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861a:	2b02      	cmp	r3, #2
 800861c:	dd1e      	ble.n	800865c <_dtoa_r+0x944>
 800861e:	9b00      	ldr	r3, [sp, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f aec0 	bne.w	80083a6 <_dtoa_r+0x68e>
 8008626:	4621      	mov	r1, r4
 8008628:	2205      	movs	r2, #5
 800862a:	4658      	mov	r0, fp
 800862c:	f000 ff9e 	bl	800956c <__multadd>
 8008630:	4601      	mov	r1, r0
 8008632:	4604      	mov	r4, r0
 8008634:	4648      	mov	r0, r9
 8008636:	f001 f9fb 	bl	8009a30 <__mcmp>
 800863a:	2800      	cmp	r0, #0
 800863c:	f77f aeb3 	ble.w	80083a6 <_dtoa_r+0x68e>
 8008640:	4656      	mov	r6, sl
 8008642:	2331      	movs	r3, #49	@ 0x31
 8008644:	f806 3b01 	strb.w	r3, [r6], #1
 8008648:	9b04      	ldr	r3, [sp, #16]
 800864a:	3301      	adds	r3, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	e6ae      	b.n	80083ae <_dtoa_r+0x696>
 8008650:	9c07      	ldr	r4, [sp, #28]
 8008652:	9704      	str	r7, [sp, #16]
 8008654:	4625      	mov	r5, r4
 8008656:	e7f3      	b.n	8008640 <_dtoa_r+0x928>
 8008658:	9b07      	ldr	r3, [sp, #28]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8104 	beq.w	800886c <_dtoa_r+0xb54>
 8008664:	2e00      	cmp	r6, #0
 8008666:	dd05      	ble.n	8008674 <_dtoa_r+0x95c>
 8008668:	4629      	mov	r1, r5
 800866a:	4632      	mov	r2, r6
 800866c:	4658      	mov	r0, fp
 800866e:	f001 f973 	bl	8009958 <__lshift>
 8008672:	4605      	mov	r5, r0
 8008674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008676:	2b00      	cmp	r3, #0
 8008678:	d05a      	beq.n	8008730 <_dtoa_r+0xa18>
 800867a:	6869      	ldr	r1, [r5, #4]
 800867c:	4658      	mov	r0, fp
 800867e:	f000 ff13 	bl	80094a8 <_Balloc>
 8008682:	4606      	mov	r6, r0
 8008684:	b928      	cbnz	r0, 8008692 <_dtoa_r+0x97a>
 8008686:	4b84      	ldr	r3, [pc, #528]	@ (8008898 <_dtoa_r+0xb80>)
 8008688:	4602      	mov	r2, r0
 800868a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800868e:	f7ff bb5a 	b.w	8007d46 <_dtoa_r+0x2e>
 8008692:	692a      	ldr	r2, [r5, #16]
 8008694:	3202      	adds	r2, #2
 8008696:	0092      	lsls	r2, r2, #2
 8008698:	f105 010c 	add.w	r1, r5, #12
 800869c:	300c      	adds	r0, #12
 800869e:	f7ff fa92 	bl	8007bc6 <memcpy>
 80086a2:	2201      	movs	r2, #1
 80086a4:	4631      	mov	r1, r6
 80086a6:	4658      	mov	r0, fp
 80086a8:	f001 f956 	bl	8009958 <__lshift>
 80086ac:	f10a 0301 	add.w	r3, sl, #1
 80086b0:	9307      	str	r3, [sp, #28]
 80086b2:	9b00      	ldr	r3, [sp, #0]
 80086b4:	4453      	add	r3, sl
 80086b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086b8:	9b02      	ldr	r3, [sp, #8]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	462f      	mov	r7, r5
 80086c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c2:	4605      	mov	r5, r0
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	4621      	mov	r1, r4
 80086c8:	3b01      	subs	r3, #1
 80086ca:	4648      	mov	r0, r9
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	f7ff fa99 	bl	8007c04 <quorem>
 80086d2:	4639      	mov	r1, r7
 80086d4:	9002      	str	r0, [sp, #8]
 80086d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086da:	4648      	mov	r0, r9
 80086dc:	f001 f9a8 	bl	8009a30 <__mcmp>
 80086e0:	462a      	mov	r2, r5
 80086e2:	9008      	str	r0, [sp, #32]
 80086e4:	4621      	mov	r1, r4
 80086e6:	4658      	mov	r0, fp
 80086e8:	f001 f9be 	bl	8009a68 <__mdiff>
 80086ec:	68c2      	ldr	r2, [r0, #12]
 80086ee:	4606      	mov	r6, r0
 80086f0:	bb02      	cbnz	r2, 8008734 <_dtoa_r+0xa1c>
 80086f2:	4601      	mov	r1, r0
 80086f4:	4648      	mov	r0, r9
 80086f6:	f001 f99b 	bl	8009a30 <__mcmp>
 80086fa:	4602      	mov	r2, r0
 80086fc:	4631      	mov	r1, r6
 80086fe:	4658      	mov	r0, fp
 8008700:	920e      	str	r2, [sp, #56]	@ 0x38
 8008702:	f000 ff11 	bl	8009528 <_Bfree>
 8008706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800870a:	9e07      	ldr	r6, [sp, #28]
 800870c:	ea43 0102 	orr.w	r1, r3, r2
 8008710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008712:	4319      	orrs	r1, r3
 8008714:	d110      	bne.n	8008738 <_dtoa_r+0xa20>
 8008716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800871a:	d029      	beq.n	8008770 <_dtoa_r+0xa58>
 800871c:	9b08      	ldr	r3, [sp, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	dd02      	ble.n	8008728 <_dtoa_r+0xa10>
 8008722:	9b02      	ldr	r3, [sp, #8]
 8008724:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008728:	9b00      	ldr	r3, [sp, #0]
 800872a:	f883 8000 	strb.w	r8, [r3]
 800872e:	e63f      	b.n	80083b0 <_dtoa_r+0x698>
 8008730:	4628      	mov	r0, r5
 8008732:	e7bb      	b.n	80086ac <_dtoa_r+0x994>
 8008734:	2201      	movs	r2, #1
 8008736:	e7e1      	b.n	80086fc <_dtoa_r+0x9e4>
 8008738:	9b08      	ldr	r3, [sp, #32]
 800873a:	2b00      	cmp	r3, #0
 800873c:	db04      	blt.n	8008748 <_dtoa_r+0xa30>
 800873e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008740:	430b      	orrs	r3, r1
 8008742:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008744:	430b      	orrs	r3, r1
 8008746:	d120      	bne.n	800878a <_dtoa_r+0xa72>
 8008748:	2a00      	cmp	r2, #0
 800874a:	dded      	ble.n	8008728 <_dtoa_r+0xa10>
 800874c:	4649      	mov	r1, r9
 800874e:	2201      	movs	r2, #1
 8008750:	4658      	mov	r0, fp
 8008752:	f001 f901 	bl	8009958 <__lshift>
 8008756:	4621      	mov	r1, r4
 8008758:	4681      	mov	r9, r0
 800875a:	f001 f969 	bl	8009a30 <__mcmp>
 800875e:	2800      	cmp	r0, #0
 8008760:	dc03      	bgt.n	800876a <_dtoa_r+0xa52>
 8008762:	d1e1      	bne.n	8008728 <_dtoa_r+0xa10>
 8008764:	f018 0f01 	tst.w	r8, #1
 8008768:	d0de      	beq.n	8008728 <_dtoa_r+0xa10>
 800876a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800876e:	d1d8      	bne.n	8008722 <_dtoa_r+0xa0a>
 8008770:	9a00      	ldr	r2, [sp, #0]
 8008772:	2339      	movs	r3, #57	@ 0x39
 8008774:	7013      	strb	r3, [r2, #0]
 8008776:	4633      	mov	r3, r6
 8008778:	461e      	mov	r6, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008780:	2a39      	cmp	r2, #57	@ 0x39
 8008782:	d052      	beq.n	800882a <_dtoa_r+0xb12>
 8008784:	3201      	adds	r2, #1
 8008786:	701a      	strb	r2, [r3, #0]
 8008788:	e612      	b.n	80083b0 <_dtoa_r+0x698>
 800878a:	2a00      	cmp	r2, #0
 800878c:	dd07      	ble.n	800879e <_dtoa_r+0xa86>
 800878e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008792:	d0ed      	beq.n	8008770 <_dtoa_r+0xa58>
 8008794:	9a00      	ldr	r2, [sp, #0]
 8008796:	f108 0301 	add.w	r3, r8, #1
 800879a:	7013      	strb	r3, [r2, #0]
 800879c:	e608      	b.n	80083b0 <_dtoa_r+0x698>
 800879e:	9b07      	ldr	r3, [sp, #28]
 80087a0:	9a07      	ldr	r2, [sp, #28]
 80087a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80087a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d028      	beq.n	80087fe <_dtoa_r+0xae6>
 80087ac:	4649      	mov	r1, r9
 80087ae:	2300      	movs	r3, #0
 80087b0:	220a      	movs	r2, #10
 80087b2:	4658      	mov	r0, fp
 80087b4:	f000 feda 	bl	800956c <__multadd>
 80087b8:	42af      	cmp	r7, r5
 80087ba:	4681      	mov	r9, r0
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	f04f 020a 	mov.w	r2, #10
 80087c4:	4639      	mov	r1, r7
 80087c6:	4658      	mov	r0, fp
 80087c8:	d107      	bne.n	80087da <_dtoa_r+0xac2>
 80087ca:	f000 fecf 	bl	800956c <__multadd>
 80087ce:	4607      	mov	r7, r0
 80087d0:	4605      	mov	r5, r0
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	3301      	adds	r3, #1
 80087d6:	9307      	str	r3, [sp, #28]
 80087d8:	e774      	b.n	80086c4 <_dtoa_r+0x9ac>
 80087da:	f000 fec7 	bl	800956c <__multadd>
 80087de:	4629      	mov	r1, r5
 80087e0:	4607      	mov	r7, r0
 80087e2:	2300      	movs	r3, #0
 80087e4:	220a      	movs	r2, #10
 80087e6:	4658      	mov	r0, fp
 80087e8:	f000 fec0 	bl	800956c <__multadd>
 80087ec:	4605      	mov	r5, r0
 80087ee:	e7f0      	b.n	80087d2 <_dtoa_r+0xaba>
 80087f0:	9b00      	ldr	r3, [sp, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bfcc      	ite	gt
 80087f6:	461e      	movgt	r6, r3
 80087f8:	2601      	movle	r6, #1
 80087fa:	4456      	add	r6, sl
 80087fc:	2700      	movs	r7, #0
 80087fe:	4649      	mov	r1, r9
 8008800:	2201      	movs	r2, #1
 8008802:	4658      	mov	r0, fp
 8008804:	f001 f8a8 	bl	8009958 <__lshift>
 8008808:	4621      	mov	r1, r4
 800880a:	4681      	mov	r9, r0
 800880c:	f001 f910 	bl	8009a30 <__mcmp>
 8008810:	2800      	cmp	r0, #0
 8008812:	dcb0      	bgt.n	8008776 <_dtoa_r+0xa5e>
 8008814:	d102      	bne.n	800881c <_dtoa_r+0xb04>
 8008816:	f018 0f01 	tst.w	r8, #1
 800881a:	d1ac      	bne.n	8008776 <_dtoa_r+0xa5e>
 800881c:	4633      	mov	r3, r6
 800881e:	461e      	mov	r6, r3
 8008820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008824:	2a30      	cmp	r2, #48	@ 0x30
 8008826:	d0fa      	beq.n	800881e <_dtoa_r+0xb06>
 8008828:	e5c2      	b.n	80083b0 <_dtoa_r+0x698>
 800882a:	459a      	cmp	sl, r3
 800882c:	d1a4      	bne.n	8008778 <_dtoa_r+0xa60>
 800882e:	9b04      	ldr	r3, [sp, #16]
 8008830:	3301      	adds	r3, #1
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	2331      	movs	r3, #49	@ 0x31
 8008836:	f88a 3000 	strb.w	r3, [sl]
 800883a:	e5b9      	b.n	80083b0 <_dtoa_r+0x698>
 800883c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800883e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800889c <_dtoa_r+0xb84>
 8008842:	b11b      	cbz	r3, 800884c <_dtoa_r+0xb34>
 8008844:	f10a 0308 	add.w	r3, sl, #8
 8008848:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	4650      	mov	r0, sl
 800884e:	b019      	add	sp, #100	@ 0x64
 8008850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008856:	2b01      	cmp	r3, #1
 8008858:	f77f ae37 	ble.w	80084ca <_dtoa_r+0x7b2>
 800885c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800885e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008860:	2001      	movs	r0, #1
 8008862:	e655      	b.n	8008510 <_dtoa_r+0x7f8>
 8008864:	9b00      	ldr	r3, [sp, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f77f aed6 	ble.w	8008618 <_dtoa_r+0x900>
 800886c:	4656      	mov	r6, sl
 800886e:	4621      	mov	r1, r4
 8008870:	4648      	mov	r0, r9
 8008872:	f7ff f9c7 	bl	8007c04 <quorem>
 8008876:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800887a:	f806 8b01 	strb.w	r8, [r6], #1
 800887e:	9b00      	ldr	r3, [sp, #0]
 8008880:	eba6 020a 	sub.w	r2, r6, sl
 8008884:	4293      	cmp	r3, r2
 8008886:	ddb3      	ble.n	80087f0 <_dtoa_r+0xad8>
 8008888:	4649      	mov	r1, r9
 800888a:	2300      	movs	r3, #0
 800888c:	220a      	movs	r2, #10
 800888e:	4658      	mov	r0, fp
 8008890:	f000 fe6c 	bl	800956c <__multadd>
 8008894:	4681      	mov	r9, r0
 8008896:	e7ea      	b.n	800886e <_dtoa_r+0xb56>
 8008898:	0800aa5d 	.word	0x0800aa5d
 800889c:	0800a9e1 	.word	0x0800a9e1

080088a0 <rshift>:
 80088a0:	6903      	ldr	r3, [r0, #16]
 80088a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088ae:	f100 0414 	add.w	r4, r0, #20
 80088b2:	dd45      	ble.n	8008940 <rshift+0xa0>
 80088b4:	f011 011f 	ands.w	r1, r1, #31
 80088b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088c0:	d10c      	bne.n	80088dc <rshift+0x3c>
 80088c2:	f100 0710 	add.w	r7, r0, #16
 80088c6:	4629      	mov	r1, r5
 80088c8:	42b1      	cmp	r1, r6
 80088ca:	d334      	bcc.n	8008936 <rshift+0x96>
 80088cc:	1a9b      	subs	r3, r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	1eea      	subs	r2, r5, #3
 80088d2:	4296      	cmp	r6, r2
 80088d4:	bf38      	it	cc
 80088d6:	2300      	movcc	r3, #0
 80088d8:	4423      	add	r3, r4
 80088da:	e015      	b.n	8008908 <rshift+0x68>
 80088dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088e0:	f1c1 0820 	rsb	r8, r1, #32
 80088e4:	40cf      	lsrs	r7, r1
 80088e6:	f105 0e04 	add.w	lr, r5, #4
 80088ea:	46a1      	mov	r9, r4
 80088ec:	4576      	cmp	r6, lr
 80088ee:	46f4      	mov	ip, lr
 80088f0:	d815      	bhi.n	800891e <rshift+0x7e>
 80088f2:	1a9a      	subs	r2, r3, r2
 80088f4:	0092      	lsls	r2, r2, #2
 80088f6:	3a04      	subs	r2, #4
 80088f8:	3501      	adds	r5, #1
 80088fa:	42ae      	cmp	r6, r5
 80088fc:	bf38      	it	cc
 80088fe:	2200      	movcc	r2, #0
 8008900:	18a3      	adds	r3, r4, r2
 8008902:	50a7      	str	r7, [r4, r2]
 8008904:	b107      	cbz	r7, 8008908 <rshift+0x68>
 8008906:	3304      	adds	r3, #4
 8008908:	1b1a      	subs	r2, r3, r4
 800890a:	42a3      	cmp	r3, r4
 800890c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008910:	bf08      	it	eq
 8008912:	2300      	moveq	r3, #0
 8008914:	6102      	str	r2, [r0, #16]
 8008916:	bf08      	it	eq
 8008918:	6143      	streq	r3, [r0, #20]
 800891a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800891e:	f8dc c000 	ldr.w	ip, [ip]
 8008922:	fa0c fc08 	lsl.w	ip, ip, r8
 8008926:	ea4c 0707 	orr.w	r7, ip, r7
 800892a:	f849 7b04 	str.w	r7, [r9], #4
 800892e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008932:	40cf      	lsrs	r7, r1
 8008934:	e7da      	b.n	80088ec <rshift+0x4c>
 8008936:	f851 cb04 	ldr.w	ip, [r1], #4
 800893a:	f847 cf04 	str.w	ip, [r7, #4]!
 800893e:	e7c3      	b.n	80088c8 <rshift+0x28>
 8008940:	4623      	mov	r3, r4
 8008942:	e7e1      	b.n	8008908 <rshift+0x68>

08008944 <__hexdig_fun>:
 8008944:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008948:	2b09      	cmp	r3, #9
 800894a:	d802      	bhi.n	8008952 <__hexdig_fun+0xe>
 800894c:	3820      	subs	r0, #32
 800894e:	b2c0      	uxtb	r0, r0
 8008950:	4770      	bx	lr
 8008952:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008956:	2b05      	cmp	r3, #5
 8008958:	d801      	bhi.n	800895e <__hexdig_fun+0x1a>
 800895a:	3847      	subs	r0, #71	@ 0x47
 800895c:	e7f7      	b.n	800894e <__hexdig_fun+0xa>
 800895e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008962:	2b05      	cmp	r3, #5
 8008964:	d801      	bhi.n	800896a <__hexdig_fun+0x26>
 8008966:	3827      	subs	r0, #39	@ 0x27
 8008968:	e7f1      	b.n	800894e <__hexdig_fun+0xa>
 800896a:	2000      	movs	r0, #0
 800896c:	4770      	bx	lr
	...

08008970 <__gethex>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	b085      	sub	sp, #20
 8008976:	468a      	mov	sl, r1
 8008978:	9302      	str	r3, [sp, #8]
 800897a:	680b      	ldr	r3, [r1, #0]
 800897c:	9001      	str	r0, [sp, #4]
 800897e:	4690      	mov	r8, r2
 8008980:	1c9c      	adds	r4, r3, #2
 8008982:	46a1      	mov	r9, r4
 8008984:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008988:	2830      	cmp	r0, #48	@ 0x30
 800898a:	d0fa      	beq.n	8008982 <__gethex+0x12>
 800898c:	eba9 0303 	sub.w	r3, r9, r3
 8008990:	f1a3 0b02 	sub.w	fp, r3, #2
 8008994:	f7ff ffd6 	bl	8008944 <__hexdig_fun>
 8008998:	4605      	mov	r5, r0
 800899a:	2800      	cmp	r0, #0
 800899c:	d168      	bne.n	8008a70 <__gethex+0x100>
 800899e:	49a0      	ldr	r1, [pc, #640]	@ (8008c20 <__gethex+0x2b0>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	4648      	mov	r0, r9
 80089a4:	f7ff f8c4 	bl	8007b30 <strncmp>
 80089a8:	4607      	mov	r7, r0
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d167      	bne.n	8008a7e <__gethex+0x10e>
 80089ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 80089b2:	4626      	mov	r6, r4
 80089b4:	f7ff ffc6 	bl	8008944 <__hexdig_fun>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d062      	beq.n	8008a82 <__gethex+0x112>
 80089bc:	4623      	mov	r3, r4
 80089be:	7818      	ldrb	r0, [r3, #0]
 80089c0:	2830      	cmp	r0, #48	@ 0x30
 80089c2:	4699      	mov	r9, r3
 80089c4:	f103 0301 	add.w	r3, r3, #1
 80089c8:	d0f9      	beq.n	80089be <__gethex+0x4e>
 80089ca:	f7ff ffbb 	bl	8008944 <__hexdig_fun>
 80089ce:	fab0 f580 	clz	r5, r0
 80089d2:	096d      	lsrs	r5, r5, #5
 80089d4:	f04f 0b01 	mov.w	fp, #1
 80089d8:	464a      	mov	r2, r9
 80089da:	4616      	mov	r6, r2
 80089dc:	3201      	adds	r2, #1
 80089de:	7830      	ldrb	r0, [r6, #0]
 80089e0:	f7ff ffb0 	bl	8008944 <__hexdig_fun>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d1f8      	bne.n	80089da <__gethex+0x6a>
 80089e8:	498d      	ldr	r1, [pc, #564]	@ (8008c20 <__gethex+0x2b0>)
 80089ea:	2201      	movs	r2, #1
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7ff f89f 	bl	8007b30 <strncmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d13f      	bne.n	8008a76 <__gethex+0x106>
 80089f6:	b944      	cbnz	r4, 8008a0a <__gethex+0x9a>
 80089f8:	1c74      	adds	r4, r6, #1
 80089fa:	4622      	mov	r2, r4
 80089fc:	4616      	mov	r6, r2
 80089fe:	3201      	adds	r2, #1
 8008a00:	7830      	ldrb	r0, [r6, #0]
 8008a02:	f7ff ff9f 	bl	8008944 <__hexdig_fun>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d1f8      	bne.n	80089fc <__gethex+0x8c>
 8008a0a:	1ba4      	subs	r4, r4, r6
 8008a0c:	00a7      	lsls	r7, r4, #2
 8008a0e:	7833      	ldrb	r3, [r6, #0]
 8008a10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a14:	2b50      	cmp	r3, #80	@ 0x50
 8008a16:	d13e      	bne.n	8008a96 <__gethex+0x126>
 8008a18:	7873      	ldrb	r3, [r6, #1]
 8008a1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a1c:	d033      	beq.n	8008a86 <__gethex+0x116>
 8008a1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a20:	d034      	beq.n	8008a8c <__gethex+0x11c>
 8008a22:	1c71      	adds	r1, r6, #1
 8008a24:	2400      	movs	r4, #0
 8008a26:	7808      	ldrb	r0, [r1, #0]
 8008a28:	f7ff ff8c 	bl	8008944 <__hexdig_fun>
 8008a2c:	1e43      	subs	r3, r0, #1
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b18      	cmp	r3, #24
 8008a32:	d830      	bhi.n	8008a96 <__gethex+0x126>
 8008a34:	f1a0 0210 	sub.w	r2, r0, #16
 8008a38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a3c:	f7ff ff82 	bl	8008944 <__hexdig_fun>
 8008a40:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008a44:	fa5f fc8c 	uxtb.w	ip, ip
 8008a48:	f1bc 0f18 	cmp.w	ip, #24
 8008a4c:	f04f 030a 	mov.w	r3, #10
 8008a50:	d91e      	bls.n	8008a90 <__gethex+0x120>
 8008a52:	b104      	cbz	r4, 8008a56 <__gethex+0xe6>
 8008a54:	4252      	negs	r2, r2
 8008a56:	4417      	add	r7, r2
 8008a58:	f8ca 1000 	str.w	r1, [sl]
 8008a5c:	b1ed      	cbz	r5, 8008a9a <__gethex+0x12a>
 8008a5e:	f1bb 0f00 	cmp.w	fp, #0
 8008a62:	bf0c      	ite	eq
 8008a64:	2506      	moveq	r5, #6
 8008a66:	2500      	movne	r5, #0
 8008a68:	4628      	mov	r0, r5
 8008a6a:	b005      	add	sp, #20
 8008a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a70:	2500      	movs	r5, #0
 8008a72:	462c      	mov	r4, r5
 8008a74:	e7b0      	b.n	80089d8 <__gethex+0x68>
 8008a76:	2c00      	cmp	r4, #0
 8008a78:	d1c7      	bne.n	8008a0a <__gethex+0x9a>
 8008a7a:	4627      	mov	r7, r4
 8008a7c:	e7c7      	b.n	8008a0e <__gethex+0x9e>
 8008a7e:	464e      	mov	r6, r9
 8008a80:	462f      	mov	r7, r5
 8008a82:	2501      	movs	r5, #1
 8008a84:	e7c3      	b.n	8008a0e <__gethex+0x9e>
 8008a86:	2400      	movs	r4, #0
 8008a88:	1cb1      	adds	r1, r6, #2
 8008a8a:	e7cc      	b.n	8008a26 <__gethex+0xb6>
 8008a8c:	2401      	movs	r4, #1
 8008a8e:	e7fb      	b.n	8008a88 <__gethex+0x118>
 8008a90:	fb03 0002 	mla	r0, r3, r2, r0
 8008a94:	e7ce      	b.n	8008a34 <__gethex+0xc4>
 8008a96:	4631      	mov	r1, r6
 8008a98:	e7de      	b.n	8008a58 <__gethex+0xe8>
 8008a9a:	eba6 0309 	sub.w	r3, r6, r9
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	2b07      	cmp	r3, #7
 8008aa4:	dc0a      	bgt.n	8008abc <__gethex+0x14c>
 8008aa6:	9801      	ldr	r0, [sp, #4]
 8008aa8:	f000 fcfe 	bl	80094a8 <_Balloc>
 8008aac:	4604      	mov	r4, r0
 8008aae:	b940      	cbnz	r0, 8008ac2 <__gethex+0x152>
 8008ab0:	4b5c      	ldr	r3, [pc, #368]	@ (8008c24 <__gethex+0x2b4>)
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	21e4      	movs	r1, #228	@ 0xe4
 8008ab6:	485c      	ldr	r0, [pc, #368]	@ (8008c28 <__gethex+0x2b8>)
 8008ab8:	f001 fa96 	bl	8009fe8 <__assert_func>
 8008abc:	3101      	adds	r1, #1
 8008abe:	105b      	asrs	r3, r3, #1
 8008ac0:	e7ef      	b.n	8008aa2 <__gethex+0x132>
 8008ac2:	f100 0a14 	add.w	sl, r0, #20
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	4655      	mov	r5, sl
 8008aca:	469b      	mov	fp, r3
 8008acc:	45b1      	cmp	r9, r6
 8008ace:	d337      	bcc.n	8008b40 <__gethex+0x1d0>
 8008ad0:	f845 bb04 	str.w	fp, [r5], #4
 8008ad4:	eba5 050a 	sub.w	r5, r5, sl
 8008ad8:	10ad      	asrs	r5, r5, #2
 8008ada:	6125      	str	r5, [r4, #16]
 8008adc:	4658      	mov	r0, fp
 8008ade:	f000 fdd5 	bl	800968c <__hi0bits>
 8008ae2:	016d      	lsls	r5, r5, #5
 8008ae4:	f8d8 6000 	ldr.w	r6, [r8]
 8008ae8:	1a2d      	subs	r5, r5, r0
 8008aea:	42b5      	cmp	r5, r6
 8008aec:	dd54      	ble.n	8008b98 <__gethex+0x228>
 8008aee:	1bad      	subs	r5, r5, r6
 8008af0:	4629      	mov	r1, r5
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 f969 	bl	8009dca <__any_on>
 8008af8:	4681      	mov	r9, r0
 8008afa:	b178      	cbz	r0, 8008b1c <__gethex+0x1ac>
 8008afc:	1e6b      	subs	r3, r5, #1
 8008afe:	1159      	asrs	r1, r3, #5
 8008b00:	f003 021f 	and.w	r2, r3, #31
 8008b04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b08:	f04f 0901 	mov.w	r9, #1
 8008b0c:	fa09 f202 	lsl.w	r2, r9, r2
 8008b10:	420a      	tst	r2, r1
 8008b12:	d003      	beq.n	8008b1c <__gethex+0x1ac>
 8008b14:	454b      	cmp	r3, r9
 8008b16:	dc36      	bgt.n	8008b86 <__gethex+0x216>
 8008b18:	f04f 0902 	mov.w	r9, #2
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f7ff febe 	bl	80088a0 <rshift>
 8008b24:	442f      	add	r7, r5
 8008b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b2a:	42bb      	cmp	r3, r7
 8008b2c:	da42      	bge.n	8008bb4 <__gethex+0x244>
 8008b2e:	9801      	ldr	r0, [sp, #4]
 8008b30:	4621      	mov	r1, r4
 8008b32:	f000 fcf9 	bl	8009528 <_Bfree>
 8008b36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	25a3      	movs	r5, #163	@ 0xa3
 8008b3e:	e793      	b.n	8008a68 <__gethex+0xf8>
 8008b40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008b44:	2a2e      	cmp	r2, #46	@ 0x2e
 8008b46:	d012      	beq.n	8008b6e <__gethex+0x1fe>
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	d104      	bne.n	8008b56 <__gethex+0x1e6>
 8008b4c:	f845 bb04 	str.w	fp, [r5], #4
 8008b50:	f04f 0b00 	mov.w	fp, #0
 8008b54:	465b      	mov	r3, fp
 8008b56:	7830      	ldrb	r0, [r6, #0]
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	f7ff fef3 	bl	8008944 <__hexdig_fun>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	f000 000f 	and.w	r0, r0, #15
 8008b64:	4098      	lsls	r0, r3
 8008b66:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	e7ae      	b.n	8008acc <__gethex+0x15c>
 8008b6e:	45b1      	cmp	r9, r6
 8008b70:	d8ea      	bhi.n	8008b48 <__gethex+0x1d8>
 8008b72:	492b      	ldr	r1, [pc, #172]	@ (8008c20 <__gethex+0x2b0>)
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	2201      	movs	r2, #1
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7fe ffd9 	bl	8007b30 <strncmp>
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d1e1      	bne.n	8008b48 <__gethex+0x1d8>
 8008b84:	e7a2      	b.n	8008acc <__gethex+0x15c>
 8008b86:	1ea9      	subs	r1, r5, #2
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f001 f91e 	bl	8009dca <__any_on>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d0c2      	beq.n	8008b18 <__gethex+0x1a8>
 8008b92:	f04f 0903 	mov.w	r9, #3
 8008b96:	e7c1      	b.n	8008b1c <__gethex+0x1ac>
 8008b98:	da09      	bge.n	8008bae <__gethex+0x23e>
 8008b9a:	1b75      	subs	r5, r6, r5
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	9801      	ldr	r0, [sp, #4]
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	f000 fed9 	bl	8009958 <__lshift>
 8008ba6:	1b7f      	subs	r7, r7, r5
 8008ba8:	4604      	mov	r4, r0
 8008baa:	f100 0a14 	add.w	sl, r0, #20
 8008bae:	f04f 0900 	mov.w	r9, #0
 8008bb2:	e7b8      	b.n	8008b26 <__gethex+0x1b6>
 8008bb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bb8:	42bd      	cmp	r5, r7
 8008bba:	dd6f      	ble.n	8008c9c <__gethex+0x32c>
 8008bbc:	1bed      	subs	r5, r5, r7
 8008bbe:	42ae      	cmp	r6, r5
 8008bc0:	dc34      	bgt.n	8008c2c <__gethex+0x2bc>
 8008bc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d022      	beq.n	8008c10 <__gethex+0x2a0>
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d024      	beq.n	8008c18 <__gethex+0x2a8>
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d115      	bne.n	8008bfe <__gethex+0x28e>
 8008bd2:	42ae      	cmp	r6, r5
 8008bd4:	d113      	bne.n	8008bfe <__gethex+0x28e>
 8008bd6:	2e01      	cmp	r6, #1
 8008bd8:	d10b      	bne.n	8008bf2 <__gethex+0x282>
 8008bda:	9a02      	ldr	r2, [sp, #8]
 8008bdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	2301      	movs	r3, #1
 8008be4:	6123      	str	r3, [r4, #16]
 8008be6:	f8ca 3000 	str.w	r3, [sl]
 8008bea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bec:	2562      	movs	r5, #98	@ 0x62
 8008bee:	601c      	str	r4, [r3, #0]
 8008bf0:	e73a      	b.n	8008a68 <__gethex+0xf8>
 8008bf2:	1e71      	subs	r1, r6, #1
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f001 f8e8 	bl	8009dca <__any_on>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d1ed      	bne.n	8008bda <__gethex+0x26a>
 8008bfe:	9801      	ldr	r0, [sp, #4]
 8008c00:	4621      	mov	r1, r4
 8008c02:	f000 fc91 	bl	8009528 <_Bfree>
 8008c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c08:	2300      	movs	r3, #0
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	2550      	movs	r5, #80	@ 0x50
 8008c0e:	e72b      	b.n	8008a68 <__gethex+0xf8>
 8008c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1f3      	bne.n	8008bfe <__gethex+0x28e>
 8008c16:	e7e0      	b.n	8008bda <__gethex+0x26a>
 8008c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1dd      	bne.n	8008bda <__gethex+0x26a>
 8008c1e:	e7ee      	b.n	8008bfe <__gethex+0x28e>
 8008c20:	0800a885 	.word	0x0800a885
 8008c24:	0800aa5d 	.word	0x0800aa5d
 8008c28:	0800aa6e 	.word	0x0800aa6e
 8008c2c:	1e6f      	subs	r7, r5, #1
 8008c2e:	f1b9 0f00 	cmp.w	r9, #0
 8008c32:	d130      	bne.n	8008c96 <__gethex+0x326>
 8008c34:	b127      	cbz	r7, 8008c40 <__gethex+0x2d0>
 8008c36:	4639      	mov	r1, r7
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f001 f8c6 	bl	8009dca <__any_on>
 8008c3e:	4681      	mov	r9, r0
 8008c40:	117a      	asrs	r2, r7, #5
 8008c42:	2301      	movs	r3, #1
 8008c44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c48:	f007 071f 	and.w	r7, r7, #31
 8008c4c:	40bb      	lsls	r3, r7
 8008c4e:	4213      	tst	r3, r2
 8008c50:	4629      	mov	r1, r5
 8008c52:	4620      	mov	r0, r4
 8008c54:	bf18      	it	ne
 8008c56:	f049 0902 	orrne.w	r9, r9, #2
 8008c5a:	f7ff fe21 	bl	80088a0 <rshift>
 8008c5e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008c62:	1b76      	subs	r6, r6, r5
 8008c64:	2502      	movs	r5, #2
 8008c66:	f1b9 0f00 	cmp.w	r9, #0
 8008c6a:	d047      	beq.n	8008cfc <__gethex+0x38c>
 8008c6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d015      	beq.n	8008ca0 <__gethex+0x330>
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d017      	beq.n	8008ca8 <__gethex+0x338>
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d109      	bne.n	8008c90 <__gethex+0x320>
 8008c7c:	f019 0f02 	tst.w	r9, #2
 8008c80:	d006      	beq.n	8008c90 <__gethex+0x320>
 8008c82:	f8da 3000 	ldr.w	r3, [sl]
 8008c86:	ea49 0903 	orr.w	r9, r9, r3
 8008c8a:	f019 0f01 	tst.w	r9, #1
 8008c8e:	d10e      	bne.n	8008cae <__gethex+0x33e>
 8008c90:	f045 0510 	orr.w	r5, r5, #16
 8008c94:	e032      	b.n	8008cfc <__gethex+0x38c>
 8008c96:	f04f 0901 	mov.w	r9, #1
 8008c9a:	e7d1      	b.n	8008c40 <__gethex+0x2d0>
 8008c9c:	2501      	movs	r5, #1
 8008c9e:	e7e2      	b.n	8008c66 <__gethex+0x2f6>
 8008ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ca2:	f1c3 0301 	rsb	r3, r3, #1
 8008ca6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0f0      	beq.n	8008c90 <__gethex+0x320>
 8008cae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008cb2:	f104 0314 	add.w	r3, r4, #20
 8008cb6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008cba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008cbe:	f04f 0c00 	mov.w	ip, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008ccc:	d01b      	beq.n	8008d06 <__gethex+0x396>
 8008cce:	3201      	adds	r2, #1
 8008cd0:	6002      	str	r2, [r0, #0]
 8008cd2:	2d02      	cmp	r5, #2
 8008cd4:	f104 0314 	add.w	r3, r4, #20
 8008cd8:	d13c      	bne.n	8008d54 <__gethex+0x3e4>
 8008cda:	f8d8 2000 	ldr.w	r2, [r8]
 8008cde:	3a01      	subs	r2, #1
 8008ce0:	42b2      	cmp	r2, r6
 8008ce2:	d109      	bne.n	8008cf8 <__gethex+0x388>
 8008ce4:	1171      	asrs	r1, r6, #5
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cec:	f006 061f 	and.w	r6, r6, #31
 8008cf0:	fa02 f606 	lsl.w	r6, r2, r6
 8008cf4:	421e      	tst	r6, r3
 8008cf6:	d13a      	bne.n	8008d6e <__gethex+0x3fe>
 8008cf8:	f045 0520 	orr.w	r5, r5, #32
 8008cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cfe:	601c      	str	r4, [r3, #0]
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	601f      	str	r7, [r3, #0]
 8008d04:	e6b0      	b.n	8008a68 <__gethex+0xf8>
 8008d06:	4299      	cmp	r1, r3
 8008d08:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d0c:	d8d9      	bhi.n	8008cc2 <__gethex+0x352>
 8008d0e:	68a3      	ldr	r3, [r4, #8]
 8008d10:	459b      	cmp	fp, r3
 8008d12:	db17      	blt.n	8008d44 <__gethex+0x3d4>
 8008d14:	6861      	ldr	r1, [r4, #4]
 8008d16:	9801      	ldr	r0, [sp, #4]
 8008d18:	3101      	adds	r1, #1
 8008d1a:	f000 fbc5 	bl	80094a8 <_Balloc>
 8008d1e:	4681      	mov	r9, r0
 8008d20:	b918      	cbnz	r0, 8008d2a <__gethex+0x3ba>
 8008d22:	4b1a      	ldr	r3, [pc, #104]	@ (8008d8c <__gethex+0x41c>)
 8008d24:	4602      	mov	r2, r0
 8008d26:	2184      	movs	r1, #132	@ 0x84
 8008d28:	e6c5      	b.n	8008ab6 <__gethex+0x146>
 8008d2a:	6922      	ldr	r2, [r4, #16]
 8008d2c:	3202      	adds	r2, #2
 8008d2e:	f104 010c 	add.w	r1, r4, #12
 8008d32:	0092      	lsls	r2, r2, #2
 8008d34:	300c      	adds	r0, #12
 8008d36:	f7fe ff46 	bl	8007bc6 <memcpy>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	9801      	ldr	r0, [sp, #4]
 8008d3e:	f000 fbf3 	bl	8009528 <_Bfree>
 8008d42:	464c      	mov	r4, r9
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	1c5a      	adds	r2, r3, #1
 8008d48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d4c:	6122      	str	r2, [r4, #16]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	615a      	str	r2, [r3, #20]
 8008d52:	e7be      	b.n	8008cd2 <__gethex+0x362>
 8008d54:	6922      	ldr	r2, [r4, #16]
 8008d56:	455a      	cmp	r2, fp
 8008d58:	dd0b      	ble.n	8008d72 <__gethex+0x402>
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f7ff fd9f 	bl	80088a0 <rshift>
 8008d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d66:	3701      	adds	r7, #1
 8008d68:	42bb      	cmp	r3, r7
 8008d6a:	f6ff aee0 	blt.w	8008b2e <__gethex+0x1be>
 8008d6e:	2501      	movs	r5, #1
 8008d70:	e7c2      	b.n	8008cf8 <__gethex+0x388>
 8008d72:	f016 061f 	ands.w	r6, r6, #31
 8008d76:	d0fa      	beq.n	8008d6e <__gethex+0x3fe>
 8008d78:	4453      	add	r3, sl
 8008d7a:	f1c6 0620 	rsb	r6, r6, #32
 8008d7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d82:	f000 fc83 	bl	800968c <__hi0bits>
 8008d86:	42b0      	cmp	r0, r6
 8008d88:	dbe7      	blt.n	8008d5a <__gethex+0x3ea>
 8008d8a:	e7f0      	b.n	8008d6e <__gethex+0x3fe>
 8008d8c:	0800aa5d 	.word	0x0800aa5d

08008d90 <L_shift>:
 8008d90:	f1c2 0208 	rsb	r2, r2, #8
 8008d94:	0092      	lsls	r2, r2, #2
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	f1c2 0620 	rsb	r6, r2, #32
 8008d9c:	6843      	ldr	r3, [r0, #4]
 8008d9e:	6804      	ldr	r4, [r0, #0]
 8008da0:	fa03 f506 	lsl.w	r5, r3, r6
 8008da4:	432c      	orrs	r4, r5
 8008da6:	40d3      	lsrs	r3, r2
 8008da8:	6004      	str	r4, [r0, #0]
 8008daa:	f840 3f04 	str.w	r3, [r0, #4]!
 8008dae:	4288      	cmp	r0, r1
 8008db0:	d3f4      	bcc.n	8008d9c <L_shift+0xc>
 8008db2:	bd70      	pop	{r4, r5, r6, pc}

08008db4 <__match>:
 8008db4:	b530      	push	{r4, r5, lr}
 8008db6:	6803      	ldr	r3, [r0, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dbe:	b914      	cbnz	r4, 8008dc6 <__match+0x12>
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	bd30      	pop	{r4, r5, pc}
 8008dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008dce:	2d19      	cmp	r5, #25
 8008dd0:	bf98      	it	ls
 8008dd2:	3220      	addls	r2, #32
 8008dd4:	42a2      	cmp	r2, r4
 8008dd6:	d0f0      	beq.n	8008dba <__match+0x6>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e7f3      	b.n	8008dc4 <__match+0x10>

08008ddc <__hexnan>:
 8008ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	680b      	ldr	r3, [r1, #0]
 8008de2:	6801      	ldr	r1, [r0, #0]
 8008de4:	115e      	asrs	r6, r3, #5
 8008de6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008dea:	f013 031f 	ands.w	r3, r3, #31
 8008dee:	b087      	sub	sp, #28
 8008df0:	bf18      	it	ne
 8008df2:	3604      	addne	r6, #4
 8008df4:	2500      	movs	r5, #0
 8008df6:	1f37      	subs	r7, r6, #4
 8008df8:	4682      	mov	sl, r0
 8008dfa:	4690      	mov	r8, r2
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e02:	46b9      	mov	r9, r7
 8008e04:	463c      	mov	r4, r7
 8008e06:	9502      	str	r5, [sp, #8]
 8008e08:	46ab      	mov	fp, r5
 8008e0a:	784a      	ldrb	r2, [r1, #1]
 8008e0c:	1c4b      	adds	r3, r1, #1
 8008e0e:	9303      	str	r3, [sp, #12]
 8008e10:	b342      	cbz	r2, 8008e64 <__hexnan+0x88>
 8008e12:	4610      	mov	r0, r2
 8008e14:	9105      	str	r1, [sp, #20]
 8008e16:	9204      	str	r2, [sp, #16]
 8008e18:	f7ff fd94 	bl	8008944 <__hexdig_fun>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d151      	bne.n	8008ec4 <__hexnan+0xe8>
 8008e20:	9a04      	ldr	r2, [sp, #16]
 8008e22:	9905      	ldr	r1, [sp, #20]
 8008e24:	2a20      	cmp	r2, #32
 8008e26:	d818      	bhi.n	8008e5a <__hexnan+0x7e>
 8008e28:	9b02      	ldr	r3, [sp, #8]
 8008e2a:	459b      	cmp	fp, r3
 8008e2c:	dd13      	ble.n	8008e56 <__hexnan+0x7a>
 8008e2e:	454c      	cmp	r4, r9
 8008e30:	d206      	bcs.n	8008e40 <__hexnan+0x64>
 8008e32:	2d07      	cmp	r5, #7
 8008e34:	dc04      	bgt.n	8008e40 <__hexnan+0x64>
 8008e36:	462a      	mov	r2, r5
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f7ff ffa8 	bl	8008d90 <L_shift>
 8008e40:	4544      	cmp	r4, r8
 8008e42:	d952      	bls.n	8008eea <__hexnan+0x10e>
 8008e44:	2300      	movs	r3, #0
 8008e46:	f1a4 0904 	sub.w	r9, r4, #4
 8008e4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e4e:	f8cd b008 	str.w	fp, [sp, #8]
 8008e52:	464c      	mov	r4, r9
 8008e54:	461d      	mov	r5, r3
 8008e56:	9903      	ldr	r1, [sp, #12]
 8008e58:	e7d7      	b.n	8008e0a <__hexnan+0x2e>
 8008e5a:	2a29      	cmp	r2, #41	@ 0x29
 8008e5c:	d157      	bne.n	8008f0e <__hexnan+0x132>
 8008e5e:	3102      	adds	r1, #2
 8008e60:	f8ca 1000 	str.w	r1, [sl]
 8008e64:	f1bb 0f00 	cmp.w	fp, #0
 8008e68:	d051      	beq.n	8008f0e <__hexnan+0x132>
 8008e6a:	454c      	cmp	r4, r9
 8008e6c:	d206      	bcs.n	8008e7c <__hexnan+0xa0>
 8008e6e:	2d07      	cmp	r5, #7
 8008e70:	dc04      	bgt.n	8008e7c <__hexnan+0xa0>
 8008e72:	462a      	mov	r2, r5
 8008e74:	4649      	mov	r1, r9
 8008e76:	4620      	mov	r0, r4
 8008e78:	f7ff ff8a 	bl	8008d90 <L_shift>
 8008e7c:	4544      	cmp	r4, r8
 8008e7e:	d936      	bls.n	8008eee <__hexnan+0x112>
 8008e80:	f1a8 0204 	sub.w	r2, r8, #4
 8008e84:	4623      	mov	r3, r4
 8008e86:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e8a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e8e:	429f      	cmp	r7, r3
 8008e90:	d2f9      	bcs.n	8008e86 <__hexnan+0xaa>
 8008e92:	1b3b      	subs	r3, r7, r4
 8008e94:	f023 0303 	bic.w	r3, r3, #3
 8008e98:	3304      	adds	r3, #4
 8008e9a:	3401      	adds	r4, #1
 8008e9c:	3e03      	subs	r6, #3
 8008e9e:	42b4      	cmp	r4, r6
 8008ea0:	bf88      	it	hi
 8008ea2:	2304      	movhi	r3, #4
 8008ea4:	4443      	add	r3, r8
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f843 2b04 	str.w	r2, [r3], #4
 8008eac:	429f      	cmp	r7, r3
 8008eae:	d2fb      	bcs.n	8008ea8 <__hexnan+0xcc>
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	b91b      	cbnz	r3, 8008ebc <__hexnan+0xe0>
 8008eb4:	4547      	cmp	r7, r8
 8008eb6:	d128      	bne.n	8008f0a <__hexnan+0x12e>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	2005      	movs	r0, #5
 8008ebe:	b007      	add	sp, #28
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	2d08      	cmp	r5, #8
 8008ec8:	f10b 0b01 	add.w	fp, fp, #1
 8008ecc:	dd06      	ble.n	8008edc <__hexnan+0x100>
 8008ece:	4544      	cmp	r4, r8
 8008ed0:	d9c1      	bls.n	8008e56 <__hexnan+0x7a>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ed8:	2501      	movs	r5, #1
 8008eda:	3c04      	subs	r4, #4
 8008edc:	6822      	ldr	r2, [r4, #0]
 8008ede:	f000 000f 	and.w	r0, r0, #15
 8008ee2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ee6:	6020      	str	r0, [r4, #0]
 8008ee8:	e7b5      	b.n	8008e56 <__hexnan+0x7a>
 8008eea:	2508      	movs	r5, #8
 8008eec:	e7b3      	b.n	8008e56 <__hexnan+0x7a>
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0dd      	beq.n	8008eb0 <__hexnan+0xd4>
 8008ef4:	f1c3 0320 	rsb	r3, r3, #32
 8008ef8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008efc:	40da      	lsrs	r2, r3
 8008efe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f02:	4013      	ands	r3, r2
 8008f04:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f08:	e7d2      	b.n	8008eb0 <__hexnan+0xd4>
 8008f0a:	3f04      	subs	r7, #4
 8008f0c:	e7d0      	b.n	8008eb0 <__hexnan+0xd4>
 8008f0e:	2004      	movs	r0, #4
 8008f10:	e7d5      	b.n	8008ebe <__hexnan+0xe2>

08008f12 <__ssputs_r>:
 8008f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f16:	688e      	ldr	r6, [r1, #8]
 8008f18:	461f      	mov	r7, r3
 8008f1a:	42be      	cmp	r6, r7
 8008f1c:	680b      	ldr	r3, [r1, #0]
 8008f1e:	4682      	mov	sl, r0
 8008f20:	460c      	mov	r4, r1
 8008f22:	4690      	mov	r8, r2
 8008f24:	d82d      	bhi.n	8008f82 <__ssputs_r+0x70>
 8008f26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f2e:	d026      	beq.n	8008f7e <__ssputs_r+0x6c>
 8008f30:	6965      	ldr	r5, [r4, #20]
 8008f32:	6909      	ldr	r1, [r1, #16]
 8008f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f38:	eba3 0901 	sub.w	r9, r3, r1
 8008f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f40:	1c7b      	adds	r3, r7, #1
 8008f42:	444b      	add	r3, r9
 8008f44:	106d      	asrs	r5, r5, #1
 8008f46:	429d      	cmp	r5, r3
 8008f48:	bf38      	it	cc
 8008f4a:	461d      	movcc	r5, r3
 8008f4c:	0553      	lsls	r3, r2, #21
 8008f4e:	d527      	bpl.n	8008fa0 <__ssputs_r+0x8e>
 8008f50:	4629      	mov	r1, r5
 8008f52:	f000 f95f 	bl	8009214 <_malloc_r>
 8008f56:	4606      	mov	r6, r0
 8008f58:	b360      	cbz	r0, 8008fb4 <__ssputs_r+0xa2>
 8008f5a:	6921      	ldr	r1, [r4, #16]
 8008f5c:	464a      	mov	r2, r9
 8008f5e:	f7fe fe32 	bl	8007bc6 <memcpy>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	6126      	str	r6, [r4, #16]
 8008f70:	6165      	str	r5, [r4, #20]
 8008f72:	444e      	add	r6, r9
 8008f74:	eba5 0509 	sub.w	r5, r5, r9
 8008f78:	6026      	str	r6, [r4, #0]
 8008f7a:	60a5      	str	r5, [r4, #8]
 8008f7c:	463e      	mov	r6, r7
 8008f7e:	42be      	cmp	r6, r7
 8008f80:	d900      	bls.n	8008f84 <__ssputs_r+0x72>
 8008f82:	463e      	mov	r6, r7
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	4632      	mov	r2, r6
 8008f88:	4641      	mov	r1, r8
 8008f8a:	f000 ffbd 	bl	8009f08 <memmove>
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	1b9b      	subs	r3, r3, r6
 8008f92:	60a3      	str	r3, [r4, #8]
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	4433      	add	r3, r6
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa0:	462a      	mov	r2, r5
 8008fa2:	f000 ff76 	bl	8009e92 <_realloc_r>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1e0      	bne.n	8008f6e <__ssputs_r+0x5c>
 8008fac:	6921      	ldr	r1, [r4, #16]
 8008fae:	4650      	mov	r0, sl
 8008fb0:	f001 f84c 	bl	800a04c <_free_r>
 8008fb4:	230c      	movs	r3, #12
 8008fb6:	f8ca 3000 	str.w	r3, [sl]
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fc6:	e7e9      	b.n	8008f9c <__ssputs_r+0x8a>

08008fc8 <_svfiprintf_r>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	4698      	mov	r8, r3
 8008fce:	898b      	ldrh	r3, [r1, #12]
 8008fd0:	061b      	lsls	r3, r3, #24
 8008fd2:	b09d      	sub	sp, #116	@ 0x74
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	460d      	mov	r5, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	d510      	bpl.n	8008ffe <_svfiprintf_r+0x36>
 8008fdc:	690b      	ldr	r3, [r1, #16]
 8008fde:	b973      	cbnz	r3, 8008ffe <_svfiprintf_r+0x36>
 8008fe0:	2140      	movs	r1, #64	@ 0x40
 8008fe2:	f000 f917 	bl	8009214 <_malloc_r>
 8008fe6:	6028      	str	r0, [r5, #0]
 8008fe8:	6128      	str	r0, [r5, #16]
 8008fea:	b930      	cbnz	r0, 8008ffa <_svfiprintf_r+0x32>
 8008fec:	230c      	movs	r3, #12
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ff4:	b01d      	add	sp, #116	@ 0x74
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	2340      	movs	r3, #64	@ 0x40
 8008ffc:	616b      	str	r3, [r5, #20]
 8008ffe:	2300      	movs	r3, #0
 8009000:	9309      	str	r3, [sp, #36]	@ 0x24
 8009002:	2320      	movs	r3, #32
 8009004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009008:	f8cd 800c 	str.w	r8, [sp, #12]
 800900c:	2330      	movs	r3, #48	@ 0x30
 800900e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091ac <_svfiprintf_r+0x1e4>
 8009012:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009016:	f04f 0901 	mov.w	r9, #1
 800901a:	4623      	mov	r3, r4
 800901c:	469a      	mov	sl, r3
 800901e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009022:	b10a      	cbz	r2, 8009028 <_svfiprintf_r+0x60>
 8009024:	2a25      	cmp	r2, #37	@ 0x25
 8009026:	d1f9      	bne.n	800901c <_svfiprintf_r+0x54>
 8009028:	ebba 0b04 	subs.w	fp, sl, r4
 800902c:	d00b      	beq.n	8009046 <_svfiprintf_r+0x7e>
 800902e:	465b      	mov	r3, fp
 8009030:	4622      	mov	r2, r4
 8009032:	4629      	mov	r1, r5
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff ff6c 	bl	8008f12 <__ssputs_r>
 800903a:	3001      	adds	r0, #1
 800903c:	f000 80a7 	beq.w	800918e <_svfiprintf_r+0x1c6>
 8009040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009042:	445a      	add	r2, fp
 8009044:	9209      	str	r2, [sp, #36]	@ 0x24
 8009046:	f89a 3000 	ldrb.w	r3, [sl]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 809f 	beq.w	800918e <_svfiprintf_r+0x1c6>
 8009050:	2300      	movs	r3, #0
 8009052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800905a:	f10a 0a01 	add.w	sl, sl, #1
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009066:	931a      	str	r3, [sp, #104]	@ 0x68
 8009068:	4654      	mov	r4, sl
 800906a:	2205      	movs	r2, #5
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	484e      	ldr	r0, [pc, #312]	@ (80091ac <_svfiprintf_r+0x1e4>)
 8009072:	f7f7 f8d5 	bl	8000220 <memchr>
 8009076:	9a04      	ldr	r2, [sp, #16]
 8009078:	b9d8      	cbnz	r0, 80090b2 <_svfiprintf_r+0xea>
 800907a:	06d0      	lsls	r0, r2, #27
 800907c:	bf44      	itt	mi
 800907e:	2320      	movmi	r3, #32
 8009080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009084:	0711      	lsls	r1, r2, #28
 8009086:	bf44      	itt	mi
 8009088:	232b      	movmi	r3, #43	@ 0x2b
 800908a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800908e:	f89a 3000 	ldrb.w	r3, [sl]
 8009092:	2b2a      	cmp	r3, #42	@ 0x2a
 8009094:	d015      	beq.n	80090c2 <_svfiprintf_r+0xfa>
 8009096:	9a07      	ldr	r2, [sp, #28]
 8009098:	4654      	mov	r4, sl
 800909a:	2000      	movs	r0, #0
 800909c:	f04f 0c0a 	mov.w	ip, #10
 80090a0:	4621      	mov	r1, r4
 80090a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a6:	3b30      	subs	r3, #48	@ 0x30
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d94b      	bls.n	8009144 <_svfiprintf_r+0x17c>
 80090ac:	b1b0      	cbz	r0, 80090dc <_svfiprintf_r+0x114>
 80090ae:	9207      	str	r2, [sp, #28]
 80090b0:	e014      	b.n	80090dc <_svfiprintf_r+0x114>
 80090b2:	eba0 0308 	sub.w	r3, r0, r8
 80090b6:	fa09 f303 	lsl.w	r3, r9, r3
 80090ba:	4313      	orrs	r3, r2
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	46a2      	mov	sl, r4
 80090c0:	e7d2      	b.n	8009068 <_svfiprintf_r+0xa0>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	1d19      	adds	r1, r3, #4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	9103      	str	r1, [sp, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfbb      	ittet	lt
 80090ce:	425b      	neglt	r3, r3
 80090d0:	f042 0202 	orrlt.w	r2, r2, #2
 80090d4:	9307      	strge	r3, [sp, #28]
 80090d6:	9307      	strlt	r3, [sp, #28]
 80090d8:	bfb8      	it	lt
 80090da:	9204      	strlt	r2, [sp, #16]
 80090dc:	7823      	ldrb	r3, [r4, #0]
 80090de:	2b2e      	cmp	r3, #46	@ 0x2e
 80090e0:	d10a      	bne.n	80090f8 <_svfiprintf_r+0x130>
 80090e2:	7863      	ldrb	r3, [r4, #1]
 80090e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e6:	d132      	bne.n	800914e <_svfiprintf_r+0x186>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d1a      	adds	r2, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9203      	str	r2, [sp, #12]
 80090f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090f4:	3402      	adds	r4, #2
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091bc <_svfiprintf_r+0x1f4>
 80090fc:	7821      	ldrb	r1, [r4, #0]
 80090fe:	2203      	movs	r2, #3
 8009100:	4650      	mov	r0, sl
 8009102:	f7f7 f88d 	bl	8000220 <memchr>
 8009106:	b138      	cbz	r0, 8009118 <_svfiprintf_r+0x150>
 8009108:	9b04      	ldr	r3, [sp, #16]
 800910a:	eba0 000a 	sub.w	r0, r0, sl
 800910e:	2240      	movs	r2, #64	@ 0x40
 8009110:	4082      	lsls	r2, r0
 8009112:	4313      	orrs	r3, r2
 8009114:	3401      	adds	r4, #1
 8009116:	9304      	str	r3, [sp, #16]
 8009118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911c:	4824      	ldr	r0, [pc, #144]	@ (80091b0 <_svfiprintf_r+0x1e8>)
 800911e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009122:	2206      	movs	r2, #6
 8009124:	f7f7 f87c 	bl	8000220 <memchr>
 8009128:	2800      	cmp	r0, #0
 800912a:	d036      	beq.n	800919a <_svfiprintf_r+0x1d2>
 800912c:	4b21      	ldr	r3, [pc, #132]	@ (80091b4 <_svfiprintf_r+0x1ec>)
 800912e:	bb1b      	cbnz	r3, 8009178 <_svfiprintf_r+0x1b0>
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	3307      	adds	r3, #7
 8009134:	f023 0307 	bic.w	r3, r3, #7
 8009138:	3308      	adds	r3, #8
 800913a:	9303      	str	r3, [sp, #12]
 800913c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913e:	4433      	add	r3, r6
 8009140:	9309      	str	r3, [sp, #36]	@ 0x24
 8009142:	e76a      	b.n	800901a <_svfiprintf_r+0x52>
 8009144:	fb0c 3202 	mla	r2, ip, r2, r3
 8009148:	460c      	mov	r4, r1
 800914a:	2001      	movs	r0, #1
 800914c:	e7a8      	b.n	80090a0 <_svfiprintf_r+0xd8>
 800914e:	2300      	movs	r3, #0
 8009150:	3401      	adds	r4, #1
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	4619      	mov	r1, r3
 8009156:	f04f 0c0a 	mov.w	ip, #10
 800915a:	4620      	mov	r0, r4
 800915c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009160:	3a30      	subs	r2, #48	@ 0x30
 8009162:	2a09      	cmp	r2, #9
 8009164:	d903      	bls.n	800916e <_svfiprintf_r+0x1a6>
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0c6      	beq.n	80090f8 <_svfiprintf_r+0x130>
 800916a:	9105      	str	r1, [sp, #20]
 800916c:	e7c4      	b.n	80090f8 <_svfiprintf_r+0x130>
 800916e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009172:	4604      	mov	r4, r0
 8009174:	2301      	movs	r3, #1
 8009176:	e7f0      	b.n	800915a <_svfiprintf_r+0x192>
 8009178:	ab03      	add	r3, sp, #12
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	462a      	mov	r2, r5
 800917e:	4b0e      	ldr	r3, [pc, #56]	@ (80091b8 <_svfiprintf_r+0x1f0>)
 8009180:	a904      	add	r1, sp, #16
 8009182:	4638      	mov	r0, r7
 8009184:	f7fc ffa2 	bl	80060cc <_printf_float>
 8009188:	1c42      	adds	r2, r0, #1
 800918a:	4606      	mov	r6, r0
 800918c:	d1d6      	bne.n	800913c <_svfiprintf_r+0x174>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	065b      	lsls	r3, r3, #25
 8009192:	f53f af2d 	bmi.w	8008ff0 <_svfiprintf_r+0x28>
 8009196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009198:	e72c      	b.n	8008ff4 <_svfiprintf_r+0x2c>
 800919a:	ab03      	add	r3, sp, #12
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	462a      	mov	r2, r5
 80091a0:	4b05      	ldr	r3, [pc, #20]	@ (80091b8 <_svfiprintf_r+0x1f0>)
 80091a2:	a904      	add	r1, sp, #16
 80091a4:	4638      	mov	r0, r7
 80091a6:	f7fd fa29 	bl	80065fc <_printf_i>
 80091aa:	e7ed      	b.n	8009188 <_svfiprintf_r+0x1c0>
 80091ac:	0800aace 	.word	0x0800aace
 80091b0:	0800aad8 	.word	0x0800aad8
 80091b4:	080060cd 	.word	0x080060cd
 80091b8:	08008f13 	.word	0x08008f13
 80091bc:	0800aad4 	.word	0x0800aad4

080091c0 <malloc>:
 80091c0:	4b02      	ldr	r3, [pc, #8]	@ (80091cc <malloc+0xc>)
 80091c2:	4601      	mov	r1, r0
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	f000 b825 	b.w	8009214 <_malloc_r>
 80091ca:	bf00      	nop
 80091cc:	20000184 	.word	0x20000184

080091d0 <sbrk_aligned>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4e0f      	ldr	r6, [pc, #60]	@ (8009210 <sbrk_aligned+0x40>)
 80091d4:	460c      	mov	r4, r1
 80091d6:	6831      	ldr	r1, [r6, #0]
 80091d8:	4605      	mov	r5, r0
 80091da:	b911      	cbnz	r1, 80091e2 <sbrk_aligned+0x12>
 80091dc:	f000 fee2 	bl	8009fa4 <_sbrk_r>
 80091e0:	6030      	str	r0, [r6, #0]
 80091e2:	4621      	mov	r1, r4
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 fedd 	bl	8009fa4 <_sbrk_r>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d103      	bne.n	80091f6 <sbrk_aligned+0x26>
 80091ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80091f2:	4620      	mov	r0, r4
 80091f4:	bd70      	pop	{r4, r5, r6, pc}
 80091f6:	1cc4      	adds	r4, r0, #3
 80091f8:	f024 0403 	bic.w	r4, r4, #3
 80091fc:	42a0      	cmp	r0, r4
 80091fe:	d0f8      	beq.n	80091f2 <sbrk_aligned+0x22>
 8009200:	1a21      	subs	r1, r4, r0
 8009202:	4628      	mov	r0, r5
 8009204:	f000 fece 	bl	8009fa4 <_sbrk_r>
 8009208:	3001      	adds	r0, #1
 800920a:	d1f2      	bne.n	80091f2 <sbrk_aligned+0x22>
 800920c:	e7ef      	b.n	80091ee <sbrk_aligned+0x1e>
 800920e:	bf00      	nop
 8009210:	200003d4 	.word	0x200003d4

08009214 <_malloc_r>:
 8009214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009218:	1ccd      	adds	r5, r1, #3
 800921a:	f025 0503 	bic.w	r5, r5, #3
 800921e:	3508      	adds	r5, #8
 8009220:	2d0c      	cmp	r5, #12
 8009222:	bf38      	it	cc
 8009224:	250c      	movcc	r5, #12
 8009226:	2d00      	cmp	r5, #0
 8009228:	4606      	mov	r6, r0
 800922a:	db01      	blt.n	8009230 <_malloc_r+0x1c>
 800922c:	42a9      	cmp	r1, r5
 800922e:	d904      	bls.n	800923a <_malloc_r+0x26>
 8009230:	230c      	movs	r3, #12
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	2000      	movs	r0, #0
 8009236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800923a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009310 <_malloc_r+0xfc>
 800923e:	f000 f927 	bl	8009490 <__malloc_lock>
 8009242:	f8d8 3000 	ldr.w	r3, [r8]
 8009246:	461c      	mov	r4, r3
 8009248:	bb44      	cbnz	r4, 800929c <_malloc_r+0x88>
 800924a:	4629      	mov	r1, r5
 800924c:	4630      	mov	r0, r6
 800924e:	f7ff ffbf 	bl	80091d0 <sbrk_aligned>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	4604      	mov	r4, r0
 8009256:	d158      	bne.n	800930a <_malloc_r+0xf6>
 8009258:	f8d8 4000 	ldr.w	r4, [r8]
 800925c:	4627      	mov	r7, r4
 800925e:	2f00      	cmp	r7, #0
 8009260:	d143      	bne.n	80092ea <_malloc_r+0xd6>
 8009262:	2c00      	cmp	r4, #0
 8009264:	d04b      	beq.n	80092fe <_malloc_r+0xea>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	4639      	mov	r1, r7
 800926a:	4630      	mov	r0, r6
 800926c:	eb04 0903 	add.w	r9, r4, r3
 8009270:	f000 fe98 	bl	8009fa4 <_sbrk_r>
 8009274:	4581      	cmp	r9, r0
 8009276:	d142      	bne.n	80092fe <_malloc_r+0xea>
 8009278:	6821      	ldr	r1, [r4, #0]
 800927a:	1a6d      	subs	r5, r5, r1
 800927c:	4629      	mov	r1, r5
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ffa6 	bl	80091d0 <sbrk_aligned>
 8009284:	3001      	adds	r0, #1
 8009286:	d03a      	beq.n	80092fe <_malloc_r+0xea>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	442b      	add	r3, r5
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	f8d8 3000 	ldr.w	r3, [r8]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	bb62      	cbnz	r2, 80092f0 <_malloc_r+0xdc>
 8009296:	f8c8 7000 	str.w	r7, [r8]
 800929a:	e00f      	b.n	80092bc <_malloc_r+0xa8>
 800929c:	6822      	ldr	r2, [r4, #0]
 800929e:	1b52      	subs	r2, r2, r5
 80092a0:	d420      	bmi.n	80092e4 <_malloc_r+0xd0>
 80092a2:	2a0b      	cmp	r2, #11
 80092a4:	d917      	bls.n	80092d6 <_malloc_r+0xc2>
 80092a6:	1961      	adds	r1, r4, r5
 80092a8:	42a3      	cmp	r3, r4
 80092aa:	6025      	str	r5, [r4, #0]
 80092ac:	bf18      	it	ne
 80092ae:	6059      	strne	r1, [r3, #4]
 80092b0:	6863      	ldr	r3, [r4, #4]
 80092b2:	bf08      	it	eq
 80092b4:	f8c8 1000 	streq.w	r1, [r8]
 80092b8:	5162      	str	r2, [r4, r5]
 80092ba:	604b      	str	r3, [r1, #4]
 80092bc:	4630      	mov	r0, r6
 80092be:	f000 f8ed 	bl	800949c <__malloc_unlock>
 80092c2:	f104 000b 	add.w	r0, r4, #11
 80092c6:	1d23      	adds	r3, r4, #4
 80092c8:	f020 0007 	bic.w	r0, r0, #7
 80092cc:	1ac2      	subs	r2, r0, r3
 80092ce:	bf1c      	itt	ne
 80092d0:	1a1b      	subne	r3, r3, r0
 80092d2:	50a3      	strne	r3, [r4, r2]
 80092d4:	e7af      	b.n	8009236 <_malloc_r+0x22>
 80092d6:	6862      	ldr	r2, [r4, #4]
 80092d8:	42a3      	cmp	r3, r4
 80092da:	bf0c      	ite	eq
 80092dc:	f8c8 2000 	streq.w	r2, [r8]
 80092e0:	605a      	strne	r2, [r3, #4]
 80092e2:	e7eb      	b.n	80092bc <_malloc_r+0xa8>
 80092e4:	4623      	mov	r3, r4
 80092e6:	6864      	ldr	r4, [r4, #4]
 80092e8:	e7ae      	b.n	8009248 <_malloc_r+0x34>
 80092ea:	463c      	mov	r4, r7
 80092ec:	687f      	ldr	r7, [r7, #4]
 80092ee:	e7b6      	b.n	800925e <_malloc_r+0x4a>
 80092f0:	461a      	mov	r2, r3
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	42a3      	cmp	r3, r4
 80092f6:	d1fb      	bne.n	80092f0 <_malloc_r+0xdc>
 80092f8:	2300      	movs	r3, #0
 80092fa:	6053      	str	r3, [r2, #4]
 80092fc:	e7de      	b.n	80092bc <_malloc_r+0xa8>
 80092fe:	230c      	movs	r3, #12
 8009300:	6033      	str	r3, [r6, #0]
 8009302:	4630      	mov	r0, r6
 8009304:	f000 f8ca 	bl	800949c <__malloc_unlock>
 8009308:	e794      	b.n	8009234 <_malloc_r+0x20>
 800930a:	6005      	str	r5, [r0, #0]
 800930c:	e7d6      	b.n	80092bc <_malloc_r+0xa8>
 800930e:	bf00      	nop
 8009310:	200003d8 	.word	0x200003d8

08009314 <__ascii_mbtowc>:
 8009314:	b082      	sub	sp, #8
 8009316:	b901      	cbnz	r1, 800931a <__ascii_mbtowc+0x6>
 8009318:	a901      	add	r1, sp, #4
 800931a:	b142      	cbz	r2, 800932e <__ascii_mbtowc+0x1a>
 800931c:	b14b      	cbz	r3, 8009332 <__ascii_mbtowc+0x1e>
 800931e:	7813      	ldrb	r3, [r2, #0]
 8009320:	600b      	str	r3, [r1, #0]
 8009322:	7812      	ldrb	r2, [r2, #0]
 8009324:	1e10      	subs	r0, r2, #0
 8009326:	bf18      	it	ne
 8009328:	2001      	movne	r0, #1
 800932a:	b002      	add	sp, #8
 800932c:	4770      	bx	lr
 800932e:	4610      	mov	r0, r2
 8009330:	e7fb      	b.n	800932a <__ascii_mbtowc+0x16>
 8009332:	f06f 0001 	mvn.w	r0, #1
 8009336:	e7f8      	b.n	800932a <__ascii_mbtowc+0x16>

08009338 <__sflush_r>:
 8009338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	0716      	lsls	r6, r2, #28
 8009342:	4605      	mov	r5, r0
 8009344:	460c      	mov	r4, r1
 8009346:	d454      	bmi.n	80093f2 <__sflush_r+0xba>
 8009348:	684b      	ldr	r3, [r1, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	dc02      	bgt.n	8009354 <__sflush_r+0x1c>
 800934e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009350:	2b00      	cmp	r3, #0
 8009352:	dd48      	ble.n	80093e6 <__sflush_r+0xae>
 8009354:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009356:	2e00      	cmp	r6, #0
 8009358:	d045      	beq.n	80093e6 <__sflush_r+0xae>
 800935a:	2300      	movs	r3, #0
 800935c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009360:	682f      	ldr	r7, [r5, #0]
 8009362:	6a21      	ldr	r1, [r4, #32]
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	d030      	beq.n	80093ca <__sflush_r+0x92>
 8009368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	0759      	lsls	r1, r3, #29
 800936e:	d505      	bpl.n	800937c <__sflush_r+0x44>
 8009370:	6863      	ldr	r3, [r4, #4]
 8009372:	1ad2      	subs	r2, r2, r3
 8009374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009376:	b10b      	cbz	r3, 800937c <__sflush_r+0x44>
 8009378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800937a:	1ad2      	subs	r2, r2, r3
 800937c:	2300      	movs	r3, #0
 800937e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009380:	6a21      	ldr	r1, [r4, #32]
 8009382:	4628      	mov	r0, r5
 8009384:	47b0      	blx	r6
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	d106      	bne.n	800939a <__sflush_r+0x62>
 800938c:	6829      	ldr	r1, [r5, #0]
 800938e:	291d      	cmp	r1, #29
 8009390:	d82b      	bhi.n	80093ea <__sflush_r+0xb2>
 8009392:	4a2a      	ldr	r2, [pc, #168]	@ (800943c <__sflush_r+0x104>)
 8009394:	410a      	asrs	r2, r1
 8009396:	07d6      	lsls	r6, r2, #31
 8009398:	d427      	bmi.n	80093ea <__sflush_r+0xb2>
 800939a:	2200      	movs	r2, #0
 800939c:	6062      	str	r2, [r4, #4]
 800939e:	04d9      	lsls	r1, r3, #19
 80093a0:	6922      	ldr	r2, [r4, #16]
 80093a2:	6022      	str	r2, [r4, #0]
 80093a4:	d504      	bpl.n	80093b0 <__sflush_r+0x78>
 80093a6:	1c42      	adds	r2, r0, #1
 80093a8:	d101      	bne.n	80093ae <__sflush_r+0x76>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b903      	cbnz	r3, 80093b0 <__sflush_r+0x78>
 80093ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80093b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093b2:	602f      	str	r7, [r5, #0]
 80093b4:	b1b9      	cbz	r1, 80093e6 <__sflush_r+0xae>
 80093b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093ba:	4299      	cmp	r1, r3
 80093bc:	d002      	beq.n	80093c4 <__sflush_r+0x8c>
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 fe44 	bl	800a04c <_free_r>
 80093c4:	2300      	movs	r3, #0
 80093c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80093c8:	e00d      	b.n	80093e6 <__sflush_r+0xae>
 80093ca:	2301      	movs	r3, #1
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b0      	blx	r6
 80093d0:	4602      	mov	r2, r0
 80093d2:	1c50      	adds	r0, r2, #1
 80093d4:	d1c9      	bne.n	800936a <__sflush_r+0x32>
 80093d6:	682b      	ldr	r3, [r5, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0c6      	beq.n	800936a <__sflush_r+0x32>
 80093dc:	2b1d      	cmp	r3, #29
 80093de:	d001      	beq.n	80093e4 <__sflush_r+0xac>
 80093e0:	2b16      	cmp	r3, #22
 80093e2:	d11e      	bne.n	8009422 <__sflush_r+0xea>
 80093e4:	602f      	str	r7, [r5, #0]
 80093e6:	2000      	movs	r0, #0
 80093e8:	e022      	b.n	8009430 <__sflush_r+0xf8>
 80093ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ee:	b21b      	sxth	r3, r3
 80093f0:	e01b      	b.n	800942a <__sflush_r+0xf2>
 80093f2:	690f      	ldr	r7, [r1, #16]
 80093f4:	2f00      	cmp	r7, #0
 80093f6:	d0f6      	beq.n	80093e6 <__sflush_r+0xae>
 80093f8:	0793      	lsls	r3, r2, #30
 80093fa:	680e      	ldr	r6, [r1, #0]
 80093fc:	bf08      	it	eq
 80093fe:	694b      	ldreq	r3, [r1, #20]
 8009400:	600f      	str	r7, [r1, #0]
 8009402:	bf18      	it	ne
 8009404:	2300      	movne	r3, #0
 8009406:	eba6 0807 	sub.w	r8, r6, r7
 800940a:	608b      	str	r3, [r1, #8]
 800940c:	f1b8 0f00 	cmp.w	r8, #0
 8009410:	dde9      	ble.n	80093e6 <__sflush_r+0xae>
 8009412:	6a21      	ldr	r1, [r4, #32]
 8009414:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009416:	4643      	mov	r3, r8
 8009418:	463a      	mov	r2, r7
 800941a:	4628      	mov	r0, r5
 800941c:	47b0      	blx	r6
 800941e:	2800      	cmp	r0, #0
 8009420:	dc08      	bgt.n	8009434 <__sflush_r+0xfc>
 8009422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009434:	4407      	add	r7, r0
 8009436:	eba8 0800 	sub.w	r8, r8, r0
 800943a:	e7e7      	b.n	800940c <__sflush_r+0xd4>
 800943c:	dfbffffe 	.word	0xdfbffffe

08009440 <_fflush_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	690b      	ldr	r3, [r1, #16]
 8009444:	4605      	mov	r5, r0
 8009446:	460c      	mov	r4, r1
 8009448:	b913      	cbnz	r3, 8009450 <_fflush_r+0x10>
 800944a:	2500      	movs	r5, #0
 800944c:	4628      	mov	r0, r5
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	b118      	cbz	r0, 800945a <_fflush_r+0x1a>
 8009452:	6a03      	ldr	r3, [r0, #32]
 8009454:	b90b      	cbnz	r3, 800945a <_fflush_r+0x1a>
 8009456:	f7fd fcb1 	bl	8006dbc <__sinit>
 800945a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0f3      	beq.n	800944a <_fflush_r+0xa>
 8009462:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009464:	07d0      	lsls	r0, r2, #31
 8009466:	d404      	bmi.n	8009472 <_fflush_r+0x32>
 8009468:	0599      	lsls	r1, r3, #22
 800946a:	d402      	bmi.n	8009472 <_fflush_r+0x32>
 800946c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800946e:	f7fe fba8 	bl	8007bc2 <__retarget_lock_acquire_recursive>
 8009472:	4628      	mov	r0, r5
 8009474:	4621      	mov	r1, r4
 8009476:	f7ff ff5f 	bl	8009338 <__sflush_r>
 800947a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800947c:	07da      	lsls	r2, r3, #31
 800947e:	4605      	mov	r5, r0
 8009480:	d4e4      	bmi.n	800944c <_fflush_r+0xc>
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	059b      	lsls	r3, r3, #22
 8009486:	d4e1      	bmi.n	800944c <_fflush_r+0xc>
 8009488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800948a:	f7fe fb9b 	bl	8007bc4 <__retarget_lock_release_recursive>
 800948e:	e7dd      	b.n	800944c <_fflush_r+0xc>

08009490 <__malloc_lock>:
 8009490:	4801      	ldr	r0, [pc, #4]	@ (8009498 <__malloc_lock+0x8>)
 8009492:	f7fe bb96 	b.w	8007bc2 <__retarget_lock_acquire_recursive>
 8009496:	bf00      	nop
 8009498:	200003d0 	.word	0x200003d0

0800949c <__malloc_unlock>:
 800949c:	4801      	ldr	r0, [pc, #4]	@ (80094a4 <__malloc_unlock+0x8>)
 800949e:	f7fe bb91 	b.w	8007bc4 <__retarget_lock_release_recursive>
 80094a2:	bf00      	nop
 80094a4:	200003d0 	.word	0x200003d0

080094a8 <_Balloc>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	69c6      	ldr	r6, [r0, #28]
 80094ac:	4604      	mov	r4, r0
 80094ae:	460d      	mov	r5, r1
 80094b0:	b976      	cbnz	r6, 80094d0 <_Balloc+0x28>
 80094b2:	2010      	movs	r0, #16
 80094b4:	f7ff fe84 	bl	80091c0 <malloc>
 80094b8:	4602      	mov	r2, r0
 80094ba:	61e0      	str	r0, [r4, #28]
 80094bc:	b920      	cbnz	r0, 80094c8 <_Balloc+0x20>
 80094be:	4b18      	ldr	r3, [pc, #96]	@ (8009520 <_Balloc+0x78>)
 80094c0:	4818      	ldr	r0, [pc, #96]	@ (8009524 <_Balloc+0x7c>)
 80094c2:	216b      	movs	r1, #107	@ 0x6b
 80094c4:	f000 fd90 	bl	8009fe8 <__assert_func>
 80094c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094cc:	6006      	str	r6, [r0, #0]
 80094ce:	60c6      	str	r6, [r0, #12]
 80094d0:	69e6      	ldr	r6, [r4, #28]
 80094d2:	68f3      	ldr	r3, [r6, #12]
 80094d4:	b183      	cbz	r3, 80094f8 <_Balloc+0x50>
 80094d6:	69e3      	ldr	r3, [r4, #28]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094de:	b9b8      	cbnz	r0, 8009510 <_Balloc+0x68>
 80094e0:	2101      	movs	r1, #1
 80094e2:	fa01 f605 	lsl.w	r6, r1, r5
 80094e6:	1d72      	adds	r2, r6, #5
 80094e8:	0092      	lsls	r2, r2, #2
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 fd9a 	bl	800a024 <_calloc_r>
 80094f0:	b160      	cbz	r0, 800950c <_Balloc+0x64>
 80094f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094f6:	e00e      	b.n	8009516 <_Balloc+0x6e>
 80094f8:	2221      	movs	r2, #33	@ 0x21
 80094fa:	2104      	movs	r1, #4
 80094fc:	4620      	mov	r0, r4
 80094fe:	f000 fd91 	bl	800a024 <_calloc_r>
 8009502:	69e3      	ldr	r3, [r4, #28]
 8009504:	60f0      	str	r0, [r6, #12]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e4      	bne.n	80094d6 <_Balloc+0x2e>
 800950c:	2000      	movs	r0, #0
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	6802      	ldr	r2, [r0, #0]
 8009512:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009516:	2300      	movs	r3, #0
 8009518:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800951c:	e7f7      	b.n	800950e <_Balloc+0x66>
 800951e:	bf00      	nop
 8009520:	0800a9ee 	.word	0x0800a9ee
 8009524:	0800aadf 	.word	0x0800aadf

08009528 <_Bfree>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	69c6      	ldr	r6, [r0, #28]
 800952c:	4605      	mov	r5, r0
 800952e:	460c      	mov	r4, r1
 8009530:	b976      	cbnz	r6, 8009550 <_Bfree+0x28>
 8009532:	2010      	movs	r0, #16
 8009534:	f7ff fe44 	bl	80091c0 <malloc>
 8009538:	4602      	mov	r2, r0
 800953a:	61e8      	str	r0, [r5, #28]
 800953c:	b920      	cbnz	r0, 8009548 <_Bfree+0x20>
 800953e:	4b09      	ldr	r3, [pc, #36]	@ (8009564 <_Bfree+0x3c>)
 8009540:	4809      	ldr	r0, [pc, #36]	@ (8009568 <_Bfree+0x40>)
 8009542:	218f      	movs	r1, #143	@ 0x8f
 8009544:	f000 fd50 	bl	8009fe8 <__assert_func>
 8009548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800954c:	6006      	str	r6, [r0, #0]
 800954e:	60c6      	str	r6, [r0, #12]
 8009550:	b13c      	cbz	r4, 8009562 <_Bfree+0x3a>
 8009552:	69eb      	ldr	r3, [r5, #28]
 8009554:	6862      	ldr	r2, [r4, #4]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800955c:	6021      	str	r1, [r4, #0]
 800955e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	0800a9ee 	.word	0x0800a9ee
 8009568:	0800aadf 	.word	0x0800aadf

0800956c <__multadd>:
 800956c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009570:	690d      	ldr	r5, [r1, #16]
 8009572:	4607      	mov	r7, r0
 8009574:	460c      	mov	r4, r1
 8009576:	461e      	mov	r6, r3
 8009578:	f101 0c14 	add.w	ip, r1, #20
 800957c:	2000      	movs	r0, #0
 800957e:	f8dc 3000 	ldr.w	r3, [ip]
 8009582:	b299      	uxth	r1, r3
 8009584:	fb02 6101 	mla	r1, r2, r1, r6
 8009588:	0c1e      	lsrs	r6, r3, #16
 800958a:	0c0b      	lsrs	r3, r1, #16
 800958c:	fb02 3306 	mla	r3, r2, r6, r3
 8009590:	b289      	uxth	r1, r1
 8009592:	3001      	adds	r0, #1
 8009594:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009598:	4285      	cmp	r5, r0
 800959a:	f84c 1b04 	str.w	r1, [ip], #4
 800959e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095a2:	dcec      	bgt.n	800957e <__multadd+0x12>
 80095a4:	b30e      	cbz	r6, 80095ea <__multadd+0x7e>
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	42ab      	cmp	r3, r5
 80095aa:	dc19      	bgt.n	80095e0 <__multadd+0x74>
 80095ac:	6861      	ldr	r1, [r4, #4]
 80095ae:	4638      	mov	r0, r7
 80095b0:	3101      	adds	r1, #1
 80095b2:	f7ff ff79 	bl	80094a8 <_Balloc>
 80095b6:	4680      	mov	r8, r0
 80095b8:	b928      	cbnz	r0, 80095c6 <__multadd+0x5a>
 80095ba:	4602      	mov	r2, r0
 80095bc:	4b0c      	ldr	r3, [pc, #48]	@ (80095f0 <__multadd+0x84>)
 80095be:	480d      	ldr	r0, [pc, #52]	@ (80095f4 <__multadd+0x88>)
 80095c0:	21ba      	movs	r1, #186	@ 0xba
 80095c2:	f000 fd11 	bl	8009fe8 <__assert_func>
 80095c6:	6922      	ldr	r2, [r4, #16]
 80095c8:	3202      	adds	r2, #2
 80095ca:	f104 010c 	add.w	r1, r4, #12
 80095ce:	0092      	lsls	r2, r2, #2
 80095d0:	300c      	adds	r0, #12
 80095d2:	f7fe faf8 	bl	8007bc6 <memcpy>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4638      	mov	r0, r7
 80095da:	f7ff ffa5 	bl	8009528 <_Bfree>
 80095de:	4644      	mov	r4, r8
 80095e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095e4:	3501      	adds	r5, #1
 80095e6:	615e      	str	r6, [r3, #20]
 80095e8:	6125      	str	r5, [r4, #16]
 80095ea:	4620      	mov	r0, r4
 80095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f0:	0800aa5d 	.word	0x0800aa5d
 80095f4:	0800aadf 	.word	0x0800aadf

080095f8 <__s2b>:
 80095f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	460c      	mov	r4, r1
 80095fe:	4615      	mov	r5, r2
 8009600:	461f      	mov	r7, r3
 8009602:	2209      	movs	r2, #9
 8009604:	3308      	adds	r3, #8
 8009606:	4606      	mov	r6, r0
 8009608:	fb93 f3f2 	sdiv	r3, r3, r2
 800960c:	2100      	movs	r1, #0
 800960e:	2201      	movs	r2, #1
 8009610:	429a      	cmp	r2, r3
 8009612:	db09      	blt.n	8009628 <__s2b+0x30>
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff ff47 	bl	80094a8 <_Balloc>
 800961a:	b940      	cbnz	r0, 800962e <__s2b+0x36>
 800961c:	4602      	mov	r2, r0
 800961e:	4b19      	ldr	r3, [pc, #100]	@ (8009684 <__s2b+0x8c>)
 8009620:	4819      	ldr	r0, [pc, #100]	@ (8009688 <__s2b+0x90>)
 8009622:	21d3      	movs	r1, #211	@ 0xd3
 8009624:	f000 fce0 	bl	8009fe8 <__assert_func>
 8009628:	0052      	lsls	r2, r2, #1
 800962a:	3101      	adds	r1, #1
 800962c:	e7f0      	b.n	8009610 <__s2b+0x18>
 800962e:	9b08      	ldr	r3, [sp, #32]
 8009630:	6143      	str	r3, [r0, #20]
 8009632:	2d09      	cmp	r5, #9
 8009634:	f04f 0301 	mov.w	r3, #1
 8009638:	6103      	str	r3, [r0, #16]
 800963a:	dd16      	ble.n	800966a <__s2b+0x72>
 800963c:	f104 0909 	add.w	r9, r4, #9
 8009640:	46c8      	mov	r8, r9
 8009642:	442c      	add	r4, r5
 8009644:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009648:	4601      	mov	r1, r0
 800964a:	3b30      	subs	r3, #48	@ 0x30
 800964c:	220a      	movs	r2, #10
 800964e:	4630      	mov	r0, r6
 8009650:	f7ff ff8c 	bl	800956c <__multadd>
 8009654:	45a0      	cmp	r8, r4
 8009656:	d1f5      	bne.n	8009644 <__s2b+0x4c>
 8009658:	f1a5 0408 	sub.w	r4, r5, #8
 800965c:	444c      	add	r4, r9
 800965e:	1b2d      	subs	r5, r5, r4
 8009660:	1963      	adds	r3, r4, r5
 8009662:	42bb      	cmp	r3, r7
 8009664:	db04      	blt.n	8009670 <__s2b+0x78>
 8009666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966a:	340a      	adds	r4, #10
 800966c:	2509      	movs	r5, #9
 800966e:	e7f6      	b.n	800965e <__s2b+0x66>
 8009670:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009674:	4601      	mov	r1, r0
 8009676:	3b30      	subs	r3, #48	@ 0x30
 8009678:	220a      	movs	r2, #10
 800967a:	4630      	mov	r0, r6
 800967c:	f7ff ff76 	bl	800956c <__multadd>
 8009680:	e7ee      	b.n	8009660 <__s2b+0x68>
 8009682:	bf00      	nop
 8009684:	0800aa5d 	.word	0x0800aa5d
 8009688:	0800aadf 	.word	0x0800aadf

0800968c <__hi0bits>:
 800968c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009690:	4603      	mov	r3, r0
 8009692:	bf36      	itet	cc
 8009694:	0403      	lslcc	r3, r0, #16
 8009696:	2000      	movcs	r0, #0
 8009698:	2010      	movcc	r0, #16
 800969a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800969e:	bf3c      	itt	cc
 80096a0:	021b      	lslcc	r3, r3, #8
 80096a2:	3008      	addcc	r0, #8
 80096a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096a8:	bf3c      	itt	cc
 80096aa:	011b      	lslcc	r3, r3, #4
 80096ac:	3004      	addcc	r0, #4
 80096ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096b2:	bf3c      	itt	cc
 80096b4:	009b      	lslcc	r3, r3, #2
 80096b6:	3002      	addcc	r0, #2
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	db05      	blt.n	80096c8 <__hi0bits+0x3c>
 80096bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096c0:	f100 0001 	add.w	r0, r0, #1
 80096c4:	bf08      	it	eq
 80096c6:	2020      	moveq	r0, #32
 80096c8:	4770      	bx	lr

080096ca <__lo0bits>:
 80096ca:	6803      	ldr	r3, [r0, #0]
 80096cc:	4602      	mov	r2, r0
 80096ce:	f013 0007 	ands.w	r0, r3, #7
 80096d2:	d00b      	beq.n	80096ec <__lo0bits+0x22>
 80096d4:	07d9      	lsls	r1, r3, #31
 80096d6:	d421      	bmi.n	800971c <__lo0bits+0x52>
 80096d8:	0798      	lsls	r0, r3, #30
 80096da:	bf49      	itett	mi
 80096dc:	085b      	lsrmi	r3, r3, #1
 80096de:	089b      	lsrpl	r3, r3, #2
 80096e0:	2001      	movmi	r0, #1
 80096e2:	6013      	strmi	r3, [r2, #0]
 80096e4:	bf5c      	itt	pl
 80096e6:	6013      	strpl	r3, [r2, #0]
 80096e8:	2002      	movpl	r0, #2
 80096ea:	4770      	bx	lr
 80096ec:	b299      	uxth	r1, r3
 80096ee:	b909      	cbnz	r1, 80096f4 <__lo0bits+0x2a>
 80096f0:	0c1b      	lsrs	r3, r3, #16
 80096f2:	2010      	movs	r0, #16
 80096f4:	b2d9      	uxtb	r1, r3
 80096f6:	b909      	cbnz	r1, 80096fc <__lo0bits+0x32>
 80096f8:	3008      	adds	r0, #8
 80096fa:	0a1b      	lsrs	r3, r3, #8
 80096fc:	0719      	lsls	r1, r3, #28
 80096fe:	bf04      	itt	eq
 8009700:	091b      	lsreq	r3, r3, #4
 8009702:	3004      	addeq	r0, #4
 8009704:	0799      	lsls	r1, r3, #30
 8009706:	bf04      	itt	eq
 8009708:	089b      	lsreq	r3, r3, #2
 800970a:	3002      	addeq	r0, #2
 800970c:	07d9      	lsls	r1, r3, #31
 800970e:	d403      	bmi.n	8009718 <__lo0bits+0x4e>
 8009710:	085b      	lsrs	r3, r3, #1
 8009712:	f100 0001 	add.w	r0, r0, #1
 8009716:	d003      	beq.n	8009720 <__lo0bits+0x56>
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	4770      	bx	lr
 800971c:	2000      	movs	r0, #0
 800971e:	4770      	bx	lr
 8009720:	2020      	movs	r0, #32
 8009722:	4770      	bx	lr

08009724 <__i2b>:
 8009724:	b510      	push	{r4, lr}
 8009726:	460c      	mov	r4, r1
 8009728:	2101      	movs	r1, #1
 800972a:	f7ff febd 	bl	80094a8 <_Balloc>
 800972e:	4602      	mov	r2, r0
 8009730:	b928      	cbnz	r0, 800973e <__i2b+0x1a>
 8009732:	4b05      	ldr	r3, [pc, #20]	@ (8009748 <__i2b+0x24>)
 8009734:	4805      	ldr	r0, [pc, #20]	@ (800974c <__i2b+0x28>)
 8009736:	f240 1145 	movw	r1, #325	@ 0x145
 800973a:	f000 fc55 	bl	8009fe8 <__assert_func>
 800973e:	2301      	movs	r3, #1
 8009740:	6144      	str	r4, [r0, #20]
 8009742:	6103      	str	r3, [r0, #16]
 8009744:	bd10      	pop	{r4, pc}
 8009746:	bf00      	nop
 8009748:	0800aa5d 	.word	0x0800aa5d
 800974c:	0800aadf 	.word	0x0800aadf

08009750 <__multiply>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	4614      	mov	r4, r2
 8009756:	690a      	ldr	r2, [r1, #16]
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	429a      	cmp	r2, r3
 800975c:	bfa8      	it	ge
 800975e:	4623      	movge	r3, r4
 8009760:	460f      	mov	r7, r1
 8009762:	bfa4      	itt	ge
 8009764:	460c      	movge	r4, r1
 8009766:	461f      	movge	r7, r3
 8009768:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800976c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	6861      	ldr	r1, [r4, #4]
 8009774:	eb0a 0609 	add.w	r6, sl, r9
 8009778:	42b3      	cmp	r3, r6
 800977a:	b085      	sub	sp, #20
 800977c:	bfb8      	it	lt
 800977e:	3101      	addlt	r1, #1
 8009780:	f7ff fe92 	bl	80094a8 <_Balloc>
 8009784:	b930      	cbnz	r0, 8009794 <__multiply+0x44>
 8009786:	4602      	mov	r2, r0
 8009788:	4b44      	ldr	r3, [pc, #272]	@ (800989c <__multiply+0x14c>)
 800978a:	4845      	ldr	r0, [pc, #276]	@ (80098a0 <__multiply+0x150>)
 800978c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009790:	f000 fc2a 	bl	8009fe8 <__assert_func>
 8009794:	f100 0514 	add.w	r5, r0, #20
 8009798:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800979c:	462b      	mov	r3, r5
 800979e:	2200      	movs	r2, #0
 80097a0:	4543      	cmp	r3, r8
 80097a2:	d321      	bcc.n	80097e8 <__multiply+0x98>
 80097a4:	f107 0114 	add.w	r1, r7, #20
 80097a8:	f104 0214 	add.w	r2, r4, #20
 80097ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80097b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	1b13      	subs	r3, r2, r4
 80097b8:	3b15      	subs	r3, #21
 80097ba:	f023 0303 	bic.w	r3, r3, #3
 80097be:	3304      	adds	r3, #4
 80097c0:	f104 0715 	add.w	r7, r4, #21
 80097c4:	42ba      	cmp	r2, r7
 80097c6:	bf38      	it	cc
 80097c8:	2304      	movcc	r3, #4
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	9b02      	ldr	r3, [sp, #8]
 80097ce:	9103      	str	r1, [sp, #12]
 80097d0:	428b      	cmp	r3, r1
 80097d2:	d80c      	bhi.n	80097ee <__multiply+0x9e>
 80097d4:	2e00      	cmp	r6, #0
 80097d6:	dd03      	ble.n	80097e0 <__multiply+0x90>
 80097d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d05b      	beq.n	8009898 <__multiply+0x148>
 80097e0:	6106      	str	r6, [r0, #16]
 80097e2:	b005      	add	sp, #20
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	f843 2b04 	str.w	r2, [r3], #4
 80097ec:	e7d8      	b.n	80097a0 <__multiply+0x50>
 80097ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80097f2:	f1ba 0f00 	cmp.w	sl, #0
 80097f6:	d024      	beq.n	8009842 <__multiply+0xf2>
 80097f8:	f104 0e14 	add.w	lr, r4, #20
 80097fc:	46a9      	mov	r9, r5
 80097fe:	f04f 0c00 	mov.w	ip, #0
 8009802:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009806:	f8d9 3000 	ldr.w	r3, [r9]
 800980a:	fa1f fb87 	uxth.w	fp, r7
 800980e:	b29b      	uxth	r3, r3
 8009810:	fb0a 330b 	mla	r3, sl, fp, r3
 8009814:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009818:	f8d9 7000 	ldr.w	r7, [r9]
 800981c:	4463      	add	r3, ip
 800981e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009822:	fb0a c70b 	mla	r7, sl, fp, ip
 8009826:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800982a:	b29b      	uxth	r3, r3
 800982c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009830:	4572      	cmp	r2, lr
 8009832:	f849 3b04 	str.w	r3, [r9], #4
 8009836:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800983a:	d8e2      	bhi.n	8009802 <__multiply+0xb2>
 800983c:	9b01      	ldr	r3, [sp, #4]
 800983e:	f845 c003 	str.w	ip, [r5, r3]
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009848:	3104      	adds	r1, #4
 800984a:	f1b9 0f00 	cmp.w	r9, #0
 800984e:	d021      	beq.n	8009894 <__multiply+0x144>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	f104 0c14 	add.w	ip, r4, #20
 8009856:	46ae      	mov	lr, r5
 8009858:	f04f 0a00 	mov.w	sl, #0
 800985c:	f8bc b000 	ldrh.w	fp, [ip]
 8009860:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009864:	fb09 770b 	mla	r7, r9, fp, r7
 8009868:	4457      	add	r7, sl
 800986a:	b29b      	uxth	r3, r3
 800986c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009870:	f84e 3b04 	str.w	r3, [lr], #4
 8009874:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800987c:	f8be 3000 	ldrh.w	r3, [lr]
 8009880:	fb09 330a 	mla	r3, r9, sl, r3
 8009884:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009888:	4562      	cmp	r2, ip
 800988a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800988e:	d8e5      	bhi.n	800985c <__multiply+0x10c>
 8009890:	9f01      	ldr	r7, [sp, #4]
 8009892:	51eb      	str	r3, [r5, r7]
 8009894:	3504      	adds	r5, #4
 8009896:	e799      	b.n	80097cc <__multiply+0x7c>
 8009898:	3e01      	subs	r6, #1
 800989a:	e79b      	b.n	80097d4 <__multiply+0x84>
 800989c:	0800aa5d 	.word	0x0800aa5d
 80098a0:	0800aadf 	.word	0x0800aadf

080098a4 <__pow5mult>:
 80098a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a8:	4615      	mov	r5, r2
 80098aa:	f012 0203 	ands.w	r2, r2, #3
 80098ae:	4607      	mov	r7, r0
 80098b0:	460e      	mov	r6, r1
 80098b2:	d007      	beq.n	80098c4 <__pow5mult+0x20>
 80098b4:	4c25      	ldr	r4, [pc, #148]	@ (800994c <__pow5mult+0xa8>)
 80098b6:	3a01      	subs	r2, #1
 80098b8:	2300      	movs	r3, #0
 80098ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098be:	f7ff fe55 	bl	800956c <__multadd>
 80098c2:	4606      	mov	r6, r0
 80098c4:	10ad      	asrs	r5, r5, #2
 80098c6:	d03d      	beq.n	8009944 <__pow5mult+0xa0>
 80098c8:	69fc      	ldr	r4, [r7, #28]
 80098ca:	b97c      	cbnz	r4, 80098ec <__pow5mult+0x48>
 80098cc:	2010      	movs	r0, #16
 80098ce:	f7ff fc77 	bl	80091c0 <malloc>
 80098d2:	4602      	mov	r2, r0
 80098d4:	61f8      	str	r0, [r7, #28]
 80098d6:	b928      	cbnz	r0, 80098e4 <__pow5mult+0x40>
 80098d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009950 <__pow5mult+0xac>)
 80098da:	481e      	ldr	r0, [pc, #120]	@ (8009954 <__pow5mult+0xb0>)
 80098dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80098e0:	f000 fb82 	bl	8009fe8 <__assert_func>
 80098e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098e8:	6004      	str	r4, [r0, #0]
 80098ea:	60c4      	str	r4, [r0, #12]
 80098ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80098f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098f4:	b94c      	cbnz	r4, 800990a <__pow5mult+0x66>
 80098f6:	f240 2171 	movw	r1, #625	@ 0x271
 80098fa:	4638      	mov	r0, r7
 80098fc:	f7ff ff12 	bl	8009724 <__i2b>
 8009900:	2300      	movs	r3, #0
 8009902:	f8c8 0008 	str.w	r0, [r8, #8]
 8009906:	4604      	mov	r4, r0
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	f04f 0900 	mov.w	r9, #0
 800990e:	07eb      	lsls	r3, r5, #31
 8009910:	d50a      	bpl.n	8009928 <__pow5mult+0x84>
 8009912:	4631      	mov	r1, r6
 8009914:	4622      	mov	r2, r4
 8009916:	4638      	mov	r0, r7
 8009918:	f7ff ff1a 	bl	8009750 <__multiply>
 800991c:	4631      	mov	r1, r6
 800991e:	4680      	mov	r8, r0
 8009920:	4638      	mov	r0, r7
 8009922:	f7ff fe01 	bl	8009528 <_Bfree>
 8009926:	4646      	mov	r6, r8
 8009928:	106d      	asrs	r5, r5, #1
 800992a:	d00b      	beq.n	8009944 <__pow5mult+0xa0>
 800992c:	6820      	ldr	r0, [r4, #0]
 800992e:	b938      	cbnz	r0, 8009940 <__pow5mult+0x9c>
 8009930:	4622      	mov	r2, r4
 8009932:	4621      	mov	r1, r4
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff ff0b 	bl	8009750 <__multiply>
 800993a:	6020      	str	r0, [r4, #0]
 800993c:	f8c0 9000 	str.w	r9, [r0]
 8009940:	4604      	mov	r4, r0
 8009942:	e7e4      	b.n	800990e <__pow5mult+0x6a>
 8009944:	4630      	mov	r0, r6
 8009946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800994a:	bf00      	nop
 800994c:	0800ab38 	.word	0x0800ab38
 8009950:	0800a9ee 	.word	0x0800a9ee
 8009954:	0800aadf 	.word	0x0800aadf

08009958 <__lshift>:
 8009958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800995c:	460c      	mov	r4, r1
 800995e:	6849      	ldr	r1, [r1, #4]
 8009960:	6923      	ldr	r3, [r4, #16]
 8009962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	4607      	mov	r7, r0
 800996a:	4691      	mov	r9, r2
 800996c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009970:	f108 0601 	add.w	r6, r8, #1
 8009974:	42b3      	cmp	r3, r6
 8009976:	db0b      	blt.n	8009990 <__lshift+0x38>
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff fd95 	bl	80094a8 <_Balloc>
 800997e:	4605      	mov	r5, r0
 8009980:	b948      	cbnz	r0, 8009996 <__lshift+0x3e>
 8009982:	4602      	mov	r2, r0
 8009984:	4b28      	ldr	r3, [pc, #160]	@ (8009a28 <__lshift+0xd0>)
 8009986:	4829      	ldr	r0, [pc, #164]	@ (8009a2c <__lshift+0xd4>)
 8009988:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800998c:	f000 fb2c 	bl	8009fe8 <__assert_func>
 8009990:	3101      	adds	r1, #1
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	e7ee      	b.n	8009974 <__lshift+0x1c>
 8009996:	2300      	movs	r3, #0
 8009998:	f100 0114 	add.w	r1, r0, #20
 800999c:	f100 0210 	add.w	r2, r0, #16
 80099a0:	4618      	mov	r0, r3
 80099a2:	4553      	cmp	r3, sl
 80099a4:	db33      	blt.n	8009a0e <__lshift+0xb6>
 80099a6:	6920      	ldr	r0, [r4, #16]
 80099a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099ac:	f104 0314 	add.w	r3, r4, #20
 80099b0:	f019 091f 	ands.w	r9, r9, #31
 80099b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099bc:	d02b      	beq.n	8009a16 <__lshift+0xbe>
 80099be:	f1c9 0e20 	rsb	lr, r9, #32
 80099c2:	468a      	mov	sl, r1
 80099c4:	2200      	movs	r2, #0
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	fa00 f009 	lsl.w	r0, r0, r9
 80099cc:	4310      	orrs	r0, r2
 80099ce:	f84a 0b04 	str.w	r0, [sl], #4
 80099d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d6:	459c      	cmp	ip, r3
 80099d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80099dc:	d8f3      	bhi.n	80099c6 <__lshift+0x6e>
 80099de:	ebac 0304 	sub.w	r3, ip, r4
 80099e2:	3b15      	subs	r3, #21
 80099e4:	f023 0303 	bic.w	r3, r3, #3
 80099e8:	3304      	adds	r3, #4
 80099ea:	f104 0015 	add.w	r0, r4, #21
 80099ee:	4584      	cmp	ip, r0
 80099f0:	bf38      	it	cc
 80099f2:	2304      	movcc	r3, #4
 80099f4:	50ca      	str	r2, [r1, r3]
 80099f6:	b10a      	cbz	r2, 80099fc <__lshift+0xa4>
 80099f8:	f108 0602 	add.w	r6, r8, #2
 80099fc:	3e01      	subs	r6, #1
 80099fe:	4638      	mov	r0, r7
 8009a00:	612e      	str	r6, [r5, #16]
 8009a02:	4621      	mov	r1, r4
 8009a04:	f7ff fd90 	bl	8009528 <_Bfree>
 8009a08:	4628      	mov	r0, r5
 8009a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a12:	3301      	adds	r3, #1
 8009a14:	e7c5      	b.n	80099a2 <__lshift+0x4a>
 8009a16:	3904      	subs	r1, #4
 8009a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a20:	459c      	cmp	ip, r3
 8009a22:	d8f9      	bhi.n	8009a18 <__lshift+0xc0>
 8009a24:	e7ea      	b.n	80099fc <__lshift+0xa4>
 8009a26:	bf00      	nop
 8009a28:	0800aa5d 	.word	0x0800aa5d
 8009a2c:	0800aadf 	.word	0x0800aadf

08009a30 <__mcmp>:
 8009a30:	690a      	ldr	r2, [r1, #16]
 8009a32:	4603      	mov	r3, r0
 8009a34:	6900      	ldr	r0, [r0, #16]
 8009a36:	1a80      	subs	r0, r0, r2
 8009a38:	b530      	push	{r4, r5, lr}
 8009a3a:	d10e      	bne.n	8009a5a <__mcmp+0x2a>
 8009a3c:	3314      	adds	r3, #20
 8009a3e:	3114      	adds	r1, #20
 8009a40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a50:	4295      	cmp	r5, r2
 8009a52:	d003      	beq.n	8009a5c <__mcmp+0x2c>
 8009a54:	d205      	bcs.n	8009a62 <__mcmp+0x32>
 8009a56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a5a:	bd30      	pop	{r4, r5, pc}
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	d3f3      	bcc.n	8009a48 <__mcmp+0x18>
 8009a60:	e7fb      	b.n	8009a5a <__mcmp+0x2a>
 8009a62:	2001      	movs	r0, #1
 8009a64:	e7f9      	b.n	8009a5a <__mcmp+0x2a>
	...

08009a68 <__mdiff>:
 8009a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	4689      	mov	r9, r1
 8009a6e:	4606      	mov	r6, r0
 8009a70:	4611      	mov	r1, r2
 8009a72:	4648      	mov	r0, r9
 8009a74:	4614      	mov	r4, r2
 8009a76:	f7ff ffdb 	bl	8009a30 <__mcmp>
 8009a7a:	1e05      	subs	r5, r0, #0
 8009a7c:	d112      	bne.n	8009aa4 <__mdiff+0x3c>
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4630      	mov	r0, r6
 8009a82:	f7ff fd11 	bl	80094a8 <_Balloc>
 8009a86:	4602      	mov	r2, r0
 8009a88:	b928      	cbnz	r0, 8009a96 <__mdiff+0x2e>
 8009a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8009b88 <__mdiff+0x120>)
 8009a8c:	f240 2137 	movw	r1, #567	@ 0x237
 8009a90:	483e      	ldr	r0, [pc, #248]	@ (8009b8c <__mdiff+0x124>)
 8009a92:	f000 faa9 	bl	8009fe8 <__assert_func>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	b003      	add	sp, #12
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	bfbc      	itt	lt
 8009aa6:	464b      	movlt	r3, r9
 8009aa8:	46a1      	movlt	r9, r4
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ab0:	bfba      	itte	lt
 8009ab2:	461c      	movlt	r4, r3
 8009ab4:	2501      	movlt	r5, #1
 8009ab6:	2500      	movge	r5, #0
 8009ab8:	f7ff fcf6 	bl	80094a8 <_Balloc>
 8009abc:	4602      	mov	r2, r0
 8009abe:	b918      	cbnz	r0, 8009ac8 <__mdiff+0x60>
 8009ac0:	4b31      	ldr	r3, [pc, #196]	@ (8009b88 <__mdiff+0x120>)
 8009ac2:	f240 2145 	movw	r1, #581	@ 0x245
 8009ac6:	e7e3      	b.n	8009a90 <__mdiff+0x28>
 8009ac8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009acc:	6926      	ldr	r6, [r4, #16]
 8009ace:	60c5      	str	r5, [r0, #12]
 8009ad0:	f109 0310 	add.w	r3, r9, #16
 8009ad4:	f109 0514 	add.w	r5, r9, #20
 8009ad8:	f104 0e14 	add.w	lr, r4, #20
 8009adc:	f100 0b14 	add.w	fp, r0, #20
 8009ae0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ae4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	46d9      	mov	r9, fp
 8009aec:	f04f 0c00 	mov.w	ip, #0
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009af6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009afa:	9301      	str	r3, [sp, #4]
 8009afc:	fa1f f38a 	uxth.w	r3, sl
 8009b00:	4619      	mov	r1, r3
 8009b02:	b283      	uxth	r3, r0
 8009b04:	1acb      	subs	r3, r1, r3
 8009b06:	0c00      	lsrs	r0, r0, #16
 8009b08:	4463      	add	r3, ip
 8009b0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b18:	4576      	cmp	r6, lr
 8009b1a:	f849 3b04 	str.w	r3, [r9], #4
 8009b1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b22:	d8e5      	bhi.n	8009af0 <__mdiff+0x88>
 8009b24:	1b33      	subs	r3, r6, r4
 8009b26:	3b15      	subs	r3, #21
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	3415      	adds	r4, #21
 8009b2e:	3304      	adds	r3, #4
 8009b30:	42a6      	cmp	r6, r4
 8009b32:	bf38      	it	cc
 8009b34:	2304      	movcc	r3, #4
 8009b36:	441d      	add	r5, r3
 8009b38:	445b      	add	r3, fp
 8009b3a:	461e      	mov	r6, r3
 8009b3c:	462c      	mov	r4, r5
 8009b3e:	4544      	cmp	r4, r8
 8009b40:	d30e      	bcc.n	8009b60 <__mdiff+0xf8>
 8009b42:	f108 0103 	add.w	r1, r8, #3
 8009b46:	1b49      	subs	r1, r1, r5
 8009b48:	f021 0103 	bic.w	r1, r1, #3
 8009b4c:	3d03      	subs	r5, #3
 8009b4e:	45a8      	cmp	r8, r5
 8009b50:	bf38      	it	cc
 8009b52:	2100      	movcc	r1, #0
 8009b54:	440b      	add	r3, r1
 8009b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b5a:	b191      	cbz	r1, 8009b82 <__mdiff+0x11a>
 8009b5c:	6117      	str	r7, [r2, #16]
 8009b5e:	e79d      	b.n	8009a9c <__mdiff+0x34>
 8009b60:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b64:	46e6      	mov	lr, ip
 8009b66:	0c08      	lsrs	r0, r1, #16
 8009b68:	fa1c fc81 	uxtah	ip, ip, r1
 8009b6c:	4471      	add	r1, lr
 8009b6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b72:	b289      	uxth	r1, r1
 8009b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b78:	f846 1b04 	str.w	r1, [r6], #4
 8009b7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b80:	e7dd      	b.n	8009b3e <__mdiff+0xd6>
 8009b82:	3f01      	subs	r7, #1
 8009b84:	e7e7      	b.n	8009b56 <__mdiff+0xee>
 8009b86:	bf00      	nop
 8009b88:	0800aa5d 	.word	0x0800aa5d
 8009b8c:	0800aadf 	.word	0x0800aadf

08009b90 <__ulp>:
 8009b90:	b082      	sub	sp, #8
 8009b92:	ed8d 0b00 	vstr	d0, [sp]
 8009b96:	9a01      	ldr	r2, [sp, #4]
 8009b98:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd8 <__ulp+0x48>)
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dc08      	bgt.n	8009bb6 <__ulp+0x26>
 8009ba4:	425b      	negs	r3, r3
 8009ba6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009baa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009bae:	da04      	bge.n	8009bba <__ulp+0x2a>
 8009bb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009bb4:	4113      	asrs	r3, r2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	e008      	b.n	8009bcc <__ulp+0x3c>
 8009bba:	f1a2 0314 	sub.w	r3, r2, #20
 8009bbe:	2b1e      	cmp	r3, #30
 8009bc0:	bfda      	itte	le
 8009bc2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009bc6:	40da      	lsrle	r2, r3
 8009bc8:	2201      	movgt	r2, #1
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	ec41 0b10 	vmov	d0, r0, r1
 8009bd4:	b002      	add	sp, #8
 8009bd6:	4770      	bx	lr
 8009bd8:	7ff00000 	.word	0x7ff00000

08009bdc <__b2d>:
 8009bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be0:	6906      	ldr	r6, [r0, #16]
 8009be2:	f100 0814 	add.w	r8, r0, #20
 8009be6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009bea:	1f37      	subs	r7, r6, #4
 8009bec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f7ff fd4b 	bl	800968c <__hi0bits>
 8009bf6:	f1c0 0320 	rsb	r3, r0, #32
 8009bfa:	280a      	cmp	r0, #10
 8009bfc:	600b      	str	r3, [r1, #0]
 8009bfe:	491b      	ldr	r1, [pc, #108]	@ (8009c6c <__b2d+0x90>)
 8009c00:	dc15      	bgt.n	8009c2e <__b2d+0x52>
 8009c02:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c06:	fa22 f30c 	lsr.w	r3, r2, ip
 8009c0a:	45b8      	cmp	r8, r7
 8009c0c:	ea43 0501 	orr.w	r5, r3, r1
 8009c10:	bf34      	ite	cc
 8009c12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c16:	2300      	movcs	r3, #0
 8009c18:	3015      	adds	r0, #21
 8009c1a:	fa02 f000 	lsl.w	r0, r2, r0
 8009c1e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009c22:	4303      	orrs	r3, r0
 8009c24:	461c      	mov	r4, r3
 8009c26:	ec45 4b10 	vmov	d0, r4, r5
 8009c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c2e:	45b8      	cmp	r8, r7
 8009c30:	bf3a      	itte	cc
 8009c32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c36:	f1a6 0708 	subcc.w	r7, r6, #8
 8009c3a:	2300      	movcs	r3, #0
 8009c3c:	380b      	subs	r0, #11
 8009c3e:	d012      	beq.n	8009c66 <__b2d+0x8a>
 8009c40:	f1c0 0120 	rsb	r1, r0, #32
 8009c44:	fa23 f401 	lsr.w	r4, r3, r1
 8009c48:	4082      	lsls	r2, r0
 8009c4a:	4322      	orrs	r2, r4
 8009c4c:	4547      	cmp	r7, r8
 8009c4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009c52:	bf8c      	ite	hi
 8009c54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009c58:	2200      	movls	r2, #0
 8009c5a:	4083      	lsls	r3, r0
 8009c5c:	40ca      	lsrs	r2, r1
 8009c5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009c62:	4313      	orrs	r3, r2
 8009c64:	e7de      	b.n	8009c24 <__b2d+0x48>
 8009c66:	ea42 0501 	orr.w	r5, r2, r1
 8009c6a:	e7db      	b.n	8009c24 <__b2d+0x48>
 8009c6c:	3ff00000 	.word	0x3ff00000

08009c70 <__d2b>:
 8009c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	460f      	mov	r7, r1
 8009c76:	2101      	movs	r1, #1
 8009c78:	ec59 8b10 	vmov	r8, r9, d0
 8009c7c:	4616      	mov	r6, r2
 8009c7e:	f7ff fc13 	bl	80094a8 <_Balloc>
 8009c82:	4604      	mov	r4, r0
 8009c84:	b930      	cbnz	r0, 8009c94 <__d2b+0x24>
 8009c86:	4602      	mov	r2, r0
 8009c88:	4b23      	ldr	r3, [pc, #140]	@ (8009d18 <__d2b+0xa8>)
 8009c8a:	4824      	ldr	r0, [pc, #144]	@ (8009d1c <__d2b+0xac>)
 8009c8c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c90:	f000 f9aa 	bl	8009fe8 <__assert_func>
 8009c94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c9c:	b10d      	cbz	r5, 8009ca2 <__d2b+0x32>
 8009c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ca8:	d023      	beq.n	8009cf2 <__d2b+0x82>
 8009caa:	4668      	mov	r0, sp
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	f7ff fd0c 	bl	80096ca <__lo0bits>
 8009cb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cb6:	b1d0      	cbz	r0, 8009cee <__d2b+0x7e>
 8009cb8:	f1c0 0320 	rsb	r3, r0, #32
 8009cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc0:	430b      	orrs	r3, r1
 8009cc2:	40c2      	lsrs	r2, r0
 8009cc4:	6163      	str	r3, [r4, #20]
 8009cc6:	9201      	str	r2, [sp, #4]
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	61a3      	str	r3, [r4, #24]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	bf0c      	ite	eq
 8009cd0:	2201      	moveq	r2, #1
 8009cd2:	2202      	movne	r2, #2
 8009cd4:	6122      	str	r2, [r4, #16]
 8009cd6:	b1a5      	cbz	r5, 8009d02 <__d2b+0x92>
 8009cd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009cdc:	4405      	add	r5, r0
 8009cde:	603d      	str	r5, [r7, #0]
 8009ce0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009ce4:	6030      	str	r0, [r6, #0]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	b003      	add	sp, #12
 8009cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cee:	6161      	str	r1, [r4, #20]
 8009cf0:	e7ea      	b.n	8009cc8 <__d2b+0x58>
 8009cf2:	a801      	add	r0, sp, #4
 8009cf4:	f7ff fce9 	bl	80096ca <__lo0bits>
 8009cf8:	9b01      	ldr	r3, [sp, #4]
 8009cfa:	6163      	str	r3, [r4, #20]
 8009cfc:	3020      	adds	r0, #32
 8009cfe:	2201      	movs	r2, #1
 8009d00:	e7e8      	b.n	8009cd4 <__d2b+0x64>
 8009d02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d0a:	6038      	str	r0, [r7, #0]
 8009d0c:	6918      	ldr	r0, [r3, #16]
 8009d0e:	f7ff fcbd 	bl	800968c <__hi0bits>
 8009d12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d16:	e7e5      	b.n	8009ce4 <__d2b+0x74>
 8009d18:	0800aa5d 	.word	0x0800aa5d
 8009d1c:	0800aadf 	.word	0x0800aadf

08009d20 <__ratio>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	b085      	sub	sp, #20
 8009d26:	e9cd 1000 	strd	r1, r0, [sp]
 8009d2a:	a902      	add	r1, sp, #8
 8009d2c:	f7ff ff56 	bl	8009bdc <__b2d>
 8009d30:	9800      	ldr	r0, [sp, #0]
 8009d32:	a903      	add	r1, sp, #12
 8009d34:	ec55 4b10 	vmov	r4, r5, d0
 8009d38:	f7ff ff50 	bl	8009bdc <__b2d>
 8009d3c:	9b01      	ldr	r3, [sp, #4]
 8009d3e:	6919      	ldr	r1, [r3, #16]
 8009d40:	9b00      	ldr	r3, [sp, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	1ac9      	subs	r1, r1, r3
 8009d46:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d4a:	1a9b      	subs	r3, r3, r2
 8009d4c:	ec5b ab10 	vmov	sl, fp, d0
 8009d50:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bfce      	itee	gt
 8009d58:	462a      	movgt	r2, r5
 8009d5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d5e:	465a      	movle	r2, fp
 8009d60:	462f      	mov	r7, r5
 8009d62:	46d9      	mov	r9, fp
 8009d64:	bfcc      	ite	gt
 8009d66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d6a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009d6e:	464b      	mov	r3, r9
 8009d70:	4652      	mov	r2, sl
 8009d72:	4620      	mov	r0, r4
 8009d74:	4639      	mov	r1, r7
 8009d76:	f7f6 fd91 	bl	800089c <__aeabi_ddiv>
 8009d7a:	ec41 0b10 	vmov	d0, r0, r1
 8009d7e:	b005      	add	sp, #20
 8009d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d84 <__copybits>:
 8009d84:	3901      	subs	r1, #1
 8009d86:	b570      	push	{r4, r5, r6, lr}
 8009d88:	1149      	asrs	r1, r1, #5
 8009d8a:	6914      	ldr	r4, [r2, #16]
 8009d8c:	3101      	adds	r1, #1
 8009d8e:	f102 0314 	add.w	r3, r2, #20
 8009d92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d9a:	1f05      	subs	r5, r0, #4
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	d30c      	bcc.n	8009dba <__copybits+0x36>
 8009da0:	1aa3      	subs	r3, r4, r2
 8009da2:	3b11      	subs	r3, #17
 8009da4:	f023 0303 	bic.w	r3, r3, #3
 8009da8:	3211      	adds	r2, #17
 8009daa:	42a2      	cmp	r2, r4
 8009dac:	bf88      	it	hi
 8009dae:	2300      	movhi	r3, #0
 8009db0:	4418      	add	r0, r3
 8009db2:	2300      	movs	r3, #0
 8009db4:	4288      	cmp	r0, r1
 8009db6:	d305      	bcc.n	8009dc4 <__copybits+0x40>
 8009db8:	bd70      	pop	{r4, r5, r6, pc}
 8009dba:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dbe:	f845 6f04 	str.w	r6, [r5, #4]!
 8009dc2:	e7eb      	b.n	8009d9c <__copybits+0x18>
 8009dc4:	f840 3b04 	str.w	r3, [r0], #4
 8009dc8:	e7f4      	b.n	8009db4 <__copybits+0x30>

08009dca <__any_on>:
 8009dca:	f100 0214 	add.w	r2, r0, #20
 8009dce:	6900      	ldr	r0, [r0, #16]
 8009dd0:	114b      	asrs	r3, r1, #5
 8009dd2:	4298      	cmp	r0, r3
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	db11      	blt.n	8009dfc <__any_on+0x32>
 8009dd8:	dd0a      	ble.n	8009df0 <__any_on+0x26>
 8009dda:	f011 011f 	ands.w	r1, r1, #31
 8009dde:	d007      	beq.n	8009df0 <__any_on+0x26>
 8009de0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009de4:	fa24 f001 	lsr.w	r0, r4, r1
 8009de8:	fa00 f101 	lsl.w	r1, r0, r1
 8009dec:	428c      	cmp	r4, r1
 8009dee:	d10b      	bne.n	8009e08 <__any_on+0x3e>
 8009df0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d803      	bhi.n	8009e00 <__any_on+0x36>
 8009df8:	2000      	movs	r0, #0
 8009dfa:	bd10      	pop	{r4, pc}
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	e7f7      	b.n	8009df0 <__any_on+0x26>
 8009e00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e04:	2900      	cmp	r1, #0
 8009e06:	d0f5      	beq.n	8009df4 <__any_on+0x2a>
 8009e08:	2001      	movs	r0, #1
 8009e0a:	e7f6      	b.n	8009dfa <__any_on+0x30>

08009e0c <__sread>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	460c      	mov	r4, r1
 8009e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e14:	f000 f8b4 	bl	8009f80 <_read_r>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	bfab      	itete	ge
 8009e1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e20:	181b      	addge	r3, r3, r0
 8009e22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e26:	bfac      	ite	ge
 8009e28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e2a:	81a3      	strhlt	r3, [r4, #12]
 8009e2c:	bd10      	pop	{r4, pc}

08009e2e <__swrite>:
 8009e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e32:	461f      	mov	r7, r3
 8009e34:	898b      	ldrh	r3, [r1, #12]
 8009e36:	05db      	lsls	r3, r3, #23
 8009e38:	4605      	mov	r5, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	d505      	bpl.n	8009e4c <__swrite+0x1e>
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	2302      	movs	r3, #2
 8009e46:	2200      	movs	r2, #0
 8009e48:	f000 f888 	bl	8009f5c <_lseek_r>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	f000 b8af 	b.w	8009fc4 <_write_r>

08009e66 <__sseek>:
 8009e66:	b510      	push	{r4, lr}
 8009e68:	460c      	mov	r4, r1
 8009e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6e:	f000 f875 	bl	8009f5c <_lseek_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	bf15      	itete	ne
 8009e78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e82:	81a3      	strheq	r3, [r4, #12]
 8009e84:	bf18      	it	ne
 8009e86:	81a3      	strhne	r3, [r4, #12]
 8009e88:	bd10      	pop	{r4, pc}

08009e8a <__sclose>:
 8009e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8e:	f000 b855 	b.w	8009f3c <_close_r>

08009e92 <_realloc_r>:
 8009e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e96:	4680      	mov	r8, r0
 8009e98:	4615      	mov	r5, r2
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	b921      	cbnz	r1, 8009ea8 <_realloc_r+0x16>
 8009e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	f7ff b9b6 	b.w	8009214 <_malloc_r>
 8009ea8:	b92a      	cbnz	r2, 8009eb6 <_realloc_r+0x24>
 8009eaa:	f000 f8cf 	bl	800a04c <_free_r>
 8009eae:	2400      	movs	r4, #0
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb6:	f000 f913 	bl	800a0e0 <_malloc_usable_size_r>
 8009eba:	4285      	cmp	r5, r0
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	d802      	bhi.n	8009ec6 <_realloc_r+0x34>
 8009ec0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ec4:	d8f4      	bhi.n	8009eb0 <_realloc_r+0x1e>
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4640      	mov	r0, r8
 8009eca:	f7ff f9a3 	bl	8009214 <_malloc_r>
 8009ece:	4607      	mov	r7, r0
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d0ec      	beq.n	8009eae <_realloc_r+0x1c>
 8009ed4:	42b5      	cmp	r5, r6
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	4621      	mov	r1, r4
 8009eda:	bf28      	it	cs
 8009edc:	4632      	movcs	r2, r6
 8009ede:	f7fd fe72 	bl	8007bc6 <memcpy>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	f000 f8b1 	bl	800a04c <_free_r>
 8009eea:	463c      	mov	r4, r7
 8009eec:	e7e0      	b.n	8009eb0 <_realloc_r+0x1e>

08009eee <__ascii_wctomb>:
 8009eee:	4603      	mov	r3, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	b141      	cbz	r1, 8009f06 <__ascii_wctomb+0x18>
 8009ef4:	2aff      	cmp	r2, #255	@ 0xff
 8009ef6:	d904      	bls.n	8009f02 <__ascii_wctomb+0x14>
 8009ef8:	228a      	movs	r2, #138	@ 0x8a
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f00:	4770      	bx	lr
 8009f02:	700a      	strb	r2, [r1, #0]
 8009f04:	2001      	movs	r0, #1
 8009f06:	4770      	bx	lr

08009f08 <memmove>:
 8009f08:	4288      	cmp	r0, r1
 8009f0a:	b510      	push	{r4, lr}
 8009f0c:	eb01 0402 	add.w	r4, r1, r2
 8009f10:	d902      	bls.n	8009f18 <memmove+0x10>
 8009f12:	4284      	cmp	r4, r0
 8009f14:	4623      	mov	r3, r4
 8009f16:	d807      	bhi.n	8009f28 <memmove+0x20>
 8009f18:	1e43      	subs	r3, r0, #1
 8009f1a:	42a1      	cmp	r1, r4
 8009f1c:	d008      	beq.n	8009f30 <memmove+0x28>
 8009f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f26:	e7f8      	b.n	8009f1a <memmove+0x12>
 8009f28:	4402      	add	r2, r0
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	428a      	cmp	r2, r1
 8009f2e:	d100      	bne.n	8009f32 <memmove+0x2a>
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f3a:	e7f7      	b.n	8009f2c <memmove+0x24>

08009f3c <_close_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d06      	ldr	r5, [pc, #24]	@ (8009f58 <_close_r+0x1c>)
 8009f40:	2300      	movs	r3, #0
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	f7f7 fcff 	bl	800194a <_close>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_close_r+0x1a>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_close_r+0x1a>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	200003dc 	.word	0x200003dc

08009f5c <_lseek_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d07      	ldr	r5, [pc, #28]	@ (8009f7c <_lseek_r+0x20>)
 8009f60:	4604      	mov	r4, r0
 8009f62:	4608      	mov	r0, r1
 8009f64:	4611      	mov	r1, r2
 8009f66:	2200      	movs	r2, #0
 8009f68:	602a      	str	r2, [r5, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f7f7 fd14 	bl	8001998 <_lseek>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_lseek_r+0x1e>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_lseek_r+0x1e>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	200003dc 	.word	0x200003dc

08009f80 <_read_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d07      	ldr	r5, [pc, #28]	@ (8009fa0 <_read_r+0x20>)
 8009f84:	4604      	mov	r4, r0
 8009f86:	4608      	mov	r0, r1
 8009f88:	4611      	mov	r1, r2
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	602a      	str	r2, [r5, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f7f7 fca2 	bl	80018d8 <_read>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_read_r+0x1e>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_read_r+0x1e>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	200003dc 	.word	0x200003dc

08009fa4 <_sbrk_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d06      	ldr	r5, [pc, #24]	@ (8009fc0 <_sbrk_r+0x1c>)
 8009fa8:	2300      	movs	r3, #0
 8009faa:	4604      	mov	r4, r0
 8009fac:	4608      	mov	r0, r1
 8009fae:	602b      	str	r3, [r5, #0]
 8009fb0:	f7f7 fd00 	bl	80019b4 <_sbrk>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d102      	bne.n	8009fbe <_sbrk_r+0x1a>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	b103      	cbz	r3, 8009fbe <_sbrk_r+0x1a>
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	200003dc 	.word	0x200003dc

08009fc4 <_write_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d07      	ldr	r5, [pc, #28]	@ (8009fe4 <_write_r+0x20>)
 8009fc8:	4604      	mov	r4, r0
 8009fca:	4608      	mov	r0, r1
 8009fcc:	4611      	mov	r1, r2
 8009fce:	2200      	movs	r2, #0
 8009fd0:	602a      	str	r2, [r5, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f7f7 fc9d 	bl	8001912 <_write>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_write_r+0x1e>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_write_r+0x1e>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	200003dc 	.word	0x200003dc

08009fe8 <__assert_func>:
 8009fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fea:	4614      	mov	r4, r2
 8009fec:	461a      	mov	r2, r3
 8009fee:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <__assert_func+0x2c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	68d8      	ldr	r0, [r3, #12]
 8009ff6:	b954      	cbnz	r4, 800a00e <__assert_func+0x26>
 8009ff8:	4b07      	ldr	r3, [pc, #28]	@ (800a018 <__assert_func+0x30>)
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a000:	9100      	str	r1, [sp, #0]
 800a002:	462b      	mov	r3, r5
 800a004:	4905      	ldr	r1, [pc, #20]	@ (800a01c <__assert_func+0x34>)
 800a006:	f000 f873 	bl	800a0f0 <fiprintf>
 800a00a:	f000 f883 	bl	800a114 <abort>
 800a00e:	4b04      	ldr	r3, [pc, #16]	@ (800a020 <__assert_func+0x38>)
 800a010:	e7f4      	b.n	8009ffc <__assert_func+0x14>
 800a012:	bf00      	nop
 800a014:	20000184 	.word	0x20000184
 800a018:	0800ac73 	.word	0x0800ac73
 800a01c:	0800ac45 	.word	0x0800ac45
 800a020:	0800ac38 	.word	0x0800ac38

0800a024 <_calloc_r>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	fba1 5402 	umull	r5, r4, r1, r2
 800a02a:	b93c      	cbnz	r4, 800a03c <_calloc_r+0x18>
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7ff f8f1 	bl	8009214 <_malloc_r>
 800a032:	4606      	mov	r6, r0
 800a034:	b928      	cbnz	r0, 800a042 <_calloc_r+0x1e>
 800a036:	2600      	movs	r6, #0
 800a038:	4630      	mov	r0, r6
 800a03a:	bd70      	pop	{r4, r5, r6, pc}
 800a03c:	220c      	movs	r2, #12
 800a03e:	6002      	str	r2, [r0, #0]
 800a040:	e7f9      	b.n	800a036 <_calloc_r+0x12>
 800a042:	462a      	mov	r2, r5
 800a044:	4621      	mov	r1, r4
 800a046:	f7fd fd85 	bl	8007b54 <memset>
 800a04a:	e7f5      	b.n	800a038 <_calloc_r+0x14>

0800a04c <_free_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4605      	mov	r5, r0
 800a050:	2900      	cmp	r1, #0
 800a052:	d041      	beq.n	800a0d8 <_free_r+0x8c>
 800a054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a058:	1f0c      	subs	r4, r1, #4
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	bfb8      	it	lt
 800a05e:	18e4      	addlt	r4, r4, r3
 800a060:	f7ff fa16 	bl	8009490 <__malloc_lock>
 800a064:	4a1d      	ldr	r2, [pc, #116]	@ (800a0dc <_free_r+0x90>)
 800a066:	6813      	ldr	r3, [r2, #0]
 800a068:	b933      	cbnz	r3, 800a078 <_free_r+0x2c>
 800a06a:	6063      	str	r3, [r4, #4]
 800a06c:	6014      	str	r4, [r2, #0]
 800a06e:	4628      	mov	r0, r5
 800a070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a074:	f7ff ba12 	b.w	800949c <__malloc_unlock>
 800a078:	42a3      	cmp	r3, r4
 800a07a:	d908      	bls.n	800a08e <_free_r+0x42>
 800a07c:	6820      	ldr	r0, [r4, #0]
 800a07e:	1821      	adds	r1, r4, r0
 800a080:	428b      	cmp	r3, r1
 800a082:	bf01      	itttt	eq
 800a084:	6819      	ldreq	r1, [r3, #0]
 800a086:	685b      	ldreq	r3, [r3, #4]
 800a088:	1809      	addeq	r1, r1, r0
 800a08a:	6021      	streq	r1, [r4, #0]
 800a08c:	e7ed      	b.n	800a06a <_free_r+0x1e>
 800a08e:	461a      	mov	r2, r3
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	b10b      	cbz	r3, 800a098 <_free_r+0x4c>
 800a094:	42a3      	cmp	r3, r4
 800a096:	d9fa      	bls.n	800a08e <_free_r+0x42>
 800a098:	6811      	ldr	r1, [r2, #0]
 800a09a:	1850      	adds	r0, r2, r1
 800a09c:	42a0      	cmp	r0, r4
 800a09e:	d10b      	bne.n	800a0b8 <_free_r+0x6c>
 800a0a0:	6820      	ldr	r0, [r4, #0]
 800a0a2:	4401      	add	r1, r0
 800a0a4:	1850      	adds	r0, r2, r1
 800a0a6:	4283      	cmp	r3, r0
 800a0a8:	6011      	str	r1, [r2, #0]
 800a0aa:	d1e0      	bne.n	800a06e <_free_r+0x22>
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	6053      	str	r3, [r2, #4]
 800a0b2:	4408      	add	r0, r1
 800a0b4:	6010      	str	r0, [r2, #0]
 800a0b6:	e7da      	b.n	800a06e <_free_r+0x22>
 800a0b8:	d902      	bls.n	800a0c0 <_free_r+0x74>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	e7d6      	b.n	800a06e <_free_r+0x22>
 800a0c0:	6820      	ldr	r0, [r4, #0]
 800a0c2:	1821      	adds	r1, r4, r0
 800a0c4:	428b      	cmp	r3, r1
 800a0c6:	bf04      	itt	eq
 800a0c8:	6819      	ldreq	r1, [r3, #0]
 800a0ca:	685b      	ldreq	r3, [r3, #4]
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	bf04      	itt	eq
 800a0d0:	1809      	addeq	r1, r1, r0
 800a0d2:	6021      	streq	r1, [r4, #0]
 800a0d4:	6054      	str	r4, [r2, #4]
 800a0d6:	e7ca      	b.n	800a06e <_free_r+0x22>
 800a0d8:	bd38      	pop	{r3, r4, r5, pc}
 800a0da:	bf00      	nop
 800a0dc:	200003d8 	.word	0x200003d8

0800a0e0 <_malloc_usable_size_r>:
 800a0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e4:	1f18      	subs	r0, r3, #4
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	bfbc      	itt	lt
 800a0ea:	580b      	ldrlt	r3, [r1, r0]
 800a0ec:	18c0      	addlt	r0, r0, r3
 800a0ee:	4770      	bx	lr

0800a0f0 <fiprintf>:
 800a0f0:	b40e      	push	{r1, r2, r3}
 800a0f2:	b503      	push	{r0, r1, lr}
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	ab03      	add	r3, sp, #12
 800a0f8:	4805      	ldr	r0, [pc, #20]	@ (800a110 <fiprintf+0x20>)
 800a0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0fe:	6800      	ldr	r0, [r0, #0]
 800a100:	9301      	str	r3, [sp, #4]
 800a102:	f000 f837 	bl	800a174 <_vfiprintf_r>
 800a106:	b002      	add	sp, #8
 800a108:	f85d eb04 	ldr.w	lr, [sp], #4
 800a10c:	b003      	add	sp, #12
 800a10e:	4770      	bx	lr
 800a110:	20000184 	.word	0x20000184

0800a114 <abort>:
 800a114:	b508      	push	{r3, lr}
 800a116:	2006      	movs	r0, #6
 800a118:	f000 fa84 	bl	800a624 <raise>
 800a11c:	2001      	movs	r0, #1
 800a11e:	f7f7 fbd0 	bl	80018c2 <_exit>

0800a122 <__sfputc_r>:
 800a122:	6893      	ldr	r3, [r2, #8]
 800a124:	3b01      	subs	r3, #1
 800a126:	2b00      	cmp	r3, #0
 800a128:	b410      	push	{r4}
 800a12a:	6093      	str	r3, [r2, #8]
 800a12c:	da08      	bge.n	800a140 <__sfputc_r+0x1e>
 800a12e:	6994      	ldr	r4, [r2, #24]
 800a130:	42a3      	cmp	r3, r4
 800a132:	db01      	blt.n	800a138 <__sfputc_r+0x16>
 800a134:	290a      	cmp	r1, #10
 800a136:	d103      	bne.n	800a140 <__sfputc_r+0x1e>
 800a138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a13c:	f000 b932 	b.w	800a3a4 <__swbuf_r>
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	1c58      	adds	r0, r3, #1
 800a144:	6010      	str	r0, [r2, #0]
 800a146:	7019      	strb	r1, [r3, #0]
 800a148:	4608      	mov	r0, r1
 800a14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <__sfputs_r>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	4606      	mov	r6, r0
 800a154:	460f      	mov	r7, r1
 800a156:	4614      	mov	r4, r2
 800a158:	18d5      	adds	r5, r2, r3
 800a15a:	42ac      	cmp	r4, r5
 800a15c:	d101      	bne.n	800a162 <__sfputs_r+0x12>
 800a15e:	2000      	movs	r0, #0
 800a160:	e007      	b.n	800a172 <__sfputs_r+0x22>
 800a162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a166:	463a      	mov	r2, r7
 800a168:	4630      	mov	r0, r6
 800a16a:	f7ff ffda 	bl	800a122 <__sfputc_r>
 800a16e:	1c43      	adds	r3, r0, #1
 800a170:	d1f3      	bne.n	800a15a <__sfputs_r+0xa>
 800a172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a174 <_vfiprintf_r>:
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a178:	460d      	mov	r5, r1
 800a17a:	b09d      	sub	sp, #116	@ 0x74
 800a17c:	4614      	mov	r4, r2
 800a17e:	4698      	mov	r8, r3
 800a180:	4606      	mov	r6, r0
 800a182:	b118      	cbz	r0, 800a18c <_vfiprintf_r+0x18>
 800a184:	6a03      	ldr	r3, [r0, #32]
 800a186:	b90b      	cbnz	r3, 800a18c <_vfiprintf_r+0x18>
 800a188:	f7fc fe18 	bl	8006dbc <__sinit>
 800a18c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a18e:	07d9      	lsls	r1, r3, #31
 800a190:	d405      	bmi.n	800a19e <_vfiprintf_r+0x2a>
 800a192:	89ab      	ldrh	r3, [r5, #12]
 800a194:	059a      	lsls	r2, r3, #22
 800a196:	d402      	bmi.n	800a19e <_vfiprintf_r+0x2a>
 800a198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a19a:	f7fd fd12 	bl	8007bc2 <__retarget_lock_acquire_recursive>
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	071b      	lsls	r3, r3, #28
 800a1a2:	d501      	bpl.n	800a1a8 <_vfiprintf_r+0x34>
 800a1a4:	692b      	ldr	r3, [r5, #16]
 800a1a6:	b99b      	cbnz	r3, 800a1d0 <_vfiprintf_r+0x5c>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f000 f938 	bl	800a420 <__swsetup_r>
 800a1b0:	b170      	cbz	r0, 800a1d0 <_vfiprintf_r+0x5c>
 800a1b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1b4:	07dc      	lsls	r4, r3, #31
 800a1b6:	d504      	bpl.n	800a1c2 <_vfiprintf_r+0x4e>
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1bc:	b01d      	add	sp, #116	@ 0x74
 800a1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c2:	89ab      	ldrh	r3, [r5, #12]
 800a1c4:	0598      	lsls	r0, r3, #22
 800a1c6:	d4f7      	bmi.n	800a1b8 <_vfiprintf_r+0x44>
 800a1c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1ca:	f7fd fcfb 	bl	8007bc4 <__retarget_lock_release_recursive>
 800a1ce:	e7f3      	b.n	800a1b8 <_vfiprintf_r+0x44>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1de:	2330      	movs	r3, #48	@ 0x30
 800a1e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a390 <_vfiprintf_r+0x21c>
 800a1e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1e8:	f04f 0901 	mov.w	r9, #1
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	469a      	mov	sl, r3
 800a1f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f4:	b10a      	cbz	r2, 800a1fa <_vfiprintf_r+0x86>
 800a1f6:	2a25      	cmp	r2, #37	@ 0x25
 800a1f8:	d1f9      	bne.n	800a1ee <_vfiprintf_r+0x7a>
 800a1fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a1fe:	d00b      	beq.n	800a218 <_vfiprintf_r+0xa4>
 800a200:	465b      	mov	r3, fp
 800a202:	4622      	mov	r2, r4
 800a204:	4629      	mov	r1, r5
 800a206:	4630      	mov	r0, r6
 800a208:	f7ff ffa2 	bl	800a150 <__sfputs_r>
 800a20c:	3001      	adds	r0, #1
 800a20e:	f000 80a7 	beq.w	800a360 <_vfiprintf_r+0x1ec>
 800a212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a214:	445a      	add	r2, fp
 800a216:	9209      	str	r2, [sp, #36]	@ 0x24
 800a218:	f89a 3000 	ldrb.w	r3, [sl]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 809f 	beq.w	800a360 <_vfiprintf_r+0x1ec>
 800a222:	2300      	movs	r3, #0
 800a224:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a22c:	f10a 0a01 	add.w	sl, sl, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	9307      	str	r3, [sp, #28]
 800a234:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a238:	931a      	str	r3, [sp, #104]	@ 0x68
 800a23a:	4654      	mov	r4, sl
 800a23c:	2205      	movs	r2, #5
 800a23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a242:	4853      	ldr	r0, [pc, #332]	@ (800a390 <_vfiprintf_r+0x21c>)
 800a244:	f7f5 ffec 	bl	8000220 <memchr>
 800a248:	9a04      	ldr	r2, [sp, #16]
 800a24a:	b9d8      	cbnz	r0, 800a284 <_vfiprintf_r+0x110>
 800a24c:	06d1      	lsls	r1, r2, #27
 800a24e:	bf44      	itt	mi
 800a250:	2320      	movmi	r3, #32
 800a252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a256:	0713      	lsls	r3, r2, #28
 800a258:	bf44      	itt	mi
 800a25a:	232b      	movmi	r3, #43	@ 0x2b
 800a25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a260:	f89a 3000 	ldrb.w	r3, [sl]
 800a264:	2b2a      	cmp	r3, #42	@ 0x2a
 800a266:	d015      	beq.n	800a294 <_vfiprintf_r+0x120>
 800a268:	9a07      	ldr	r2, [sp, #28]
 800a26a:	4654      	mov	r4, sl
 800a26c:	2000      	movs	r0, #0
 800a26e:	f04f 0c0a 	mov.w	ip, #10
 800a272:	4621      	mov	r1, r4
 800a274:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a278:	3b30      	subs	r3, #48	@ 0x30
 800a27a:	2b09      	cmp	r3, #9
 800a27c:	d94b      	bls.n	800a316 <_vfiprintf_r+0x1a2>
 800a27e:	b1b0      	cbz	r0, 800a2ae <_vfiprintf_r+0x13a>
 800a280:	9207      	str	r2, [sp, #28]
 800a282:	e014      	b.n	800a2ae <_vfiprintf_r+0x13a>
 800a284:	eba0 0308 	sub.w	r3, r0, r8
 800a288:	fa09 f303 	lsl.w	r3, r9, r3
 800a28c:	4313      	orrs	r3, r2
 800a28e:	9304      	str	r3, [sp, #16]
 800a290:	46a2      	mov	sl, r4
 800a292:	e7d2      	b.n	800a23a <_vfiprintf_r+0xc6>
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	1d19      	adds	r1, r3, #4
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	9103      	str	r1, [sp, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	bfbb      	ittet	lt
 800a2a0:	425b      	neglt	r3, r3
 800a2a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a2a6:	9307      	strge	r3, [sp, #28]
 800a2a8:	9307      	strlt	r3, [sp, #28]
 800a2aa:	bfb8      	it	lt
 800a2ac:	9204      	strlt	r2, [sp, #16]
 800a2ae:	7823      	ldrb	r3, [r4, #0]
 800a2b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2b2:	d10a      	bne.n	800a2ca <_vfiprintf_r+0x156>
 800a2b4:	7863      	ldrb	r3, [r4, #1]
 800a2b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2b8:	d132      	bne.n	800a320 <_vfiprintf_r+0x1ac>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	1d1a      	adds	r2, r3, #4
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	9203      	str	r2, [sp, #12]
 800a2c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2c6:	3402      	adds	r4, #2
 800a2c8:	9305      	str	r3, [sp, #20]
 800a2ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3a0 <_vfiprintf_r+0x22c>
 800a2ce:	7821      	ldrb	r1, [r4, #0]
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	f7f5 ffa4 	bl	8000220 <memchr>
 800a2d8:	b138      	cbz	r0, 800a2ea <_vfiprintf_r+0x176>
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	eba0 000a 	sub.w	r0, r0, sl
 800a2e0:	2240      	movs	r2, #64	@ 0x40
 800a2e2:	4082      	lsls	r2, r0
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	3401      	adds	r4, #1
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ee:	4829      	ldr	r0, [pc, #164]	@ (800a394 <_vfiprintf_r+0x220>)
 800a2f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2f4:	2206      	movs	r2, #6
 800a2f6:	f7f5 ff93 	bl	8000220 <memchr>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d03f      	beq.n	800a37e <_vfiprintf_r+0x20a>
 800a2fe:	4b26      	ldr	r3, [pc, #152]	@ (800a398 <_vfiprintf_r+0x224>)
 800a300:	bb1b      	cbnz	r3, 800a34a <_vfiprintf_r+0x1d6>
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	3307      	adds	r3, #7
 800a306:	f023 0307 	bic.w	r3, r3, #7
 800a30a:	3308      	adds	r3, #8
 800a30c:	9303      	str	r3, [sp, #12]
 800a30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a310:	443b      	add	r3, r7
 800a312:	9309      	str	r3, [sp, #36]	@ 0x24
 800a314:	e76a      	b.n	800a1ec <_vfiprintf_r+0x78>
 800a316:	fb0c 3202 	mla	r2, ip, r2, r3
 800a31a:	460c      	mov	r4, r1
 800a31c:	2001      	movs	r0, #1
 800a31e:	e7a8      	b.n	800a272 <_vfiprintf_r+0xfe>
 800a320:	2300      	movs	r3, #0
 800a322:	3401      	adds	r4, #1
 800a324:	9305      	str	r3, [sp, #20]
 800a326:	4619      	mov	r1, r3
 800a328:	f04f 0c0a 	mov.w	ip, #10
 800a32c:	4620      	mov	r0, r4
 800a32e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a332:	3a30      	subs	r2, #48	@ 0x30
 800a334:	2a09      	cmp	r2, #9
 800a336:	d903      	bls.n	800a340 <_vfiprintf_r+0x1cc>
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d0c6      	beq.n	800a2ca <_vfiprintf_r+0x156>
 800a33c:	9105      	str	r1, [sp, #20]
 800a33e:	e7c4      	b.n	800a2ca <_vfiprintf_r+0x156>
 800a340:	fb0c 2101 	mla	r1, ip, r1, r2
 800a344:	4604      	mov	r4, r0
 800a346:	2301      	movs	r3, #1
 800a348:	e7f0      	b.n	800a32c <_vfiprintf_r+0x1b8>
 800a34a:	ab03      	add	r3, sp, #12
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	462a      	mov	r2, r5
 800a350:	4b12      	ldr	r3, [pc, #72]	@ (800a39c <_vfiprintf_r+0x228>)
 800a352:	a904      	add	r1, sp, #16
 800a354:	4630      	mov	r0, r6
 800a356:	f7fb feb9 	bl	80060cc <_printf_float>
 800a35a:	4607      	mov	r7, r0
 800a35c:	1c78      	adds	r0, r7, #1
 800a35e:	d1d6      	bne.n	800a30e <_vfiprintf_r+0x19a>
 800a360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a362:	07d9      	lsls	r1, r3, #31
 800a364:	d405      	bmi.n	800a372 <_vfiprintf_r+0x1fe>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	059a      	lsls	r2, r3, #22
 800a36a:	d402      	bmi.n	800a372 <_vfiprintf_r+0x1fe>
 800a36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a36e:	f7fd fc29 	bl	8007bc4 <__retarget_lock_release_recursive>
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	065b      	lsls	r3, r3, #25
 800a376:	f53f af1f 	bmi.w	800a1b8 <_vfiprintf_r+0x44>
 800a37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a37c:	e71e      	b.n	800a1bc <_vfiprintf_r+0x48>
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	462a      	mov	r2, r5
 800a384:	4b05      	ldr	r3, [pc, #20]	@ (800a39c <_vfiprintf_r+0x228>)
 800a386:	a904      	add	r1, sp, #16
 800a388:	4630      	mov	r0, r6
 800a38a:	f7fc f937 	bl	80065fc <_printf_i>
 800a38e:	e7e4      	b.n	800a35a <_vfiprintf_r+0x1e6>
 800a390:	0800aace 	.word	0x0800aace
 800a394:	0800aad8 	.word	0x0800aad8
 800a398:	080060cd 	.word	0x080060cd
 800a39c:	0800a151 	.word	0x0800a151
 800a3a0:	0800aad4 	.word	0x0800aad4

0800a3a4 <__swbuf_r>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	460e      	mov	r6, r1
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	b118      	cbz	r0, 800a3b6 <__swbuf_r+0x12>
 800a3ae:	6a03      	ldr	r3, [r0, #32]
 800a3b0:	b90b      	cbnz	r3, 800a3b6 <__swbuf_r+0x12>
 800a3b2:	f7fc fd03 	bl	8006dbc <__sinit>
 800a3b6:	69a3      	ldr	r3, [r4, #24]
 800a3b8:	60a3      	str	r3, [r4, #8]
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	071a      	lsls	r2, r3, #28
 800a3be:	d501      	bpl.n	800a3c4 <__swbuf_r+0x20>
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	b943      	cbnz	r3, 800a3d6 <__swbuf_r+0x32>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f000 f82a 	bl	800a420 <__swsetup_r>
 800a3cc:	b118      	cbz	r0, 800a3d6 <__swbuf_r+0x32>
 800a3ce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	6922      	ldr	r2, [r4, #16]
 800a3da:	1a98      	subs	r0, r3, r2
 800a3dc:	6963      	ldr	r3, [r4, #20]
 800a3de:	b2f6      	uxtb	r6, r6
 800a3e0:	4283      	cmp	r3, r0
 800a3e2:	4637      	mov	r7, r6
 800a3e4:	dc05      	bgt.n	800a3f2 <__swbuf_r+0x4e>
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f7ff f829 	bl	8009440 <_fflush_r>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d1ed      	bne.n	800a3ce <__swbuf_r+0x2a>
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	60a3      	str	r3, [r4, #8]
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	6022      	str	r2, [r4, #0]
 800a3fe:	701e      	strb	r6, [r3, #0]
 800a400:	6962      	ldr	r2, [r4, #20]
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	429a      	cmp	r2, r3
 800a406:	d004      	beq.n	800a412 <__swbuf_r+0x6e>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	07db      	lsls	r3, r3, #31
 800a40c:	d5e1      	bpl.n	800a3d2 <__swbuf_r+0x2e>
 800a40e:	2e0a      	cmp	r6, #10
 800a410:	d1df      	bne.n	800a3d2 <__swbuf_r+0x2e>
 800a412:	4621      	mov	r1, r4
 800a414:	4628      	mov	r0, r5
 800a416:	f7ff f813 	bl	8009440 <_fflush_r>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d0d9      	beq.n	800a3d2 <__swbuf_r+0x2e>
 800a41e:	e7d6      	b.n	800a3ce <__swbuf_r+0x2a>

0800a420 <__swsetup_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4b29      	ldr	r3, [pc, #164]	@ (800a4c8 <__swsetup_r+0xa8>)
 800a424:	4605      	mov	r5, r0
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	460c      	mov	r4, r1
 800a42a:	b118      	cbz	r0, 800a434 <__swsetup_r+0x14>
 800a42c:	6a03      	ldr	r3, [r0, #32]
 800a42e:	b90b      	cbnz	r3, 800a434 <__swsetup_r+0x14>
 800a430:	f7fc fcc4 	bl	8006dbc <__sinit>
 800a434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a438:	0719      	lsls	r1, r3, #28
 800a43a:	d422      	bmi.n	800a482 <__swsetup_r+0x62>
 800a43c:	06da      	lsls	r2, r3, #27
 800a43e:	d407      	bmi.n	800a450 <__swsetup_r+0x30>
 800a440:	2209      	movs	r2, #9
 800a442:	602a      	str	r2, [r5, #0]
 800a444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a448:	81a3      	strh	r3, [r4, #12]
 800a44a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a44e:	e033      	b.n	800a4b8 <__swsetup_r+0x98>
 800a450:	0758      	lsls	r0, r3, #29
 800a452:	d512      	bpl.n	800a47a <__swsetup_r+0x5a>
 800a454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a456:	b141      	cbz	r1, 800a46a <__swsetup_r+0x4a>
 800a458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a45c:	4299      	cmp	r1, r3
 800a45e:	d002      	beq.n	800a466 <__swsetup_r+0x46>
 800a460:	4628      	mov	r0, r5
 800a462:	f7ff fdf3 	bl	800a04c <_free_r>
 800a466:	2300      	movs	r3, #0
 800a468:	6363      	str	r3, [r4, #52]	@ 0x34
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	2300      	movs	r3, #0
 800a474:	6063      	str	r3, [r4, #4]
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f043 0308 	orr.w	r3, r3, #8
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	b94b      	cbnz	r3, 800a49a <__swsetup_r+0x7a>
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a48c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a490:	d003      	beq.n	800a49a <__swsetup_r+0x7a>
 800a492:	4621      	mov	r1, r4
 800a494:	4628      	mov	r0, r5
 800a496:	f000 f83f 	bl	800a518 <__smakebuf_r>
 800a49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a49e:	f013 0201 	ands.w	r2, r3, #1
 800a4a2:	d00a      	beq.n	800a4ba <__swsetup_r+0x9a>
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	60a2      	str	r2, [r4, #8]
 800a4a8:	6962      	ldr	r2, [r4, #20]
 800a4aa:	4252      	negs	r2, r2
 800a4ac:	61a2      	str	r2, [r4, #24]
 800a4ae:	6922      	ldr	r2, [r4, #16]
 800a4b0:	b942      	cbnz	r2, 800a4c4 <__swsetup_r+0xa4>
 800a4b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4b6:	d1c5      	bne.n	800a444 <__swsetup_r+0x24>
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ba:	0799      	lsls	r1, r3, #30
 800a4bc:	bf58      	it	pl
 800a4be:	6962      	ldrpl	r2, [r4, #20]
 800a4c0:	60a2      	str	r2, [r4, #8]
 800a4c2:	e7f4      	b.n	800a4ae <__swsetup_r+0x8e>
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e7f7      	b.n	800a4b8 <__swsetup_r+0x98>
 800a4c8:	20000184 	.word	0x20000184

0800a4cc <__swhatbuf_r>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	b096      	sub	sp, #88	@ 0x58
 800a4d8:	4615      	mov	r5, r2
 800a4da:	461e      	mov	r6, r3
 800a4dc:	da0d      	bge.n	800a4fa <__swhatbuf_r+0x2e>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a4e4:	f04f 0100 	mov.w	r1, #0
 800a4e8:	bf14      	ite	ne
 800a4ea:	2340      	movne	r3, #64	@ 0x40
 800a4ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	6031      	str	r1, [r6, #0]
 800a4f4:	602b      	str	r3, [r5, #0]
 800a4f6:	b016      	add	sp, #88	@ 0x58
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	466a      	mov	r2, sp
 800a4fc:	f000 f848 	bl	800a590 <_fstat_r>
 800a500:	2800      	cmp	r0, #0
 800a502:	dbec      	blt.n	800a4de <__swhatbuf_r+0x12>
 800a504:	9901      	ldr	r1, [sp, #4]
 800a506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a50a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a50e:	4259      	negs	r1, r3
 800a510:	4159      	adcs	r1, r3
 800a512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a516:	e7eb      	b.n	800a4f0 <__swhatbuf_r+0x24>

0800a518 <__smakebuf_r>:
 800a518:	898b      	ldrh	r3, [r1, #12]
 800a51a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a51c:	079d      	lsls	r5, r3, #30
 800a51e:	4606      	mov	r6, r0
 800a520:	460c      	mov	r4, r1
 800a522:	d507      	bpl.n	800a534 <__smakebuf_r+0x1c>
 800a524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	6123      	str	r3, [r4, #16]
 800a52c:	2301      	movs	r3, #1
 800a52e:	6163      	str	r3, [r4, #20]
 800a530:	b003      	add	sp, #12
 800a532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a534:	ab01      	add	r3, sp, #4
 800a536:	466a      	mov	r2, sp
 800a538:	f7ff ffc8 	bl	800a4cc <__swhatbuf_r>
 800a53c:	9f00      	ldr	r7, [sp, #0]
 800a53e:	4605      	mov	r5, r0
 800a540:	4639      	mov	r1, r7
 800a542:	4630      	mov	r0, r6
 800a544:	f7fe fe66 	bl	8009214 <_malloc_r>
 800a548:	b948      	cbnz	r0, 800a55e <__smakebuf_r+0x46>
 800a54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54e:	059a      	lsls	r2, r3, #22
 800a550:	d4ee      	bmi.n	800a530 <__smakebuf_r+0x18>
 800a552:	f023 0303 	bic.w	r3, r3, #3
 800a556:	f043 0302 	orr.w	r3, r3, #2
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	e7e2      	b.n	800a524 <__smakebuf_r+0xc>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	6020      	str	r0, [r4, #0]
 800a562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a56e:	b15b      	cbz	r3, 800a588 <__smakebuf_r+0x70>
 800a570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a574:	4630      	mov	r0, r6
 800a576:	f000 f81d 	bl	800a5b4 <_isatty_r>
 800a57a:	b128      	cbz	r0, 800a588 <__smakebuf_r+0x70>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f023 0303 	bic.w	r3, r3, #3
 800a582:	f043 0301 	orr.w	r3, r3, #1
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	431d      	orrs	r5, r3
 800a58c:	81a5      	strh	r5, [r4, #12]
 800a58e:	e7cf      	b.n	800a530 <__smakebuf_r+0x18>

0800a590 <_fstat_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	4d07      	ldr	r5, [pc, #28]	@ (800a5b0 <_fstat_r+0x20>)
 800a594:	2300      	movs	r3, #0
 800a596:	4604      	mov	r4, r0
 800a598:	4608      	mov	r0, r1
 800a59a:	4611      	mov	r1, r2
 800a59c:	602b      	str	r3, [r5, #0]
 800a59e:	f7f7 f9e0 	bl	8001962 <_fstat>
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	d102      	bne.n	800a5ac <_fstat_r+0x1c>
 800a5a6:	682b      	ldr	r3, [r5, #0]
 800a5a8:	b103      	cbz	r3, 800a5ac <_fstat_r+0x1c>
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	bd38      	pop	{r3, r4, r5, pc}
 800a5ae:	bf00      	nop
 800a5b0:	200003dc 	.word	0x200003dc

0800a5b4 <_isatty_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d06      	ldr	r5, [pc, #24]	@ (800a5d0 <_isatty_r+0x1c>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	f7f7 f9df 	bl	8001982 <_isatty>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_isatty_r+0x1a>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_isatty_r+0x1a>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	200003dc 	.word	0x200003dc

0800a5d4 <_raise_r>:
 800a5d4:	291f      	cmp	r1, #31
 800a5d6:	b538      	push	{r3, r4, r5, lr}
 800a5d8:	4605      	mov	r5, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	d904      	bls.n	800a5e8 <_raise_r+0x14>
 800a5de:	2316      	movs	r3, #22
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5ea:	b112      	cbz	r2, 800a5f2 <_raise_r+0x1e>
 800a5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5f0:	b94b      	cbnz	r3, 800a606 <_raise_r+0x32>
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	f000 f830 	bl	800a658 <_getpid_r>
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a602:	f000 b817 	b.w	800a634 <_kill_r>
 800a606:	2b01      	cmp	r3, #1
 800a608:	d00a      	beq.n	800a620 <_raise_r+0x4c>
 800a60a:	1c59      	adds	r1, r3, #1
 800a60c:	d103      	bne.n	800a616 <_raise_r+0x42>
 800a60e:	2316      	movs	r3, #22
 800a610:	6003      	str	r3, [r0, #0]
 800a612:	2001      	movs	r0, #1
 800a614:	e7e7      	b.n	800a5e6 <_raise_r+0x12>
 800a616:	2100      	movs	r1, #0
 800a618:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a61c:	4620      	mov	r0, r4
 800a61e:	4798      	blx	r3
 800a620:	2000      	movs	r0, #0
 800a622:	e7e0      	b.n	800a5e6 <_raise_r+0x12>

0800a624 <raise>:
 800a624:	4b02      	ldr	r3, [pc, #8]	@ (800a630 <raise+0xc>)
 800a626:	4601      	mov	r1, r0
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f7ff bfd3 	b.w	800a5d4 <_raise_r>
 800a62e:	bf00      	nop
 800a630:	20000184 	.word	0x20000184

0800a634 <_kill_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d07      	ldr	r5, [pc, #28]	@ (800a654 <_kill_r+0x20>)
 800a638:	2300      	movs	r3, #0
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	4611      	mov	r1, r2
 800a640:	602b      	str	r3, [r5, #0]
 800a642:	f7f7 f92e 	bl	80018a2 <_kill>
 800a646:	1c43      	adds	r3, r0, #1
 800a648:	d102      	bne.n	800a650 <_kill_r+0x1c>
 800a64a:	682b      	ldr	r3, [r5, #0]
 800a64c:	b103      	cbz	r3, 800a650 <_kill_r+0x1c>
 800a64e:	6023      	str	r3, [r4, #0]
 800a650:	bd38      	pop	{r3, r4, r5, pc}
 800a652:	bf00      	nop
 800a654:	200003dc 	.word	0x200003dc

0800a658 <_getpid_r>:
 800a658:	f7f7 b91b 	b.w	8001892 <_getpid>

0800a65c <_init>:
 800a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65e:	bf00      	nop
 800a660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a662:	bc08      	pop	{r3}
 800a664:	469e      	mov	lr, r3
 800a666:	4770      	bx	lr

0800a668 <_fini>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	bf00      	nop
 800a66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a66e:	bc08      	pop	{r3}
 800a670:	469e      	mov	lr, r3
 800a672:	4770      	bx	lr
