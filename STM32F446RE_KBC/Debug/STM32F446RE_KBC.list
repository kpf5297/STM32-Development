
STM32F446RE_KBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d06c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800d240  0800d240  0000e240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d718  0800d718  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d718  0800d718  0000e718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d720  0800d720  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d720  0800d720  0000e720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d724  0800d724  0000e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d728  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c70  200001d8  0800d900  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e48  0800d900  0000fe48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2a2  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c40  00000000  00000000  000294aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0002d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001162  00000000  00000000  0002e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000528b  00000000  00000000  0002f8c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191ab  00000000  00000000  00034b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd7b7  00000000  00000000  0004dcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b4af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007154  00000000  00000000  0012b4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00132648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d224 	.word	0x0800d224

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800d224 	.word	0x0800d224

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
#define TIMCLOCK 90000000 // 90MHz
#define PRESCALER 90  // 90MHz / 90 = 1MHz

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint8_t receivedByte;
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]

  if (huart->Instance == USART2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a13      	ldr	r2, [pc, #76]	@ (80010c0 <HAL_UART_RxCpltCallback+0x60>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d11f      	bne.n	80010b6 <HAL_UART_RxCpltCallback+0x56>
  {
    receivedByte = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
    xQueueSendFromISR(uartRxQueue, &receivedByte, &xHigherPriorityTaskWoken);
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <HAL_UART_RxCpltCallback+0x64>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	f107 0208 	add.w	r2, r7, #8
 8001088:	f107 010f 	add.w	r1, r7, #15
 800108c:	2300      	movs	r3, #0
 800108e:	f005 fd89 	bl	8006ba4 <xQueueGenericSendFromISR>

    // Re-enable UART receive interrupt
    HAL_UART_Receive_IT(huart, &receivedByte, 1);
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f004 f969 	bl	8005372 <HAL_UART_Receive_IT>

    // If sending from ISR wakes a higher priority task, yield
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_UART_RxCpltCallback+0x56>
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_UART_RxCpltCallback+0x68>)
 80010a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	f3bf 8f6f 	isb	sy
  }
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40004400 	.word	0x40004400
 80010c4:	20000330 	.word	0x20000330
 80010c8:	e000ed04 	.word	0xe000ed04

080010cc <HAL_TIM_IC_CaptureCallback>:

uint32_t ICValue = 0;
uint32_t Frequency = 0;
float Duty = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // If interrupt is triggered by channel 1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7f1b      	ldrb	r3, [r3, #28]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d124      	bne.n	8001126 <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010dc:	2100      	movs	r1, #0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f003 faa2 	bl	8004628 <HAL_TIM_ReadCapturedValue>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <HAL_TIM_IC_CaptureCallback+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_TIM_IC_CaptureCallback+0x64>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d019      	beq.n	8001126 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			// Calc the duty cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 80010f2:	2104      	movs	r1, #4
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f003 fa97 	bl	8004628 <HAL_TIM_ReadCapturedValue>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2264      	movs	r2, #100	@ 0x64
 80010fe:	fb03 f202 	mul.w	r2, r3, r2
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001114:	edc3 7a00 	vstr	s15, [r3]

			Frequency = 90000000/ICValue;
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_TIM_IC_CaptureCallback+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_TIM_IC_CaptureCallback+0x70>)
 8001124:	6013      	str	r3, [r2, #0]
		}
	}
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000334 	.word	0x20000334
 8001134:	2000033c 	.word	0x2000033c
 8001138:	055d4a80 	.word	0x055d4a80
 800113c:	20000338 	.word	0x20000338

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 febe 	bl	8001ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f834 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f000 fa00 	bl	8001550 <MX_GPIO_Init>
  MX_DMA_Init();
 8001150:	f000 f9de 	bl	8001510 <MX_DMA_Init>
  MX_TIM2_Init();
 8001154:	f000 f8a0 	bl	8001298 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001158:	f000 f9b0 	bl	80014bc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800115c:	f000 f910 	bl	8001380 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 50;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <main+0x5c>)
 8001162:	2232      	movs	r2, #50	@ 0x32
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001166:	2100      	movs	r1, #0
 8001168:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <main+0x60>)
 800116a:	f002 fcbb 	bl	8003ae4 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800116e:	2100      	movs	r1, #0
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <main+0x64>)
 8001172:	f002 fdd9 	bl	8003d28 <HAL_TIM_IC_Start_IT>

  tasks_init(); // Initialize tasks and FreeRTOS components
 8001176:	f000 fd53 	bl	8001c20 <tasks_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800117a:	f005 f8b9 	bl	80062f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <main+0x68>)
 8001180:	2100      	movs	r1, #0
 8001182:	480a      	ldr	r0, [pc, #40]	@ (80011ac <main+0x6c>)
 8001184:	f005 f8fe 	bl	8006384 <osThreadNew>
 8001188:	4603      	mov	r3, r0
 800118a:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <main+0x70>)
 800118c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  vTaskStartScheduler();
 800118e:	f006 fafb 	bl	8007788 <vTaskStartScheduler>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001192:	f005 f8d1 	bl	8006338 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001196:	bf00      	nop
 8001198:	e7fd      	b.n	8001196 <main+0x56>
 800119a:	bf00      	nop
 800119c:	40010000 	.word	0x40010000
 80011a0:	200001f4 	.word	0x200001f4
 80011a4:	2000023c 	.word	0x2000023c
 80011a8:	0800d2b0 	.word	0x0800d2b0
 80011ac:	080015d5 	.word	0x080015d5
 80011b0:	2000032c 	.word	0x2000032c

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	@ 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2234      	movs	r2, #52	@ 0x34
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f009 fc42 	bl	800aa4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <SystemClock_Config+0xdc>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001290 <SystemClock_Config+0xdc>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e8:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <SystemClock_Config+0xdc>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <SystemClock_Config+0xe0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <SystemClock_Config+0xe0>)
 80011fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <SystemClock_Config+0xe0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001210:	2301      	movs	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001218:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121a:	2302      	movs	r3, #2
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800121e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001222:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001224:	2304      	movs	r3, #4
 8001226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001228:	23b4      	movs	r3, #180	@ 0xb4
 800122a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001230:	2302      	movs	r3, #2
 8001232:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001234:	2302      	movs	r3, #2
 8001236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f899 	bl	8003374 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001248:	f000 f9de 	bl	8001608 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800124c:	f001 fcc6 	bl	8002bdc <HAL_PWREx_EnableOverDrive>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001256:	f000 f9d7 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001266:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001270:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2105      	movs	r1, #5
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fcff 	bl	8002c7c <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001284:	f000 f9c0 	bl	8001608 <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	3750      	adds	r7, #80	@ 0x50
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	@ 0x38
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c8:	4b2c      	ldr	r3, [pc, #176]	@ (800137c <MX_TIM2_Init+0xe4>)
 80012ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80012d0:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <MX_TIM2_Init+0xe4>)
 80012d2:	2259      	movs	r2, #89	@ 0x59
 80012d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <MX_TIM2_Init+0xe4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <MX_TIM2_Init+0xe4>)
 80012de:	2263      	movs	r2, #99	@ 0x63
 80012e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <MX_TIM2_Init+0xe4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <MX_TIM2_Init+0xe4>)
 80012ea:	2280      	movs	r2, #128	@ 0x80
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ee:	4823      	ldr	r0, [pc, #140]	@ (800137c <MX_TIM2_Init+0xe4>)
 80012f0:	f002 fade 	bl	80038b0 <HAL_TIM_Base_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80012fa:	f000 f985 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001304:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001308:	4619      	mov	r1, r3
 800130a:	481c      	ldr	r0, [pc, #112]	@ (800137c <MX_TIM2_Init+0xe4>)
 800130c:	f003 f882 	bl	8004414 <HAL_TIM_ConfigClockSource>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001316:	f000 f977 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800131a:	4818      	ldr	r0, [pc, #96]	@ (800137c <MX_TIM2_Init+0xe4>)
 800131c:	f002 fb88 	bl	8003a30 <HAL_TIM_PWM_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001326:	f000 f96f 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	4619      	mov	r1, r3
 8001338:	4810      	ldr	r0, [pc, #64]	@ (800137c <MX_TIM2_Init+0xe4>)
 800133a:	f003 feaf 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001344:	f000 f960 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001348:	2360      	movs	r3, #96	@ 0x60
 800134a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <MX_TIM2_Init+0xe4>)
 8001360:	f002 ff96 	bl	8004290 <HAL_TIM_PWM_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800136a:	f000 f94d 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800136e:	4803      	ldr	r0, [pc, #12]	@ (800137c <MX_TIM2_Init+0xe4>)
 8001370:	f000 fa14 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	@ 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001f4 	.word	0x200001f4

08001380 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b090      	sub	sp, #64	@ 0x40
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ba:	4b3e      	ldr	r3, [pc, #248]	@ (80014b4 <MX_TIM3_Init+0x134>)
 80013bc:	4a3e      	ldr	r2, [pc, #248]	@ (80014b8 <MX_TIM3_Init+0x138>)
 80013be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013c0:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <MX_TIM3_Init+0x134>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <MX_TIM3_Init+0x134>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <MX_TIM3_Init+0x134>)
 80013ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <MX_TIM3_Init+0x134>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <MX_TIM3_Init+0x134>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013e0:	4834      	ldr	r0, [pc, #208]	@ (80014b4 <MX_TIM3_Init+0x134>)
 80013e2:	f002 fa65 	bl	80038b0 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013ec:	f000 f90c 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013fa:	4619      	mov	r1, r3
 80013fc:	482d      	ldr	r0, [pc, #180]	@ (80014b4 <MX_TIM3_Init+0x134>)
 80013fe:	f003 f809 	bl	8004414 <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001408:	f000 f8fe 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800140c:	4829      	ldr	r0, [pc, #164]	@ (80014b4 <MX_TIM3_Init+0x134>)
 800140e:	f002 fc31 	bl	8003c74 <HAL_TIM_IC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001418:	f000 f8f6 	bl	8001608 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800141c:	2304      	movs	r3, #4
 800141e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001420:	2350      	movs	r3, #80	@ 0x50
 8001422:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	481f      	ldr	r0, [pc, #124]	@ (80014b4 <MX_TIM3_Init+0x134>)
 8001438:	f003 f8b3 	bl	80045a2 <HAL_TIM_SlaveConfigSynchro>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001442:	f000 f8e1 	bl	8001608 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800144a:	2301      	movs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	4815      	ldr	r0, [pc, #84]	@ (80014b4 <MX_TIM3_Init+0x134>)
 8001460:	f002 fe7a 	bl	8004158 <HAL_TIM_IC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800146a:	f000 f8cd 	bl	8001608 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800146e:	2302      	movs	r3, #2
 8001470:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001472:	2302      	movs	r3, #2
 8001474:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2204      	movs	r2, #4
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <MX_TIM3_Init+0x134>)
 8001480:	f002 fe6a 	bl	8004158 <HAL_TIM_IC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 800148a:	f000 f8bd 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_TIM3_Init+0x134>)
 800149c:	f003 fdfe 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 80014a6:	f000 f8af 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3740      	adds	r7, #64	@ 0x40
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000023c 	.word	0x2000023c
 80014b8:	40000400 	.word	0x40000400

080014bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_USART2_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f003 fe62 	bl	80051bc <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f000 f883 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200002e4 	.word	0x200002e4
 800150c:	40004400 	.word	0x40004400

08001510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_DMA_Init+0x3c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <MX_DMA_Init+0x3c>)
 8001520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_DMA_Init+0x3c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2105      	movs	r1, #5
 8001536:	2010      	movs	r0, #16
 8001538:	f000 fde2 	bl	8002100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800153c:	2010      	movs	r0, #16
 800153e:	f000 fdfb 	bl	8002138 <HAL_NVIC_EnableIRQ>

}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_GPIO_Init+0x7c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <MX_GPIO_Init+0x7c>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_GPIO_Init+0x7c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_GPIO_Init+0x7c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <MX_GPIO_Init+0x7c>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_GPIO_Init+0x7c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2120      	movs	r1, #32
 80015a2:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <MX_GPIO_Init+0x80>)
 80015a4:	f001 fae6 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015a8:	2320      	movs	r3, #32
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_GPIO_Init+0x80>)
 80015c0:	f001 f944 	bl	800284c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015dc:	2001      	movs	r0, #1
 80015de:	f004 ff63 	bl	80064a8 <osDelay>
 80015e2:	e7fb      	b.n	80015dc <StartDefaultTask+0x8>

080015e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80015f6:	f000 fc87 	bl	8001f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40010000 	.word	0x40010000

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_MspInit+0x54>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <HAL_MspInit+0x54>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <HAL_MspInit+0x54>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_MspInit+0x54>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_MspInit+0x54>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HAL_MspInit+0x54>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	f06f 0001 	mvn.w	r0, #1
 800165a:	f000 fd51 	bl	8002100 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800168c:	d13e      	bne.n	800170c <HAL_TIM_Base_MspInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a3c      	ldr	r2, [pc, #240]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b3a      	ldr	r3, [pc, #232]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016ac:	4a38      	ldr	r2, [pc, #224]	@ (8001790 <HAL_TIM_Base_MspInit+0x124>)
 80016ae:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80016b0:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016b2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80016b6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016ba:	2240      	movs	r2, #64	@ 0x40
 80016bc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016be:	4b33      	ldr	r3, [pc, #204]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016c4:	4b31      	ldr	r3, [pc, #196]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ca:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016cc:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016da:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80016dc:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e8:	4b28      	ldr	r3, [pc, #160]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80016ee:	4827      	ldr	r0, [pc, #156]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 80016f0:	f000 fd30 	bl	8002154 <HAL_DMA_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_TIM_Base_MspInit+0x92>
    {
      Error_Handler();
 80016fa:	f7ff ff85 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a22      	ldr	r2, [pc, #136]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24
 8001704:	4a21      	ldr	r2, [pc, #132]	@ (800178c <HAL_TIM_Base_MspInit+0x120>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800170a:	e038      	b.n	800177e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a20      	ldr	r2, [pc, #128]	@ (8001794 <HAL_TIM_Base_MspInit+0x128>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d133      	bne.n	800177e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a1a      	ldr	r2, [pc, #104]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a13      	ldr	r2, [pc, #76]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_TIM_Base_MspInit+0x11c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800174e:	2340      	movs	r3, #64	@ 0x40
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800175e:	2302      	movs	r3, #2
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480b      	ldr	r0, [pc, #44]	@ (8001798 <HAL_TIM_Base_MspInit+0x12c>)
 800176a:	f001 f86f 	bl	800284c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2105      	movs	r1, #5
 8001772:	201d      	movs	r0, #29
 8001774:	f000 fcc4 	bl	8002100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001778:	201d      	movs	r0, #29
 800177a:	f000 fcdd 	bl	8002138 <HAL_NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	20000284 	.word	0x20000284
 8001790:	40026088 	.word	0x40026088
 8001794:	40000400 	.word	0x40000400
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017bc:	d11d      	bne.n	80017fa <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_TIM_MspPostInit+0x68>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <HAL_TIM_MspPostInit+0x68>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <HAL_TIM_MspPostInit+0x68>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017da:	2301      	movs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <HAL_TIM_MspPostInit+0x6c>)
 80017f6:	f001 f829 	bl	800284c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000

0800180c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1d      	ldr	r2, [pc, #116]	@ (80018a0 <HAL_UART_MspInit+0x94>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d133      	bne.n	8001896 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <HAL_UART_MspInit+0x98>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a1b      	ldr	r2, [pc, #108]	@ (80018a4 <HAL_UART_MspInit+0x98>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <HAL_UART_MspInit+0x98>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <HAL_UART_MspInit+0x98>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <HAL_UART_MspInit+0x98>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_UART_MspInit+0x98>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001866:	230c      	movs	r3, #12
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001876:	2307      	movs	r3, #7
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4809      	ldr	r0, [pc, #36]	@ (80018a8 <HAL_UART_MspInit+0x9c>)
 8001882:	f000 ffe3 	bl	800284c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	2026      	movs	r0, #38	@ 0x26
 800188c:	f000 fc38 	bl	8002100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001890:	2026      	movs	r0, #38	@ 0x26
 8001892:	f000 fc51 	bl	8002138 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40004400 	.word	0x40004400
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <HAL_InitTick+0xd4>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001980 <HAL_InitTick+0xd4>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80018cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001980 <HAL_InitTick+0xd4>)
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 fae4 	bl	8002eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80018e8:	f001 face 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 80018ec:	4603      	mov	r3, r0
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f4:	4a23      	ldr	r2, [pc, #140]	@ (8001984 <HAL_InitTick+0xd8>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0c9b      	lsrs	r3, r3, #18
 80018fc:	3b01      	subs	r3, #1
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_InitTick+0xdc>)
 8001902:	4a22      	ldr	r2, [pc, #136]	@ (800198c <HAL_InitTick+0xe0>)
 8001904:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <HAL_InitTick+0xdc>)
 8001908:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800190c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800190e:	4a1e      	ldr	r2, [pc, #120]	@ (8001988 <HAL_InitTick+0xdc>)
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001914:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <HAL_InitTick+0xdc>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <HAL_InitTick+0xdc>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_InitTick+0xdc>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001926:	4818      	ldr	r0, [pc, #96]	@ (8001988 <HAL_InitTick+0xdc>)
 8001928:	f001 ffc2 	bl	80038b0 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11b      	bne.n	8001972 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800193a:	4813      	ldr	r0, [pc, #76]	@ (8001988 <HAL_InitTick+0xdc>)
 800193c:	f002 f808 	bl	8003950 <HAL_TIM_Base_Start_IT>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800194a:	2b00      	cmp	r3, #0
 800194c:	d111      	bne.n	8001972 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800194e:	2019      	movs	r0, #25
 8001950:	f000 fbf2 	bl	8002138 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b0f      	cmp	r3, #15
 8001958:	d808      	bhi.n	800196c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800195a:	2200      	movs	r2, #0
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	2019      	movs	r0, #25
 8001960:	f000 fbce 	bl	8002100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001964:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <HAL_InitTick+0xe4>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e002      	b.n	8001972 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001976:	4618      	mov	r0, r3
 8001978:	3730      	adds	r7, #48	@ 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	431bde83 	.word	0x431bde83
 8001988:	20000340 	.word	0x20000340
 800198c:	40010000 	.word	0x40010000
 8001990:	20000004 	.word	0x20000004

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <NMI_Handler+0x4>

0800199c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <MemManage_Handler+0x4>

080019ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <UsageFault_Handler+0x4>

080019bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA1_Stream5_IRQHandler+0x10>)
 80019d2:	f000 fcff 	bl	80023d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000284 	.word	0x20000284

080019e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019e6:	f002 fac7 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000340 	.word	0x20000340

080019f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <TIM3_IRQHandler+0x10>)
 80019fa:	f002 fabd 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000023c 	.word	0x2000023c

08001a08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <USART2_IRQHandler+0x10>)
 8001a0e:	f003 fcd5 	bl	80053bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002e4 	.word	0x200002e4

08001a1c <_getpid>:
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	2301      	movs	r3, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_kill>:
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	f009 f823 	bl	800aa80 <__errno>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2216      	movs	r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_exit>:
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffe7 	bl	8001a2c <_kill>
 8001a5e:	bf00      	nop
 8001a60:	e7fd      	b.n	8001a5e <_exit+0x12>

08001a62 <_read>:
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e00a      	b.n	8001a8a <_read+0x28>
 8001a74:	f3af 8000 	nop.w
 8001a78:	4601      	mov	r1, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	60ba      	str	r2, [r7, #8]
 8001a80:	b2ca      	uxtb	r2, r1
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dbf0      	blt.n	8001a74 <_read+0x12>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_write>:
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e009      	b.n	8001ac2 <_write+0x26>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	60ba      	str	r2, [r7, #8]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f888 	bl	8001bcc <__io_putchar>
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dbf1      	blt.n	8001aae <_write+0x12>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_close>:
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_fstat>:
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	2300      	movs	r3, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_isatty>:
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	2301      	movs	r3, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_lseek>:
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_sbrk>:
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
 8001b6c:	f008 ff88 	bl	800aa80 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20020000 	.word	0x20020000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	20000388 	.word	0x20000388
 8001ba4:	20004e48 	.word	0x20004e48

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__io_putchar>:
 *         This function is called when a byte is received over UART.
 *         It sends the received byte to the FreeRTOS queue for processing.
 * @param  huart: pointer to the UART handle
 */
int __io_putchar(int ch)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    if (xPrintfSemaphore != NULL)
 8001bd4:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <__io_putchar+0x4c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d017      	beq.n	8001c0c <__io_putchar+0x40>
    {
        if (xSemaphoreTake(xPrintfSemaphore, portMAX_DELAY) == pdTRUE)
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <__io_putchar+0x4c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 f95d 	bl	8006ea4 <xQueueSemaphoreTake>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10d      	bne.n	8001c0c <__io_putchar+0x40>
        {
            HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001bf0:	1d39      	adds	r1, r7, #4
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4808      	ldr	r0, [pc, #32]	@ (8001c1c <__io_putchar+0x50>)
 8001bfa:	f003 fb2f 	bl	800525c <HAL_UART_Transmit>
            xSemaphoreGive(xPrintfSemaphore);
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <__io_putchar+0x4c>)
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	f004 feca 	bl	80069a0 <xQueueGenericSend>
        }
    }
    return ch;
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000038c 	.word	0x2000038c
 8001c1c:	200002e4 	.word	0x200002e4

08001c20 <tasks_init>:

/**
 * @brief  Create and start all tasks, queues, semaphores, etc.
 */
void tasks_init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af02      	add	r7, sp, #8
    xPrintfSemaphore = xSemaphoreCreateMutex();
 8001c26:	2001      	movs	r0, #1
 8001c28:	f004 fea1 	bl	800696e <xQueueCreateMutex>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001cd8 <tasks_init+0xb8>)
 8001c30:	6013      	str	r3, [r2, #0]
    configASSERT(xPrintfSemaphore);
 8001c32:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <tasks_init+0xb8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10b      	bne.n	8001c52 <tasks_init+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c3e:	f383 8811 	msr	BASEPRI, r3
 8001c42:	f3bf 8f6f 	isb	sy
 8001c46:	f3bf 8f4f 	dsb	sy
 8001c4a:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	e7fd      	b.n	8001c4e <tasks_init+0x2e>

    uartRxQueue = xQueueCreate(UART_RX_QUEUE_LENGTH, sizeof(uint8_t));
 8001c52:	2200      	movs	r2, #0
 8001c54:	2101      	movs	r1, #1
 8001c56:	2080      	movs	r0, #128	@ 0x80
 8001c58:	f004 fe11 	bl	800687e <xQueueGenericCreate>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cdc <tasks_init+0xbc>)
 8001c60:	6013      	str	r3, [r2, #0]
    configASSERT(uartRxQueue);
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <tasks_init+0xbc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10b      	bne.n	8001c82 <tasks_init+0x62>
	__asm volatile
 8001c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c6e:	f383 8811 	msr	BASEPRI, r3
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	60bb      	str	r3, [r7, #8]
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	e7fd      	b.n	8001c7e <tasks_init+0x5e>

    uint8_t receiveByte;
    HAL_UART_Receive_IT(&huart2, &receiveByte, 1);
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	2201      	movs	r2, #1
 8001c86:	4619      	mov	r1, r3
 8001c88:	4815      	ldr	r0, [pc, #84]	@ (8001ce0 <tasks_init+0xc0>)
 8001c8a:	f003 fb72 	bl	8005372 <HAL_UART_Receive_IT>

    xTaskCreate(Task1,
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <tasks_init+0xc4>)
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	2301      	movs	r3, #1
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2300      	movs	r3, #0
 8001c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c9c:	4912      	ldr	r1, [pc, #72]	@ (8001ce8 <tasks_init+0xc8>)
 8001c9e:	4813      	ldr	r0, [pc, #76]	@ (8001cec <tasks_init+0xcc>)
 8001ca0:	f005 fbf6 	bl	8007490 <xTaskCreate>
                TASK_STACK_SIZE_SMALL,
                NULL,
                TASK_PRIORITY_LOW,
                &task1_handle);

    xTaskCreate(Task2,
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <tasks_init+0xd0>)
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb2:	4910      	ldr	r1, [pc, #64]	@ (8001cf4 <tasks_init+0xd4>)
 8001cb4:	4810      	ldr	r0, [pc, #64]	@ (8001cf8 <tasks_init+0xd8>)
 8001cb6:	f005 fbeb 	bl	8007490 <xTaskCreate>
                TASK_STACK_SIZE_SMALL,
                NULL,
                TASK_PRIORITY_LOW,
                &task2_handle);

    xTaskCreate(uartProcessingTask,
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <tasks_init+0xdc>)
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cc8:	490d      	ldr	r1, [pc, #52]	@ (8001d00 <tasks_init+0xe0>)
 8001cca:	480e      	ldr	r0, [pc, #56]	@ (8001d04 <tasks_init+0xe4>)
 8001ccc:	f005 fbe0 	bl	8007490 <xTaskCreate>
                "UARTTask",
                TASK_STACK_SIZE_SMALL,
                NULL,
                TASK_PRIORITY_MEDIUM,
                &xCommandTaskHandle);
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2000038c 	.word	0x2000038c
 8001cdc:	20000330 	.word	0x20000330
 8001ce0:	200002e4 	.word	0x200002e4
 8001ce4:	20000390 	.word	0x20000390
 8001ce8:	0800d24c 	.word	0x0800d24c
 8001cec:	08001d09 	.word	0x08001d09
 8001cf0:	20000394 	.word	0x20000394
 8001cf4:	0800d254 	.word	0x0800d254
 8001cf8:	08001d39 	.word	0x08001d39
 8001cfc:	20000398 	.word	0x20000398
 8001d00:	0800d25c 	.word	0x0800d25c
 8001d04:	08001d59 	.word	0x08001d59

08001d08 <Task1>:
/**
 * @brief  Example Task1: prints every WAIT_TIME_MEDIUM ms
 *         and toggles an LED.
 */
static void Task1(void *pvParameter)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    for (;;)
    {
//        printf("Task1 Running\r\n");
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // LED blink
 8001d10:	2120      	movs	r1, #32
 8001d12:	4807      	ldr	r0, [pc, #28]	@ (8001d30 <Task1+0x28>)
 8001d14:	f000 ff47 	bl	8002ba6 <HAL_GPIO_TogglePin>
        task1Profiler++;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <Task1+0x2c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <Task1+0x2c>)
 8001d20:	6013      	str	r3, [r2, #0]
        vTaskDelay(WAIT_TIME_MEDIUM); // from config.h
 8001d22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d26:	f005 fcf9 	bl	800771c <vTaskDelay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // LED blink
 8001d2a:	bf00      	nop
 8001d2c:	e7f0      	b.n	8001d10 <Task1+0x8>
 8001d2e:	bf00      	nop
 8001d30:	40020000 	.word	0x40020000
 8001d34:	2000039c 	.word	0x2000039c

08001d38 <Task2>:

/**
 * @brief  Example Task2: prints every 200ms
 */
static void Task2(void *pvParameter)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    for (;;)
    {
//        printf("Task2 Running\r\n");

        HAL_Delay(200);
 8001d40:	20c8      	movs	r0, #200	@ 0xc8
 8001d42:	f000 f901 	bl	8001f48 <HAL_Delay>
        task2Profiler++;
 8001d46:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <Task2+0x1c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a01      	ldr	r2, [pc, #4]	@ (8001d54 <Task2+0x1c>)
 8001d4e:	6013      	str	r3, [r2, #0]
        HAL_Delay(200);
 8001d50:	bf00      	nop
 8001d52:	e7f5      	b.n	8001d40 <Task2+0x8>
 8001d54:	200003a0 	.word	0x200003a0

08001d58 <uartProcessingTask>:
/**
 * @brief  UART processing task: processes received commands from the queue
 *         and sets PWM duty cycle based on the command.
 */
static void uartProcessingTask(void *pvParameter)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    uint8_t receivedByte;
    for (;;)
    {
        if (xQueueReceive(uartRxQueue, &receivedByte, portMAX_DELAY) == pdPASS)
 8001d60:	4b3d      	ldr	r3, [pc, #244]	@ (8001e58 <uartProcessingTask+0x100>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f107 0113 	add.w	r1, r7, #19
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 ffb7 	bl	8006ce0 <xQueueReceive>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d169      	bne.n	8001e4c <uartProcessingTask+0xf4>
        {
            if (receivedByte == 'D')
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	2b44      	cmp	r3, #68	@ 0x44
 8001d7c:	d163      	bne.n	8001e46 <uartProcessingTask+0xee>
            {
                // Collect rest of command
                char command[10];
                int index = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]

                while (index < sizeof(command) - 1)
 8001d82:	e019      	b.n	8001db8 <uartProcessingTask+0x60>
                {
                    if (xQueueReceive(uartRxQueue, &receivedByte, portMAX_DELAY) == pdPASS)
 8001d84:	4b34      	ldr	r3, [pc, #208]	@ (8001e58 <uartProcessingTask+0x100>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f107 0113 	add.w	r1, r7, #19
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 ffa5 	bl	8006ce0 <xQueueReceive>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d10d      	bne.n	8001db8 <uartProcessingTask+0x60>
                    {
                        if (receivedByte == '\r' || receivedByte == '\n')
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	2b0d      	cmp	r3, #13
 8001da0:	d00d      	beq.n	8001dbe <uartProcessingTask+0x66>
 8001da2:	7cfb      	ldrb	r3, [r7, #19]
 8001da4:	2b0a      	cmp	r3, #10
 8001da6:	d00a      	beq.n	8001dbe <uartProcessingTask+0x66>
                            break;
                        command[index++] = receivedByte;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	61fa      	str	r2, [r7, #28]
 8001dae:	7cfa      	ldrb	r2, [r7, #19]
 8001db0:	3320      	adds	r3, #32
 8001db2:	443b      	add	r3, r7
 8001db4:	f803 2c18 	strb.w	r2, [r3, #-24]
                while (index < sizeof(command) - 1)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d9e2      	bls.n	8001d84 <uartProcessingTask+0x2c>
                    }
                }
                command[index] = '\0';
 8001dbe:	f107 0208 	add.w	r2, r7, #8
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]

                // Convert string to float for duty cycle
                float dutyCycle = atof(command);
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f007 faa2 	bl	8009318 <atof>
 8001dd4:	ec53 2b10 	vmov	r2, r3, d0
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe ff24 	bl	8000c28 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	61bb      	str	r3, [r7, #24]
                if (dutyCycle >= 0.0f && dutyCycle <= 100.0f)
 8001de4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	db2c      	blt.n	8001e4c <uartProcessingTask+0xf4>
 8001df2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001e5c <uartProcessingTask+0x104>
 8001dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	d823      	bhi.n	8001e4c <uartProcessingTask+0xf4>
                {

                    uint32_t compareVal = (uint32_t)((dutyCycle / 100.0f) * (htim2.Init.Period + 1));
 8001e04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e08:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e5c <uartProcessingTask+0x104>
 8001e0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e10:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <uartProcessingTask+0x108>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	3301      	adds	r3, #1
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e26:	ee17 3a90 	vmov	r3, s15
 8001e2a:	617b      	str	r3, [r7, #20]
                    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, compareVal);
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <uartProcessingTask+0x108>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34

                    printf("Duty Cycle Set: %.2f%%\r\n", dutyCycle);
 8001e34:	69b8      	ldr	r0, [r7, #24]
 8001e36:	f7fe fba7 	bl	8000588 <__aeabi_f2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4809      	ldr	r0, [pc, #36]	@ (8001e64 <uartProcessingTask+0x10c>)
 8001e40:	f008 fd94 	bl	800a96c <iprintf>
 8001e44:	e002      	b.n	8001e4c <uartProcessingTask+0xf4>
                }
            }
            else
            {
                printf("Invalid Command\r\n");
 8001e46:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <uartProcessingTask+0x110>)
 8001e48:	f008 fdf8 	bl	800aa3c <puts>
            }
        }
        uartProfiler++;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <uartProcessingTask+0x114>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a06      	ldr	r2, [pc, #24]	@ (8001e6c <uartProcessingTask+0x114>)
 8001e54:	6013      	str	r3, [r2, #0]
        if (xQueueReceive(uartRxQueue, &receivedByte, portMAX_DELAY) == pdPASS)
 8001e56:	e783      	b.n	8001d60 <uartProcessingTask+0x8>
 8001e58:	20000330 	.word	0x20000330
 8001e5c:	42c80000 	.word	0x42c80000
 8001e60:	200001f4 	.word	0x200001f4
 8001e64:	0800d268 	.word	0x0800d268
 8001e68:	0800d284 	.word	0x0800d284
 8001e6c:	200003a4 	.word	0x200003a4

08001e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e74:	f7ff fe98 	bl	8001ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e78:	480c      	ldr	r0, [pc, #48]	@ (8001eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e7a:	490d      	ldr	r1, [pc, #52]	@ (8001eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e80:	e002      	b.n	8001e88 <LoopCopyDataInit>

08001e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e86:	3304      	adds	r3, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e8c:	d3f9      	bcc.n	8001e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e90:	4c0a      	ldr	r4, [pc, #40]	@ (8001ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e94:	e001      	b.n	8001e9a <LoopFillZerobss>

08001e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e98:	3204      	adds	r2, #4

08001e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e9c:	d3fb      	bcc.n	8001e96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f008 fdf5 	bl	800aa8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea2:	f7ff f94d 	bl	8001140 <main>
  bx  lr    
 8001ea6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001eb4:	0800d728 	.word	0x0800d728
  ldr r2, =_sbss
 8001eb8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ebc:	20004e48 	.word	0x20004e48

08001ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC_IRQHandler>
	...

08001ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <HAL_Init+0x40>)
 8001ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <HAL_Init+0x40>)
 8001eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_Init+0x40>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f8fc 	bl	80020ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f7ff fcda 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fb8c 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00

08001f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_IncTick+0x20>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_IncTick+0x24>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <HAL_IncTick+0x24>)
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	200003a8 	.word	0x200003a8

08001f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b03      	ldr	r3, [pc, #12]	@ (8001f44 <HAL_GetTick+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	200003a8 	.word	0x200003a8

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff ffee 	bl	8001f30 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f60:	d005      	beq.n	8001f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_Delay+0x44>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f6e:	bf00      	nop
 8001f70:	f7ff ffde 	bl	8001f30 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8f7      	bhi.n	8001f70 <HAL_Delay+0x28>
  {
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000008 	.word	0x20000008

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	@ (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	@ (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	@ (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff4c 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002112:	f7ff ff61 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002116:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f7ff ffb1 	bl	8002084 <NVIC_EncodePriority>
 8002122:	4602      	mov	r2, r0
 8002124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff80 	bl	8002030 <__NVIC_SetPriority>
}
 8002130:	bf00      	nop
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff54 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff fee6 	bl	8001f30 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e099      	b.n	80022a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002190:	e00f      	b.n	80021b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002192:	f7ff fecd 	bl	8001f30 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b05      	cmp	r3, #5
 800219e:	d908      	bls.n	80021b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e078      	b.n	80022a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e8      	bne.n	8002192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4b38      	ldr	r3, [pc, #224]	@ (80022ac <HAL_DMA_Init+0x158>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	2b04      	cmp	r3, #4
 800220a:	d107      	bne.n	800221c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	4313      	orrs	r3, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	2b04      	cmp	r3, #4
 8002244:	d117      	bne.n	8002276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fa7b 	bl	8002754 <DMA_CheckFifoParam>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2240      	movs	r2, #64	@ 0x40
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002272:	2301      	movs	r3, #1
 8002274:	e016      	b.n	80022a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fa32 	bl	80026e8 <DMA_CalcBaseAndBitshift>
 8002284:	4603      	mov	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	223f      	movs	r2, #63	@ 0x3f
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	f010803f 	.word	0xf010803f

080022b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022be:	f7ff fe37 	bl	8001f30 <HAL_GetTick>
 80022c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d008      	beq.n	80022e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2280      	movs	r2, #128	@ 0x80
 80022d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e052      	b.n	8002388 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0216 	bic.w	r2, r2, #22
 80022f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002300:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <HAL_DMA_Abort+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0208 	bic.w	r2, r2, #8
 8002320:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	e013      	b.n	800235c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002334:	f7ff fdfc 	bl	8001f30 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b05      	cmp	r3, #5
 8002340:	d90c      	bls.n	800235c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e015      	b.n	8002388 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e4      	bne.n	8002334 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	223f      	movs	r2, #63	@ 0x3f
 8002370:	409a      	lsls	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d004      	beq.n	80023ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00c      	b.n	80023c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023e0:	4b8e      	ldr	r3, [pc, #568]	@ (800261c <HAL_DMA_IRQHandler+0x248>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002620 <HAL_DMA_IRQHandler+0x24c>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a9b      	lsrs	r3, r3, #10
 80023ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	2208      	movs	r2, #8
 8002400:	409a      	lsls	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01a      	beq.n	8002440 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0204 	bic.w	r2, r2, #4
 8002426:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	2208      	movs	r2, #8
 800242e:	409a      	lsls	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002444:	2201      	movs	r2, #1
 8002446:	409a      	lsls	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d012      	beq.n	8002476 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002462:	2201      	movs	r2, #1
 8002464:	409a      	lsls	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246e:	f043 0202 	orr.w	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	2204      	movs	r2, #4
 800247c:	409a      	lsls	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d012      	beq.n	80024ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002498:	2204      	movs	r2, #4
 800249a:	409a      	lsls	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f043 0204 	orr.w	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	2210      	movs	r2, #16
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d043      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d03c      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	2210      	movs	r2, #16
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d018      	beq.n	8002516 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d024      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
 8002502:	e01f      	b.n	8002544 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
 8002514:	e016      	b.n	8002544 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0208 	bic.w	r2, r2, #8
 8002532:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	2220      	movs	r2, #32
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 808f 	beq.w	8002674 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8087 	beq.w	8002674 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	2220      	movs	r2, #32
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b05      	cmp	r3, #5
 800257c:	d136      	bne.n	80025ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0216 	bic.w	r2, r2, #22
 800258c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800259c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d103      	bne.n	80025ae <HAL_DMA_IRQHandler+0x1da>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0208 	bic.w	r2, r2, #8
 80025bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c2:	223f      	movs	r2, #63	@ 0x3f
 80025c4:	409a      	lsls	r2, r3
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d07e      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
        }
        return;
 80025ea:	e079      	b.n	80026e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	2b00      	cmp	r3, #0
 800260e:	d031      	beq.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
 8002618:	e02c      	b.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000
 8002620:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d023      	beq.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
 8002634:	e01e      	b.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10f      	bne.n	8002664 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0210 	bic.w	r2, r2, #16
 8002652:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002678:	2b00      	cmp	r3, #0
 800267a:	d032      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d022      	beq.n	80026ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2205      	movs	r2, #5
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3301      	adds	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d307      	bcc.n	80026bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f2      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x2cc>
 80026ba:	e000      	b.n	80026be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
 80026de:	e000      	b.n	80026e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026e0:	bf00      	nop
    }
  }
}
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3b10      	subs	r3, #16
 80026f8:	4a14      	ldr	r2, [pc, #80]	@ (800274c <DMA_CalcBaseAndBitshift+0x64>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002702:	4a13      	ldr	r2, [pc, #76]	@ (8002750 <DMA_CalcBaseAndBitshift+0x68>)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d909      	bls.n	800272a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	1d1a      	adds	r2, r3, #4
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	659a      	str	r2, [r3, #88]	@ 0x58
 8002728:	e007      	b.n	800273a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002732:	f023 0303 	bic.w	r3, r3, #3
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	aaaaaaab 	.word	0xaaaaaaab
 8002750:	0800d2ec 	.word	0x0800d2ec

08002754 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11f      	bne.n	80027ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d856      	bhi.n	8002822 <DMA_CheckFifoParam+0xce>
 8002774:	a201      	add	r2, pc, #4	@ (adr r2, 800277c <DMA_CheckFifoParam+0x28>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	0800278d 	.word	0x0800278d
 8002780:	0800279f 	.word	0x0800279f
 8002784:	0800278d 	.word	0x0800278d
 8002788:	08002823 	.word	0x08002823
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d046      	beq.n	8002826 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279c:	e043      	b.n	8002826 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027a6:	d140      	bne.n	800282a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ac:	e03d      	b.n	800282a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b6:	d121      	bne.n	80027fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d837      	bhi.n	800282e <DMA_CheckFifoParam+0xda>
 80027be:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <DMA_CheckFifoParam+0x70>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	080027d5 	.word	0x080027d5
 80027c8:	080027db 	.word	0x080027db
 80027cc:	080027d5 	.word	0x080027d5
 80027d0:	080027ed 	.word	0x080027ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      break;
 80027d8:	e030      	b.n	800283c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d025      	beq.n	8002832 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ea:	e022      	b.n	8002832 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027f4:	d11f      	bne.n	8002836 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027fa:	e01c      	b.n	8002836 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d903      	bls.n	800280a <DMA_CheckFifoParam+0xb6>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d003      	beq.n	8002810 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002808:	e018      	b.n	800283c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      break;
 800280e:	e015      	b.n	800283c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00e      	beq.n	800283a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      break;
 8002820:	e00b      	b.n	800283a <DMA_CheckFifoParam+0xe6>
      break;
 8002822:	bf00      	nop
 8002824:	e00a      	b.n	800283c <DMA_CheckFifoParam+0xe8>
      break;
 8002826:	bf00      	nop
 8002828:	e008      	b.n	800283c <DMA_CheckFifoParam+0xe8>
      break;
 800282a:	bf00      	nop
 800282c:	e006      	b.n	800283c <DMA_CheckFifoParam+0xe8>
      break;
 800282e:	bf00      	nop
 8002830:	e004      	b.n	800283c <DMA_CheckFifoParam+0xe8>
      break;
 8002832:	bf00      	nop
 8002834:	e002      	b.n	800283c <DMA_CheckFifoParam+0xe8>
      break;   
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <DMA_CheckFifoParam+0xe8>
      break;
 800283a:	bf00      	nop
    }
  } 
  
  return status; 
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e165      	b.n	8002b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002868:	2201      	movs	r2, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	429a      	cmp	r2, r3
 8002882:	f040 8154 	bne.w	8002b2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d005      	beq.n	800289e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	2b02      	cmp	r3, #2
 800289c:	d130      	bne.n	8002900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d4:	2201      	movs	r2, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 0201 	and.w	r2, r3, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d017      	beq.n	800293c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d123      	bne.n	8002990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	08da      	lsrs	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3208      	adds	r2, #8
 8002950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	08da      	lsrs	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3208      	adds	r2, #8
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0203 	and.w	r2, r3, #3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80ae 	beq.w	8002b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b4c <HAL_GPIO_Init+0x300>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	4a5c      	ldr	r2, [pc, #368]	@ (8002b4c <HAL_GPIO_Init+0x300>)
 80029dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b4c <HAL_GPIO_Init+0x300>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ee:	4a58      	ldr	r2, [pc, #352]	@ (8002b50 <HAL_GPIO_Init+0x304>)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4f      	ldr	r2, [pc, #316]	@ (8002b54 <HAL_GPIO_Init+0x308>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d025      	beq.n	8002a66 <HAL_GPIO_Init+0x21a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002b58 <HAL_GPIO_Init+0x30c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01f      	beq.n	8002a62 <HAL_GPIO_Init+0x216>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4d      	ldr	r2, [pc, #308]	@ (8002b5c <HAL_GPIO_Init+0x310>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x212>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002b60 <HAL_GPIO_Init+0x314>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x20e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	@ (8002b64 <HAL_GPIO_Init+0x318>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x20a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b68 <HAL_GPIO_Init+0x31c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x206>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a49      	ldr	r2, [pc, #292]	@ (8002b6c <HAL_GPIO_Init+0x320>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x202>
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	e00c      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00a      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a52:	2305      	movs	r3, #5
 8002a54:	e008      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a56:	2304      	movs	r3, #4
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e004      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a66:	2300      	movs	r3, #0
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f002 0203 	and.w	r2, r2, #3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	4093      	lsls	r3, r2
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a78:	4935      	ldr	r1, [pc, #212]	@ (8002b50 <HAL_GPIO_Init+0x304>)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a86:	4b3a      	ldr	r3, [pc, #232]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aaa:	4a31      	ldr	r2, [pc, #196]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad4:	4a26      	ldr	r2, [pc, #152]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ada:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afe:	4a1c      	ldr	r2, [pc, #112]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b04:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b28:	4a11      	ldr	r2, [pc, #68]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	f67f ae96 	bls.w	8002868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3724      	adds	r7, #36	@ 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40021400 	.word	0x40021400
 8002b6c:	40021800 	.word	0x40021800
 8002b70:	40013c00 	.word	0x40013c00

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b90:	e003      	b.n	8002b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	041a      	lsls	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb8:	887a      	ldrh	r2, [r7, #2]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	041a      	lsls	r2, r3, #16
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	4a1f      	ldr	r2, [pc, #124]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c02:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c08:	f7ff f992 	bl	8001f30 <HAL_GetTick>
 8002c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c0e:	e009      	b.n	8002c24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c10:	f7ff f98e 	bl	8001f30 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c1e:	d901      	bls.n	8002c24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e01f      	b.n	8002c64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c24:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c30:	d1ee      	bne.n	8002c10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c32:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c38:	f7ff f97a 	bl	8001f30 <HAL_GetTick>
 8002c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c3e:	e009      	b.n	8002c54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c40:	f7ff f976 	bl	8001f30 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c4e:	d901      	bls.n	8002c54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e007      	b.n	8002c64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c54:	4b07      	ldr	r3, [pc, #28]	@ (8002c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c60:	d1ee      	bne.n	8002c40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	420e0040 	.word	0x420e0040
 8002c74:	40007000 	.word	0x40007000
 8002c78:	420e0044 	.word	0x420e0044

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0cc      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b68      	ldr	r3, [pc, #416]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b65      	ldr	r3, [pc, #404]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b63      	ldr	r3, [pc, #396]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0b8      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd0:	4b59      	ldr	r3, [pc, #356]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce8:	4b53      	ldr	r3, [pc, #332]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a52      	ldr	r2, [pc, #328]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b50      	ldr	r3, [pc, #320]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	494d      	ldr	r1, [pc, #308]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d044      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e067      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b37      	ldr	r3, [pc, #220]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4934      	ldr	r1, [pc, #208]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7ff f8e0 	bl	8001f30 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7ff f8dc 	bl	8001f30 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d20c      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b22      	ldr	r3, [pc, #136]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e032      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4916      	ldr	r1, [pc, #88]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	490e      	ldr	r1, [pc, #56]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e02:	f000 f887 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	490a      	ldr	r1, [pc, #40]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	5ccb      	ldrb	r3, [r1, r3]
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	4a09      	ldr	r2, [pc, #36]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fd42 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	0800d2d4 	.word	0x0800d2d4
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000

08002e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e64:	f7ff fff0 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0a9b      	lsrs	r3, r3, #10
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	@ (8002e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	0800d2e4 	.word	0x0800d2e4

08002e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e8c:	f7ff ffdc 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0b5b      	lsrs	r3, r3, #13
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4903      	ldr	r1, [pc, #12]	@ (8002eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	0800d2e4 	.word	0x0800d2e4

08002eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ec0:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0203 	and.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <HAL_RCC_GetClockConfig+0x60>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	601a      	str	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f18:	b0ae      	sub	sp, #184	@ 0xb8
 8002f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3a:	4bcb      	ldr	r3, [pc, #812]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	f200 8206 	bhi.w	8003354 <HAL_RCC_GetSysClockFreq+0x440>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f85 	.word	0x08002f85
 8002f54:	08003355 	.word	0x08003355
 8002f58:	08003355 	.word	0x08003355
 8002f5c:	08003355 	.word	0x08003355
 8002f60:	08002f8d 	.word	0x08002f8d
 8002f64:	08003355 	.word	0x08003355
 8002f68:	08003355 	.word	0x08003355
 8002f6c:	08003355 	.word	0x08003355
 8002f70:	08002f95 	.word	0x08002f95
 8002f74:	08003355 	.word	0x08003355
 8002f78:	08003355 	.word	0x08003355
 8002f7c:	08003355 	.word	0x08003355
 8002f80:	08003185 	.word	0x08003185
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4bb9      	ldr	r3, [pc, #740]	@ (800326c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f8a:	e1e7      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8c:	4bb8      	ldr	r3, [pc, #736]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f92:	e1e3      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f94:	4bb4      	ldr	r3, [pc, #720]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fa0:	4bb1      	ldr	r3, [pc, #708]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d071      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fac:	4bae      	ldr	r3, [pc, #696]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fb8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	462b      	mov	r3, r5
 8002fd6:	f04f 0000 	mov.w	r0, #0
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	0159      	lsls	r1, r3, #5
 8002fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe4:	0150      	lsls	r0, r2, #5
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4621      	mov	r1, r4
 8002fec:	1a51      	subs	r1, r2, r1
 8002fee:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003004:	4649      	mov	r1, r9
 8003006:	018b      	lsls	r3, r1, #6
 8003008:	4641      	mov	r1, r8
 800300a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300e:	4641      	mov	r1, r8
 8003010:	018a      	lsls	r2, r1, #6
 8003012:	4641      	mov	r1, r8
 8003014:	1a51      	subs	r1, r2, r1
 8003016:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003018:	4649      	mov	r1, r9
 800301a:	eb63 0301 	sbc.w	r3, r3, r1
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800302c:	4649      	mov	r1, r9
 800302e:	00cb      	lsls	r3, r1, #3
 8003030:	4641      	mov	r1, r8
 8003032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003036:	4641      	mov	r1, r8
 8003038:	00ca      	lsls	r2, r1, #3
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	4603      	mov	r3, r0
 8003040:	4622      	mov	r2, r4
 8003042:	189b      	adds	r3, r3, r2
 8003044:	633b      	str	r3, [r7, #48]	@ 0x30
 8003046:	462b      	mov	r3, r5
 8003048:	460a      	mov	r2, r1
 800304a:	eb42 0303 	adc.w	r3, r2, r3
 800304e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800305c:	4629      	mov	r1, r5
 800305e:	024b      	lsls	r3, r1, #9
 8003060:	4621      	mov	r1, r4
 8003062:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003066:	4621      	mov	r1, r4
 8003068:	024a      	lsls	r2, r1, #9
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003078:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800307c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003080:	f7fd fe22 	bl	8000cc8 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4613      	mov	r3, r2
 800308a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800308e:	e067      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003090:	4b75      	ldr	r3, [pc, #468]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800309c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80030a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030aa:	2300      	movs	r3, #0
 80030ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80030b2:	4622      	mov	r2, r4
 80030b4:	462b      	mov	r3, r5
 80030b6:	f04f 0000 	mov.w	r0, #0
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	0159      	lsls	r1, r3, #5
 80030c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c4:	0150      	lsls	r0, r2, #5
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4621      	mov	r1, r4
 80030cc:	1a51      	subs	r1, r2, r1
 80030ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80030d0:	4629      	mov	r1, r5
 80030d2:	eb63 0301 	sbc.w	r3, r3, r1
 80030d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80030e4:	4649      	mov	r1, r9
 80030e6:	018b      	lsls	r3, r1, #6
 80030e8:	4641      	mov	r1, r8
 80030ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ee:	4641      	mov	r1, r8
 80030f0:	018a      	lsls	r2, r1, #6
 80030f2:	4641      	mov	r1, r8
 80030f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80030f8:	4649      	mov	r1, r9
 80030fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800310a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800310e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003112:	4692      	mov	sl, r2
 8003114:	469b      	mov	fp, r3
 8003116:	4623      	mov	r3, r4
 8003118:	eb1a 0303 	adds.w	r3, sl, r3
 800311c:	623b      	str	r3, [r7, #32]
 800311e:	462b      	mov	r3, r5
 8003120:	eb4b 0303 	adc.w	r3, fp, r3
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003132:	4629      	mov	r1, r5
 8003134:	028b      	lsls	r3, r1, #10
 8003136:	4621      	mov	r1, r4
 8003138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800313c:	4621      	mov	r1, r4
 800313e:	028a      	lsls	r2, r1, #10
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003148:	2200      	movs	r2, #0
 800314a:	673b      	str	r3, [r7, #112]	@ 0x70
 800314c:	677a      	str	r2, [r7, #116]	@ 0x74
 800314e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003152:	f7fd fdb9 	bl	8000cc8 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4613      	mov	r3, r2
 800315c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003160:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	3301      	adds	r3, #1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003182:	e0eb      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003184:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800318c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003190:	4b35      	ldr	r3, [pc, #212]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d06b      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319c:	4b32      	ldr	r3, [pc, #200]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x354>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	2200      	movs	r2, #0
 80031a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80031b0:	2300      	movs	r3, #0
 80031b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80031b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80031b8:	4622      	mov	r2, r4
 80031ba:	462b      	mov	r3, r5
 80031bc:	f04f 0000 	mov.w	r0, #0
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	0159      	lsls	r1, r3, #5
 80031c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ca:	0150      	lsls	r0, r2, #5
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4621      	mov	r1, r4
 80031d2:	1a51      	subs	r1, r2, r1
 80031d4:	61b9      	str	r1, [r7, #24]
 80031d6:	4629      	mov	r1, r5
 80031d8:	eb63 0301 	sbc.w	r3, r3, r1
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031ea:	4659      	mov	r1, fp
 80031ec:	018b      	lsls	r3, r1, #6
 80031ee:	4651      	mov	r1, sl
 80031f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031f4:	4651      	mov	r1, sl
 80031f6:	018a      	lsls	r2, r1, #6
 80031f8:	4651      	mov	r1, sl
 80031fa:	ebb2 0801 	subs.w	r8, r2, r1
 80031fe:	4659      	mov	r1, fp
 8003200:	eb63 0901 	sbc.w	r9, r3, r1
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003210:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003214:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003218:	4690      	mov	r8, r2
 800321a:	4699      	mov	r9, r3
 800321c:	4623      	mov	r3, r4
 800321e:	eb18 0303 	adds.w	r3, r8, r3
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	462b      	mov	r3, r5
 8003226:	eb49 0303 	adc.w	r3, r9, r3
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003238:	4629      	mov	r1, r5
 800323a:	024b      	lsls	r3, r1, #9
 800323c:	4621      	mov	r1, r4
 800323e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003242:	4621      	mov	r1, r4
 8003244:	024a      	lsls	r2, r1, #9
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800324e:	2200      	movs	r2, #0
 8003250:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003252:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003254:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003258:	f7fd fd36 	bl	8000cc8 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003266:	e065      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x420>
 8003268:	40023800 	.word	0x40023800
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003274:	4b3d      	ldr	r3, [pc, #244]	@ (800336c <HAL_RCC_GetSysClockFreq+0x458>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	2200      	movs	r2, #0
 800327c:	4618      	mov	r0, r3
 800327e:	4611      	mov	r1, r2
 8003280:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003284:	653b      	str	r3, [r7, #80]	@ 0x50
 8003286:	2300      	movs	r3, #0
 8003288:	657b      	str	r3, [r7, #84]	@ 0x54
 800328a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800328e:	4642      	mov	r2, r8
 8003290:	464b      	mov	r3, r9
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	0159      	lsls	r1, r3, #5
 800329c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a0:	0150      	lsls	r0, r2, #5
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4641      	mov	r1, r8
 80032a8:	1a51      	subs	r1, r2, r1
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	4649      	mov	r1, r9
 80032ae:	eb63 0301 	sbc.w	r3, r3, r1
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032c0:	4659      	mov	r1, fp
 80032c2:	018b      	lsls	r3, r1, #6
 80032c4:	4651      	mov	r1, sl
 80032c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ca:	4651      	mov	r1, sl
 80032cc:	018a      	lsls	r2, r1, #6
 80032ce:	4651      	mov	r1, sl
 80032d0:	1a54      	subs	r4, r2, r1
 80032d2:	4659      	mov	r1, fp
 80032d4:	eb63 0501 	sbc.w	r5, r3, r1
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	00eb      	lsls	r3, r5, #3
 80032e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032e6:	00e2      	lsls	r2, r4, #3
 80032e8:	4614      	mov	r4, r2
 80032ea:	461d      	mov	r5, r3
 80032ec:	4643      	mov	r3, r8
 80032ee:	18e3      	adds	r3, r4, r3
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	464b      	mov	r3, r9
 80032f4:	eb45 0303 	adc.w	r3, r5, r3
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003306:	4629      	mov	r1, r5
 8003308:	028b      	lsls	r3, r1, #10
 800330a:	4621      	mov	r1, r4
 800330c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003310:	4621      	mov	r1, r4
 8003312:	028a      	lsls	r2, r1, #10
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800331c:	2200      	movs	r2, #0
 800331e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003320:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003322:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003326:	f7fd fccf 	bl	8000cc8 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4613      	mov	r3, r2
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003334:	4b0d      	ldr	r3, [pc, #52]	@ (800336c <HAL_RCC_GetSysClockFreq+0x458>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0f1b      	lsrs	r3, r3, #28
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003352:	e003      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800335a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003360:	4618      	mov	r0, r3
 8003362:	37b8      	adds	r7, #184	@ 0xb8
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	00f42400 	.word	0x00f42400

08003374 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e28d      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8083 	beq.w	800349a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003394:	4b94      	ldr	r3, [pc, #592]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b04      	cmp	r3, #4
 800339e:	d019      	beq.n	80033d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033a0:	4b91      	ldr	r3, [pc, #580]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033ac:	4b8e      	ldr	r3, [pc, #568]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b8:	d00c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ba:	4b8b      	ldr	r3, [pc, #556]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d112      	bne.n	80033ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c6:	4b88      	ldr	r3, [pc, #544]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033d2:	d10b      	bne.n	80033ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	4b84      	ldr	r3, [pc, #528]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05b      	beq.n	8003498 <HAL_RCC_OscConfig+0x124>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d157      	bne.n	8003498 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e25a      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f4:	d106      	bne.n	8003404 <HAL_RCC_OscConfig+0x90>
 80033f6:	4b7c      	ldr	r3, [pc, #496]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7b      	ldr	r2, [pc, #492]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e01d      	b.n	8003440 <HAL_RCC_OscConfig+0xcc>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0xb4>
 800340e:	4b76      	ldr	r3, [pc, #472]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a75      	ldr	r2, [pc, #468]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b73      	ldr	r3, [pc, #460]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a72      	ldr	r2, [pc, #456]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0xcc>
 8003428:	4b6f      	ldr	r3, [pc, #444]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a6e      	ldr	r2, [pc, #440]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b6c      	ldr	r3, [pc, #432]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6b      	ldr	r2, [pc, #428]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800343e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fd72 	bl	8001f30 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fd6e 	bl	8001f30 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	@ 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e21f      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b61      	ldr	r3, [pc, #388]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0xdc>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fd5e 	bl	8001f30 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe fd5a 	bl	8001f30 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	@ 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e20b      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	4b57      	ldr	r3, [pc, #348]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x104>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d06f      	beq.n	8003586 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034a6:	4b50      	ldr	r3, [pc, #320]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d017      	beq.n	80034e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034b2:	4b4d      	ldr	r3, [pc, #308]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d105      	bne.n	80034ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034be:	4b4a      	ldr	r3, [pc, #296]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b44      	ldr	r3, [pc, #272]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b41      	ldr	r3, [pc, #260]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x186>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1d3      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4937      	ldr	r1, [pc, #220]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <HAL_RCC_OscConfig+0x278>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe fd07 	bl	8001f30 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003526:	f7fe fd03 	bl	8001f30 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1b4      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b2b      	ldr	r3, [pc, #172]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b28      	ldr	r3, [pc, #160]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4925      	ldr	r1, [pc, #148]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b24      	ldr	r3, [pc, #144]	@ (80035ec <HAL_RCC_OscConfig+0x278>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fce6 	bl	8001f30 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe fce2 	bl	8001f30 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e193      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fcc6 	bl	8001f30 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe fcc2 	bl	8001f30 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e173      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_OscConfig+0x274>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x234>
 80035c6:	e01b      	b.n	8003600 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fe fcaf 	bl	8001f30 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e00e      	b.n	80035f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe fcab 	bl	8001f30 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d907      	bls.n	80035f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e15c      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470000 	.word	0x42470000
 80035f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ea      	bne.n	80035d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8097 	beq.w	800373c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b83      	ldr	r3, [pc, #524]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b7f      	ldr	r3, [pc, #508]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	4a7e      	ldr	r2, [pc, #504]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	@ 0x40
 800362e:	4b7c      	ldr	r3, [pc, #496]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b79      	ldr	r3, [pc, #484]	@ (8003824 <HAL_RCC_OscConfig+0x4b0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b76      	ldr	r3, [pc, #472]	@ (8003824 <HAL_RCC_OscConfig+0x4b0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a75      	ldr	r2, [pc, #468]	@ (8003824 <HAL_RCC_OscConfig+0x4b0>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fe fc6b 	bl	8001f30 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fe fc67 	bl	8001f30 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e118      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b6c      	ldr	r3, [pc, #432]	@ (8003824 <HAL_RCC_OscConfig+0x4b0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x31e>
 8003684:	4b66      	ldr	r3, [pc, #408]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003688:	4a65      	ldr	r2, [pc, #404]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x358>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x340>
 800369a:	4b61      	ldr	r3, [pc, #388]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	4a60      	ldr	r2, [pc, #384]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a6:	4b5e      	ldr	r3, [pc, #376]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x358>
 80036b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b8:	4a59      	ldr	r2, [pc, #356]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c0:	4b57      	ldr	r3, [pc, #348]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c4:	4a56      	ldr	r2, [pc, #344]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80036c6:	f023 0304 	bic.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fe fc2c 	bl	8001f30 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fe fc28 	bl	8001f30 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0d7      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCC_OscConfig+0x368>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fe fc16 	bl	8001f30 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe fc12 	bl	8001f30 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0c1      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	4b40      	ldr	r3, [pc, #256]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ee      	bne.n	8003708 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b3b      	ldr	r3, [pc, #236]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	4a3a      	ldr	r2, [pc, #232]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80ad 	beq.w	80038a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003746:	4b36      	ldr	r3, [pc, #216]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d060      	beq.n	8003814 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d145      	bne.n	80037e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b33      	ldr	r3, [pc, #204]	@ (8003828 <HAL_RCC_OscConfig+0x4b4>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe fbe6 	bl	8001f30 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe fbe2 	bl	8001f30 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e093      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b29      	ldr	r3, [pc, #164]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	071b      	lsls	r3, r3, #28
 80037b2:	491b      	ldr	r1, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003828 <HAL_RCC_OscConfig+0x4b4>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe fbb7 	bl	8001f30 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fbb3 	bl	8001f30 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e064      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d8:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x452>
 80037e4:	e05c      	b.n	80038a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b10      	ldr	r3, [pc, #64]	@ (8003828 <HAL_RCC_OscConfig+0x4b4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fba0 	bl	8001f30 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fe fb9c 	bl	8001f30 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e04d      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_RCC_OscConfig+0x4ac>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x480>
 8003812:	e045      	b.n	80038a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e040      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
 8003820:	40023800 	.word	0x40023800
 8003824:	40007000 	.word	0x40007000
 8003828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800382c:	4b1f      	ldr	r3, [pc, #124]	@ (80038ac <HAL_RCC_OscConfig+0x538>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d030      	beq.n	800389c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d129      	bne.n	800389c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d122      	bne.n	800389c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003864:	4293      	cmp	r3, r2
 8003866:	d119      	bne.n	800389c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	3b01      	subs	r3, #1
 8003876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d10f      	bne.n	800389c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d107      	bne.n	800389c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800

080038b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e041      	b.n	8003946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fec8 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f000 fefc 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d001      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e04e      	b.n	8003a06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a23      	ldr	r2, [pc, #140]	@ (8003a14 <HAL_TIM_Base_Start_IT+0xc4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d022      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003992:	d01d      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1f      	ldr	r2, [pc, #124]	@ (8003a18 <HAL_TIM_Base_Start_IT+0xc8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d018      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a1c <HAL_TIM_Base_Start_IT+0xcc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <HAL_TIM_Base_Start_IT+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00e      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a24 <HAL_TIM_Base_Start_IT+0xd4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a19      	ldr	r2, [pc, #100]	@ (8003a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_TIM_Base_Start_IT+0x80>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a18      	ldr	r2, [pc, #96]	@ (8003a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d111      	bne.n	80039f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d010      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0201 	orr.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f2:	e007      	b.n	8003a04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40010000 	.word	0x40010000
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40000800 	.word	0x40000800
 8003a20:	40000c00 	.word	0x40000c00
 8003a24:	40010400 	.word	0x40010400
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40001800 	.word	0x40001800

08003a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f839 	bl	8003ace <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 fe3c 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x24>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e022      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d109      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x3e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e015      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d109      	bne.n	8003b3c <HAL_TIM_PWM_Start+0x58>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e008      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07c      	b.n	8003c50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0x82>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b64:	e013      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x92>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b74:	e00b      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Start+0xa2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b84:	e003      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 fa5a 	bl	8005050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c58 <HAL_TIM_PWM_Start+0x174>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIM_PWM_Start+0xcc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2c      	ldr	r2, [pc, #176]	@ (8003c5c <HAL_TIM_PWM_Start+0x178>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIM_PWM_Start+0xd0>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_TIM_PWM_Start+0xd2>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a22      	ldr	r2, [pc, #136]	@ (8003c58 <HAL_TIM_PWM_Start+0x174>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bdc:	d01d      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c60 <HAL_TIM_PWM_Start+0x17c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d018      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <HAL_TIM_PWM_Start+0x180>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c68 <HAL_TIM_PWM_Start+0x184>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00e      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <HAL_TIM_PWM_Start+0x178>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a18      	ldr	r2, [pc, #96]	@ (8003c6c <HAL_TIM_PWM_Start+0x188>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d004      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	@ (8003c70 <HAL_TIM_PWM_Start+0x18c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d111      	bne.n	8003c3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b06      	cmp	r3, #6
 8003c2a:	d010      	beq.n	8003c4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	e007      	b.n	8003c4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40010400 	.word	0x40010400
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40001800 	.word	0x40001800

08003c74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e041      	b.n	8003d0a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f839 	bl	8003d12 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	f000 fd1a 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_IC_Start_IT+0x1e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e013      	b.n	8003d6e <HAL_TIM_IC_Start_IT+0x46>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_IC_Start_IT+0x2e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e00b      	b.n	8003d6e <HAL_TIM_IC_Start_IT+0x46>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_IC_Start_IT+0x3e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_IC_Start_IT+0x46>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <HAL_TIM_IC_Start_IT+0x58>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e013      	b.n	8003da8 <HAL_TIM_IC_Start_IT+0x80>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d104      	bne.n	8003d90 <HAL_TIM_IC_Start_IT+0x68>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e00b      	b.n	8003da8 <HAL_TIM_IC_Start_IT+0x80>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d104      	bne.n	8003da0 <HAL_TIM_IC_Start_IT+0x78>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e003      	b.n	8003da8 <HAL_TIM_IC_Start_IT+0x80>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003daa:	7bbb      	ldrb	r3, [r7, #14]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d102      	bne.n	8003db6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003db0:	7b7b      	ldrb	r3, [r7, #13]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d001      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0cc      	b.n	8003f54 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_IC_Start_IT+0xa2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dc8:	e013      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0xca>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_IC_Start_IT+0xb2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd8:	e00b      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0xca>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_IC_Start_IT+0xc2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de8:	e003      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0xca>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_IC_Start_IT+0xda>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e00:	e013      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x102>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d104      	bne.n	8003e12 <HAL_TIM_IC_Start_IT+0xea>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e10:	e00b      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x102>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d104      	bne.n	8003e22 <HAL_TIM_IC_Start_IT+0xfa>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e20:	e003      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x102>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d841      	bhi.n	8003eb4 <HAL_TIM_IC_Start_IT+0x18c>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <HAL_TIM_IC_Start_IT+0x110>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003eb5 	.word	0x08003eb5
 8003e40:	08003eb5 	.word	0x08003eb5
 8003e44:	08003eb5 	.word	0x08003eb5
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003eb5 	.word	0x08003eb5
 8003e50:	08003eb5 	.word	0x08003eb5
 8003e54:	08003eb5 	.word	0x08003eb5
 8003e58:	08003e91 	.word	0x08003e91
 8003e5c:	08003eb5 	.word	0x08003eb5
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003eb5 	.word	0x08003eb5
 8003e68:	08003ea3 	.word	0x08003ea3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0202 	orr.w	r2, r2, #2
 8003e7a:	60da      	str	r2, [r3, #12]
      break;
 8003e7c:	e01d      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0204 	orr.w	r2, r2, #4
 8003e8c:	60da      	str	r2, [r3, #12]
      break;
 8003e8e:	e014      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	60da      	str	r2, [r3, #12]
      break;
 8003ea0:	e00b      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0210 	orr.w	r2, r2, #16
 8003eb0:	60da      	str	r2, [r3, #12]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d148      	bne.n	8003f52 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	6839      	ldr	r1, [r7, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 f8c1 	bl	8005050 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a22      	ldr	r2, [pc, #136]	@ (8003f5c <HAL_TIM_IC_Start_IT+0x234>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_TIM_IC_Start_IT+0x1f6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee0:	d01d      	beq.n	8003f1e <HAL_TIM_IC_Start_IT+0x1f6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f60 <HAL_TIM_IC_Start_IT+0x238>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_TIM_IC_Start_IT+0x1f6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f64 <HAL_TIM_IC_Start_IT+0x23c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_TIM_IC_Start_IT+0x1f6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <HAL_TIM_IC_Start_IT+0x240>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIM_IC_Start_IT+0x1f6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a19      	ldr	r2, [pc, #100]	@ (8003f6c <HAL_TIM_IC_Start_IT+0x244>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_TIM_IC_Start_IT+0x1f6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a18      	ldr	r2, [pc, #96]	@ (8003f70 <HAL_TIM_IC_Start_IT+0x248>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIM_IC_Start_IT+0x1f6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <HAL_TIM_IC_Start_IT+0x24c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d111      	bne.n	8003f42 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b06      	cmp	r3, #6
 8003f2e:	d010      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	e007      	b.n	8003f52 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40001800 	.word	0x40001800

08003f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d020      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01b      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0202 	mvn.w	r2, #2
 8003fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd f882 	bl	80010cc <HAL_TIM_IC_CaptureCallback>
 8003fc8:	e005      	b.n	8003fd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fb70 	bl	80046b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fb77 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d020      	beq.n	8004028 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01b      	beq.n	8004028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0204 	mvn.w	r2, #4
 8003ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd f85c 	bl	80010cc <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fb4a 	bl	80046b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb51 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d020      	beq.n	8004074 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01b      	beq.n	8004074 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0208 	mvn.w	r2, #8
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2204      	movs	r2, #4
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd f836 	bl	80010cc <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fb24 	bl	80046b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fb2b 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d020      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0210 	mvn.w	r2, #16
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2208      	movs	r2, #8
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd f810 	bl	80010cc <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fafe 	bl	80046b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fb05 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0201 	mvn.w	r2, #1
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fa80 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00c      	beq.n	8004108 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f001 f850 	bl	80051a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00c      	beq.n	800412c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fad6 	bl	80046d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0220 	mvn.w	r2, #32
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f001 f822 	bl	8005194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004172:	2302      	movs	r3, #2
 8004174:	e088      	b.n	8004288 <HAL_TIM_IC_ConfigChannel+0x130>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11b      	bne.n	80041bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004194:	f000 fd98 	bl	8004cc8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 020c 	bic.w	r2, r2, #12
 80041a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	619a      	str	r2, [r3, #24]
 80041ba:	e060      	b.n	800427e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d11c      	bne.n	80041fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80041d2:	f000 fe1c 	bl	8004e0e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80041e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6999      	ldr	r1, [r3, #24]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	021a      	lsls	r2, r3, #8
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	619a      	str	r2, [r3, #24]
 80041fa:	e040      	b.n	800427e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d11b      	bne.n	800423a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004212:	f000 fe69 	bl	8004ee8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 020c 	bic.w	r2, r2, #12
 8004224:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69d9      	ldr	r1, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
 8004238:	e021      	b.n	800427e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d11c      	bne.n	800427a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004250:	f000 fe86 	bl	8004f60 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004262:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69d9      	ldr	r1, [r3, #28]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	021a      	lsls	r2, r3, #8
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	61da      	str	r2, [r3, #28]
 8004278:	e001      	b.n	800427e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0ae      	b.n	800440c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	f200 809f 	bhi.w	80043fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042be:	a201      	add	r2, pc, #4	@ (adr r2, 80042c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	080043fd 	.word	0x080043fd
 80042cc:	080043fd 	.word	0x080043fd
 80042d0:	080043fd 	.word	0x080043fd
 80042d4:	08004339 	.word	0x08004339
 80042d8:	080043fd 	.word	0x080043fd
 80042dc:	080043fd 	.word	0x080043fd
 80042e0:	080043fd 	.word	0x080043fd
 80042e4:	0800437b 	.word	0x0800437b
 80042e8:	080043fd 	.word	0x080043fd
 80042ec:	080043fd 	.word	0x080043fd
 80042f0:	080043fd 	.word	0x080043fd
 80042f4:	080043bb 	.word	0x080043bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 faa0 	bl	8004844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0208 	orr.w	r2, r2, #8
 8004312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6999      	ldr	r1, [r3, #24]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	619a      	str	r2, [r3, #24]
      break;
 8004336:	e064      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 faf0 	bl	8004924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6999      	ldr	r1, [r3, #24]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	021a      	lsls	r2, r3, #8
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	619a      	str	r2, [r3, #24]
      break;
 8004378:	e043      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fb45 	bl	8004a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0208 	orr.w	r2, r2, #8
 8004394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0204 	bic.w	r2, r2, #4
 80043a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69d9      	ldr	r1, [r3, #28]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	61da      	str	r2, [r3, #28]
      break;
 80043b8:	e023      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fb99 	bl	8004af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69d9      	ldr	r1, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	021a      	lsls	r2, r3, #8
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	61da      	str	r2, [r3, #28]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800440a:	7dfb      	ldrb	r3, [r7, #23]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIM_ConfigClockSource+0x1c>
 800442c:	2302      	movs	r3, #2
 800442e:	e0b4      	b.n	800459a <HAL_TIM_ConfigClockSource+0x186>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800444e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004468:	d03e      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xd4>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446e:	f200 8087 	bhi.w	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004476:	f000 8086 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x172>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447e:	d87f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b70      	cmp	r3, #112	@ 0x70
 8004482:	d01a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0xa6>
 8004484:	2b70      	cmp	r3, #112	@ 0x70
 8004486:	d87b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b60      	cmp	r3, #96	@ 0x60
 800448a:	d050      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x11a>
 800448c:	2b60      	cmp	r3, #96	@ 0x60
 800448e:	d877      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b50      	cmp	r3, #80	@ 0x50
 8004492:	d03c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xfa>
 8004494:	2b50      	cmp	r3, #80	@ 0x50
 8004496:	d873      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	d058      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x13a>
 800449c:	2b40      	cmp	r3, #64	@ 0x40
 800449e:	d86f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b30      	cmp	r3, #48	@ 0x30
 80044a2:	d064      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044a4:	2b30      	cmp	r3, #48	@ 0x30
 80044a6:	d86b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d060      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d867      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d05a      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	e062      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	f000 fda1 	bl	8005010 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e04f      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	f000 fd8a 	bl	8005010 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e03c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451a:	461a      	mov	r2, r3
 800451c:	f000 fc48 	bl	8004db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2150      	movs	r1, #80	@ 0x50
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fd57 	bl	8004fda <TIM_ITRx_SetConfig>
      break;
 800452c:	e02c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800453a:	461a      	mov	r2, r3
 800453c:	f000 fca4 	bl	8004e88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2160      	movs	r1, #96	@ 0x60
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fd47 	bl	8004fda <TIM_ITRx_SetConfig>
      break;
 800454c:	e01c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455a:	461a      	mov	r2, r3
 800455c:	f000 fc28 	bl	8004db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2140      	movs	r1, #64	@ 0x40
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fd37 	bl	8004fda <TIM_ITRx_SetConfig>
      break;
 800456c:	e00c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 fd2e 	bl	8004fda <TIM_ITRx_SetConfig>
      break;
 800457e:	e003      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e000      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_SlaveConfigSynchro+0x18>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e031      	b.n	800461e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80045ca:	6839      	ldr	r1, [r7, #0]
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fae9 	bl	8004ba4 <TIM_SlaveTimer_SetConfig>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e018      	b.n	800461e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800460a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d831      	bhi.n	80046a0 <HAL_TIM_ReadCapturedValue+0x78>
 800463c:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <HAL_TIM_ReadCapturedValue+0x1c>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004679 	.word	0x08004679
 8004648:	080046a1 	.word	0x080046a1
 800464c:	080046a1 	.word	0x080046a1
 8004650:	080046a1 	.word	0x080046a1
 8004654:	08004683 	.word	0x08004683
 8004658:	080046a1 	.word	0x080046a1
 800465c:	080046a1 	.word	0x080046a1
 8004660:	080046a1 	.word	0x080046a1
 8004664:	0800468d 	.word	0x0800468d
 8004668:	080046a1 	.word	0x080046a1
 800466c:	080046a1 	.word	0x080046a1
 8004670:	080046a1 	.word	0x080046a1
 8004674:	08004697 	.word	0x08004697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467e:	60fb      	str	r3, [r7, #12]

      break;
 8004680:	e00f      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	60fb      	str	r3, [r7, #12]

      break;
 800468a:	e00a      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	60fb      	str	r3, [r7, #12]

      break;
 8004694:	e005      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	60fb      	str	r3, [r7, #12]

      break;
 800469e:	e000      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80046a0:	bf00      	nop
  }

  return tmpreg;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a46      	ldr	r2, [pc, #280]	@ (8004818 <TIM_Base_SetConfig+0x12c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470a:	d00f      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a43      	ldr	r2, [pc, #268]	@ (800481c <TIM_Base_SetConfig+0x130>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00b      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a42      	ldr	r2, [pc, #264]	@ (8004820 <TIM_Base_SetConfig+0x134>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a41      	ldr	r2, [pc, #260]	@ (8004824 <TIM_Base_SetConfig+0x138>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a40      	ldr	r2, [pc, #256]	@ (8004828 <TIM_Base_SetConfig+0x13c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d108      	bne.n	800473e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a35      	ldr	r2, [pc, #212]	@ (8004818 <TIM_Base_SetConfig+0x12c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d02b      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474c:	d027      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a32      	ldr	r2, [pc, #200]	@ (800481c <TIM_Base_SetConfig+0x130>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d023      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a31      	ldr	r2, [pc, #196]	@ (8004820 <TIM_Base_SetConfig+0x134>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01f      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a30      	ldr	r2, [pc, #192]	@ (8004824 <TIM_Base_SetConfig+0x138>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01b      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2f      	ldr	r2, [pc, #188]	@ (8004828 <TIM_Base_SetConfig+0x13c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d017      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2e      	ldr	r2, [pc, #184]	@ (800482c <TIM_Base_SetConfig+0x140>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2d      	ldr	r2, [pc, #180]	@ (8004830 <TIM_Base_SetConfig+0x144>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00f      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2c      	ldr	r2, [pc, #176]	@ (8004834 <TIM_Base_SetConfig+0x148>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00b      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2b      	ldr	r2, [pc, #172]	@ (8004838 <TIM_Base_SetConfig+0x14c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d007      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2a      	ldr	r2, [pc, #168]	@ (800483c <TIM_Base_SetConfig+0x150>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a29      	ldr	r2, [pc, #164]	@ (8004840 <TIM_Base_SetConfig+0x154>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d108      	bne.n	80047b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a10      	ldr	r2, [pc, #64]	@ (8004818 <TIM_Base_SetConfig+0x12c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <TIM_Base_SetConfig+0xf8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a12      	ldr	r2, [pc, #72]	@ (8004828 <TIM_Base_SetConfig+0x13c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d103      	bne.n	80047ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d105      	bne.n	800480a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	611a      	str	r2, [r3, #16]
  }
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00
 8004828:	40010400 	.word	0x40010400
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800
 8004838:	40001800 	.word	0x40001800
 800483c:	40001c00 	.word	0x40001c00
 8004840:	40002000 	.word	0x40002000

08004844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f023 0201 	bic.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f023 0302 	bic.w	r3, r3, #2
 800488c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a20      	ldr	r2, [pc, #128]	@ (800491c <TIM_OC1_SetConfig+0xd8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_OC1_SetConfig+0x64>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004920 <TIM_OC1_SetConfig+0xdc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d10c      	bne.n	80048c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0308 	bic.w	r3, r3, #8
 80048ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 0304 	bic.w	r3, r3, #4
 80048c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a15      	ldr	r2, [pc, #84]	@ (800491c <TIM_OC1_SetConfig+0xd8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_OC1_SetConfig+0x8e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a14      	ldr	r2, [pc, #80]	@ (8004920 <TIM_OC1_SetConfig+0xdc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d111      	bne.n	80048f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	621a      	str	r2, [r3, #32]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40010000 	.word	0x40010000
 8004920:	40010400 	.word	0x40010400

08004924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f023 0210 	bic.w	r2, r3, #16
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800495a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0320 	bic.w	r3, r3, #32
 800496e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a22      	ldr	r2, [pc, #136]	@ (8004a08 <TIM_OC2_SetConfig+0xe4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_OC2_SetConfig+0x68>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a21      	ldr	r2, [pc, #132]	@ (8004a0c <TIM_OC2_SetConfig+0xe8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10d      	bne.n	80049a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a17      	ldr	r2, [pc, #92]	@ (8004a08 <TIM_OC2_SetConfig+0xe4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_OC2_SetConfig+0x94>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a16      	ldr	r2, [pc, #88]	@ (8004a0c <TIM_OC2_SetConfig+0xe8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d113      	bne.n	80049e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40010400 	.word	0x40010400

08004a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0303 	bic.w	r3, r3, #3
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a21      	ldr	r2, [pc, #132]	@ (8004af0 <TIM_OC3_SetConfig+0xe0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_OC3_SetConfig+0x66>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a20      	ldr	r2, [pc, #128]	@ (8004af4 <TIM_OC3_SetConfig+0xe4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d10d      	bne.n	8004a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a16      	ldr	r2, [pc, #88]	@ (8004af0 <TIM_OC3_SetConfig+0xe0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_OC3_SetConfig+0x92>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <TIM_OC3_SetConfig+0xe4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d113      	bne.n	8004aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	621a      	str	r2, [r3, #32]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40010400 	.word	0x40010400

08004af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	031b      	lsls	r3, r3, #12
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <TIM_OC4_SetConfig+0xa4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_OC4_SetConfig+0x68>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ba0 <TIM_OC4_SetConfig+0xa8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d109      	bne.n	8004b74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40010400 	.word	0x40010400

08004ba4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f023 0307 	bic.w	r3, r3, #7
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b70      	cmp	r3, #112	@ 0x70
 8004bec:	d01a      	beq.n	8004c24 <TIM_SlaveTimer_SetConfig+0x80>
 8004bee:	2b70      	cmp	r3, #112	@ 0x70
 8004bf0:	d860      	bhi.n	8004cb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004bf2:	2b60      	cmp	r3, #96	@ 0x60
 8004bf4:	d054      	beq.n	8004ca0 <TIM_SlaveTimer_SetConfig+0xfc>
 8004bf6:	2b60      	cmp	r3, #96	@ 0x60
 8004bf8:	d85c      	bhi.n	8004cb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004bfa:	2b50      	cmp	r3, #80	@ 0x50
 8004bfc:	d046      	beq.n	8004c8c <TIM_SlaveTimer_SetConfig+0xe8>
 8004bfe:	2b50      	cmp	r3, #80	@ 0x50
 8004c00:	d858      	bhi.n	8004cb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004c02:	2b40      	cmp	r3, #64	@ 0x40
 8004c04:	d019      	beq.n	8004c3a <TIM_SlaveTimer_SetConfig+0x96>
 8004c06:	2b40      	cmp	r3, #64	@ 0x40
 8004c08:	d854      	bhi.n	8004cb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004c0a:	2b30      	cmp	r3, #48	@ 0x30
 8004c0c:	d055      	beq.n	8004cba <TIM_SlaveTimer_SetConfig+0x116>
 8004c0e:	2b30      	cmp	r3, #48	@ 0x30
 8004c10:	d850      	bhi.n	8004cb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d051      	beq.n	8004cba <TIM_SlaveTimer_SetConfig+0x116>
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d84c      	bhi.n	8004cb4 <TIM_SlaveTimer_SetConfig+0x110>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d04d      	beq.n	8004cba <TIM_SlaveTimer_SetConfig+0x116>
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d04b      	beq.n	8004cba <TIM_SlaveTimer_SetConfig+0x116>
 8004c22:	e047      	b.n	8004cb4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004c34:	f000 f9ec 	bl	8005010 <TIM_ETR_SetConfig>
      break;
 8004c38:	e040      	b.n	8004cbc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d101      	bne.n	8004c46 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e03b      	b.n	8004cbe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c6c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
      break;
 8004c8a:	e017      	b.n	8004cbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f000 f889 	bl	8004db0 <TIM_TI1_ConfigInputStage>
      break;
 8004c9e:	e00d      	b.n	8004cbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cac:	461a      	mov	r2, r3
 8004cae:	f000 f8eb 	bl	8004e88 <TIM_TI2_ConfigInputStage>
      break;
 8004cb2:	e003      	b.n	8004cbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb8:	e000      	b.n	8004cbc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004cba:	bf00      	nop
  }

  return status;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f023 0201 	bic.w	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a28      	ldr	r2, [pc, #160]	@ (8004d94 <TIM_TI1_SetConfig+0xcc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01b      	beq.n	8004d2e <TIM_TI1_SetConfig+0x66>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfc:	d017      	beq.n	8004d2e <TIM_TI1_SetConfig+0x66>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a25      	ldr	r2, [pc, #148]	@ (8004d98 <TIM_TI1_SetConfig+0xd0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <TIM_TI1_SetConfig+0x66>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4a24      	ldr	r2, [pc, #144]	@ (8004d9c <TIM_TI1_SetConfig+0xd4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00f      	beq.n	8004d2e <TIM_TI1_SetConfig+0x66>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a23      	ldr	r2, [pc, #140]	@ (8004da0 <TIM_TI1_SetConfig+0xd8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_TI1_SetConfig+0x66>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a22      	ldr	r2, [pc, #136]	@ (8004da4 <TIM_TI1_SetConfig+0xdc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_TI1_SetConfig+0x66>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a21      	ldr	r2, [pc, #132]	@ (8004da8 <TIM_TI1_SetConfig+0xe0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_TI1_SetConfig+0x66>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a20      	ldr	r2, [pc, #128]	@ (8004dac <TIM_TI1_SetConfig+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <TIM_TI1_SetConfig+0x6a>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <TIM_TI1_SetConfig+0x6c>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e003      	b.n	8004d52 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f023 030a 	bic.w	r3, r3, #10
 8004d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f003 030a 	and.w	r3, r3, #10
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40010400 	.word	0x40010400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40001800 	.word	0x40001800

08004db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0201 	bic.w	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 030a 	bic.w	r3, r3, #10
 8004dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b087      	sub	sp, #28
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
 8004e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0210 	bic.w	r2, r3, #16
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	031b      	lsls	r3, r3, #12
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	621a      	str	r2, [r3, #32]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0210 	bic.w	r2, r3, #16
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	031b      	lsls	r3, r3, #12
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	621a      	str	r2, [r3, #32]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f023 0303 	bic.w	r3, r3, #3
 8004f14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	031b      	lsls	r3, r3, #12
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004fb2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	031b      	lsls	r3, r3, #12
 8004fb8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f043 0307 	orr.w	r3, r3, #7
 8004ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	609a      	str	r2, [r3, #8]
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800502a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	021a      	lsls	r2, r3, #8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	431a      	orrs	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4313      	orrs	r3, r2
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	bf00      	nop
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	2201      	movs	r2, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1a      	ldr	r2, [r3, #32]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	431a      	orrs	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e05a      	b.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a21      	ldr	r2, [pc, #132]	@ (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d022      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005100:	d01d      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1d      	ldr	r2, [pc, #116]	@ (800517c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d018      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1a      	ldr	r2, [pc, #104]	@ (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d009      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a17      	ldr	r2, [pc, #92]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a15      	ldr	r2, [pc, #84]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10c      	bne.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	4313      	orrs	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40010000 	.word	0x40010000
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40010400 	.word	0x40010400
 800518c:	40014000 	.word	0x40014000
 8005190:	40001800 	.word	0x40001800

08005194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e042      	b.n	8005254 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fc fb12 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2224      	movs	r2, #36	@ 0x24
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fdbd 	bl	8005d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	@ 0x28
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b20      	cmp	r3, #32
 800527a:	d175      	bne.n	8005368 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_UART_Transmit+0x2c>
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e06e      	b.n	800536a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2221      	movs	r2, #33	@ 0x21
 8005296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800529a:	f7fc fe49 	bl	8001f30 <HAL_GetTick>
 800529e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b4:	d108      	bne.n	80052c8 <HAL_UART_Transmit+0x6c>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	e003      	b.n	80052d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052d0:	e02e      	b.n	8005330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	2180      	movs	r1, #128	@ 0x80
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fb1f 	bl	8005920 <UART_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e03a      	b.n	800536a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	3302      	adds	r3, #2
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e007      	b.n	8005322 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	3301      	adds	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1cb      	bne.n	80052d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2140      	movs	r1, #64	@ 0x40
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 faeb 	bl	8005920 <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b20      	cmp	r3, #32
 800538a:	d112      	bne.n	80053b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_UART_Receive_IT+0x26>
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e00b      	b.n	80053b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	461a      	mov	r2, r3
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fb12 	bl	80059d2 <UART_Start_Receive_IT>
 80053ae:	4603      	mov	r3, r0
 80053b0:	e000      	b.n	80053b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053b2:	2302      	movs	r3, #2
  }
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b0ba      	sub	sp, #232	@ 0xe8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_UART_IRQHandler+0x66>
 800540e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fbf2 	bl	8005c04 <UART_Receive_IT>
      return;
 8005420:	e25b      	b.n	80058da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80de 	beq.w	80055e8 <HAL_UART_IRQHandler+0x22c>
 800542c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800543c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80d1 	beq.w	80055e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <HAL_UART_IRQHandler+0xae>
 8005452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	f043 0201 	orr.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800546a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_UART_IRQHandler+0xd2>
 8005476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005486:	f043 0202 	orr.w	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_UART_IRQHandler+0xf6>
 800549a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	f043 0204 	orr.w	r2, r3, #4
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_UART_IRQHandler+0x126>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	f043 0208 	orr.w	r2, r3, #8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 81f2 	beq.w	80058d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <HAL_UART_IRQHandler+0x14e>
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fb7d 	bl	8005c04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005514:	2b40      	cmp	r3, #64	@ 0x40
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <HAL_UART_IRQHandler+0x17a>
 800552e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d04f      	beq.n	80055d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa85 	bl	8005a46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005546:	2b40      	cmp	r3, #64	@ 0x40
 8005548:	d141      	bne.n	80055ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3314      	adds	r3, #20
 8005550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005576:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800557a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800558e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1d9      	bne.n	800554a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d013      	beq.n	80055c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a2:	4a7e      	ldr	r2, [pc, #504]	@ (800579c <HAL_UART_IRQHandler+0x3e0>)
 80055a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fc fef0 	bl	8002390 <HAL_DMA_Abort_IT>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055c0:	4610      	mov	r0, r2
 80055c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	e00e      	b.n	80055e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f994 	bl	80058f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e00a      	b.n	80055e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f990 	bl	80058f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	e006      	b.n	80055e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f98c 	bl	80058f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055e2:	e175      	b.n	80058d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	bf00      	nop
    return;
 80055e6:	e173      	b.n	80058d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	f040 814f 	bne.w	8005890 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8148 	beq.w	8005890 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8141 	beq.w	8005890 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562e:	2b40      	cmp	r3, #64	@ 0x40
 8005630:	f040 80b6 	bne.w	80057a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005640:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8145 	beq.w	80058d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800564e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005652:	429a      	cmp	r2, r3
 8005654:	f080 813e 	bcs.w	80058d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800565e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800566a:	f000 8088 	beq.w	800577e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800568c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800569a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800569e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1d9      	bne.n	800566e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e1      	bne.n	80056ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3314      	adds	r3, #20
 80056fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800570c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3314      	adds	r3, #20
 8005716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800571a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800571c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005720:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e3      	bne.n	80056f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800574c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005760:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005762:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005766:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800576e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e3      	bne.n	800573c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005778:	4618      	mov	r0, r3
 800577a:	f7fc fd99 	bl	80022b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800578c:	b29b      	uxth	r3, r3
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	b29b      	uxth	r3, r3
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f8b7 	bl	8005908 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800579a:	e09b      	b.n	80058d4 <HAL_UART_IRQHandler+0x518>
 800579c:	08005b0d 	.word	0x08005b0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 808e 	beq.w	80058d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8089 	beq.w	80058d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	330c      	adds	r3, #12
 80057cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80057ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e3      	bne.n	80057c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3314      	adds	r3, #20
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	623b      	str	r3, [r7, #32]
   return(result);
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3314      	adds	r3, #20
 800581e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005822:	633a      	str	r2, [r7, #48]	@ 0x30
 8005824:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e3      	bne.n	80057fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	60fb      	str	r3, [r7, #12]
   return(result);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0310 	bic.w	r3, r3, #16
 800585a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005868:	61fa      	str	r2, [r7, #28]
 800586a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	69b9      	ldr	r1, [r7, #24]
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	617b      	str	r3, [r7, #20]
   return(result);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e3      	bne.n	8005844 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005882:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f83d 	bl	8005908 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800588e:	e023      	b.n	80058d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <HAL_UART_IRQHandler+0x4f4>
 800589c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f943 	bl	8005b34 <UART_Transmit_IT>
    return;
 80058ae:	e014      	b.n	80058da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00e      	beq.n	80058da <HAL_UART_IRQHandler+0x51e>
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d008      	beq.n	80058da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f983 	bl	8005bd4 <UART_EndTransmit_IT>
    return;
 80058ce:	e004      	b.n	80058da <HAL_UART_IRQHandler+0x51e>
    return;
 80058d0:	bf00      	nop
 80058d2:	e002      	b.n	80058da <HAL_UART_IRQHandler+0x51e>
      return;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <HAL_UART_IRQHandler+0x51e>
      return;
 80058d8:	bf00      	nop
  }
}
 80058da:	37e8      	adds	r7, #232	@ 0xe8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005930:	e03b      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005938:	d037      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593a:	f7fc faf9 	bl	8001f30 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	429a      	cmp	r2, r3
 8005948:	d302      	bcc.n	8005950 <UART_WaitOnFlagUntilTimeout+0x30>
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e03a      	b.n	80059ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d023      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b80      	cmp	r3, #128	@ 0x80
 8005966:	d020      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b40      	cmp	r3, #64	@ 0x40
 800596c:	d01d      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b08      	cmp	r3, #8
 800597a:	d116      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f857 	bl	8005a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2208      	movs	r2, #8
 800599c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e00f      	b.n	80059ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d0b4      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	88fa      	ldrh	r2, [r7, #6]
 80059ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2222      	movs	r2, #34	@ 0x22
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a16:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0220 	orr.w	r2, r2, #32
 8005a36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b095      	sub	sp, #84	@ 0x54
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e5      	bne.n	8005a4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3314      	adds	r3, #20
 8005aa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e5      	bne.n	8005a82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d119      	bne.n	8005af2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 0310 	bic.w	r3, r3, #16
 8005ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ade:	61ba      	str	r2, [r7, #24]
 8005ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6979      	ldr	r1, [r7, #20]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	613b      	str	r3, [r7, #16]
   return(result);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e5      	bne.n	8005abe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b00:	bf00      	nop
 8005b02:	3754      	adds	r7, #84	@ 0x54
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fee4 	bl	80058f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b21      	cmp	r3, #33	@ 0x21
 8005b46:	d13e      	bne.n	8005bc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b50:	d114      	bne.n	8005b7c <UART_Transmit_IT+0x48>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d110      	bne.n	8005b7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	1c9a      	adds	r2, r3, #2
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]
 8005b7a:	e008      	b.n	8005b8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6211      	str	r1, [r2, #32]
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10f      	bne.n	8005bc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e000      	b.n	8005bc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bc6:	2302      	movs	r3, #2
  }
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff fe73 	bl	80058e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	@ 0x30
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b22      	cmp	r3, #34	@ 0x22
 8005c16:	f040 80ae 	bne.w	8005d76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c22:	d117      	bne.n	8005c54 <UART_Receive_IT+0x50>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d113      	bne.n	8005c54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c52:	e026      	b.n	8005ca2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c66:	d007      	beq.n	8005c78 <UART_Receive_IT+0x74>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <UART_Receive_IT+0x82>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e008      	b.n	8005c98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d15d      	bne.n	8005d72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0220 	bic.w	r2, r2, #32
 8005cc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695a      	ldr	r2, [r3, #20]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d135      	bne.n	8005d68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	330c      	adds	r3, #12
 8005d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d22:	623a      	str	r2, [r7, #32]
 8005d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	69f9      	ldr	r1, [r7, #28]
 8005d28:	6a3a      	ldr	r2, [r7, #32]
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e5      	bne.n	8005d02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d10a      	bne.n	8005d5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fdd1 	bl	8005908 <HAL_UARTEx_RxEventCallback>
 8005d66:	e002      	b.n	8005d6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fb f979 	bl	8001060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e002      	b.n	8005d78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e000      	b.n	8005d78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d76:	2302      	movs	r3, #2
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3730      	adds	r7, #48	@ 0x30
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d84:	b0c0      	sub	sp, #256	@ 0x100
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	68d9      	ldr	r1, [r3, #12]
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	ea40 0301 	orr.w	r3, r0, r1
 8005da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005dd8:	f021 010c 	bic.w	r1, r1, #12
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005de6:	430b      	orrs	r3, r1
 8005de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	6999      	ldr	r1, [r3, #24]
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	ea40 0301 	orr.w	r3, r0, r1
 8005e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800604c <UART_SetConfig+0x2cc>)
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d005      	beq.n	8005e20 <UART_SetConfig+0xa0>
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8006050 <UART_SetConfig+0x2d0>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d104      	bne.n	8005e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e20:	f7fd f832 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 8005e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e28:	e003      	b.n	8005e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e2a:	f7fd f819 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 8005e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e3c:	f040 810c 	bne.w	8006058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	1891      	adds	r1, r2, r2
 8005e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e5a:	415b      	adcs	r3, r3
 8005e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e62:	4621      	mov	r1, r4
 8005e64:	eb12 0801 	adds.w	r8, r2, r1
 8005e68:	4629      	mov	r1, r5
 8005e6a:	eb43 0901 	adc.w	r9, r3, r1
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e82:	4690      	mov	r8, r2
 8005e84:	4699      	mov	r9, r3
 8005e86:	4623      	mov	r3, r4
 8005e88:	eb18 0303 	adds.w	r3, r8, r3
 8005e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e90:	462b      	mov	r3, r5
 8005e92:	eb49 0303 	adc.w	r3, r9, r3
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005eae:	460b      	mov	r3, r1
 8005eb0:	18db      	adds	r3, r3, r3
 8005eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	eb42 0303 	adc.w	r3, r2, r3
 8005eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ec4:	f7fa ff00 	bl	8000cc8 <__aeabi_uldivmod>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4b61      	ldr	r3, [pc, #388]	@ (8006054 <UART_SetConfig+0x2d4>)
 8005ece:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	011c      	lsls	r4, r3, #4
 8005ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	1891      	adds	r1, r2, r2
 8005eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ef0:	415b      	adcs	r3, r3
 8005ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ef8:	4641      	mov	r1, r8
 8005efa:	eb12 0a01 	adds.w	sl, r2, r1
 8005efe:	4649      	mov	r1, r9
 8005f00:	eb43 0b01 	adc.w	fp, r3, r1
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f18:	4692      	mov	sl, r2
 8005f1a:	469b      	mov	fp, r3
 8005f1c:	4643      	mov	r3, r8
 8005f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f26:	464b      	mov	r3, r9
 8005f28:	eb4b 0303 	adc.w	r3, fp, r3
 8005f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f44:	460b      	mov	r3, r1
 8005f46:	18db      	adds	r3, r3, r3
 8005f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	eb42 0303 	adc.w	r3, r2, r3
 8005f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f5a:	f7fa feb5 	bl	8000cc8 <__aeabi_uldivmod>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	4b3b      	ldr	r3, [pc, #236]	@ (8006054 <UART_SetConfig+0x2d4>)
 8005f66:	fba3 2301 	umull	r2, r3, r3, r1
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2264      	movs	r2, #100	@ 0x64
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	1acb      	subs	r3, r1, r3
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f7a:	4b36      	ldr	r3, [pc, #216]	@ (8006054 <UART_SetConfig+0x2d4>)
 8005f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f88:	441c      	add	r4, r3
 8005f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	1891      	adds	r1, r2, r2
 8005fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fa4:	415b      	adcs	r3, r3
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fac:	4641      	mov	r1, r8
 8005fae:	1851      	adds	r1, r2, r1
 8005fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	414b      	adcs	r3, r1
 8005fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	00cb      	lsls	r3, r1, #3
 8005fc8:	4651      	mov	r1, sl
 8005fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fce:	4651      	mov	r1, sl
 8005fd0:	00ca      	lsls	r2, r1, #3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	4642      	mov	r2, r8
 8005fda:	189b      	adds	r3, r3, r2
 8005fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	460a      	mov	r2, r1
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006000:	460b      	mov	r3, r1
 8006002:	18db      	adds	r3, r3, r3
 8006004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006006:	4613      	mov	r3, r2
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800600e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006016:	f7fa fe57 	bl	8000cc8 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <UART_SetConfig+0x2d4>)
 8006020:	fba3 1302 	umull	r1, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	2164      	movs	r1, #100	@ 0x64
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	3332      	adds	r3, #50	@ 0x32
 8006032:	4a08      	ldr	r2, [pc, #32]	@ (8006054 <UART_SetConfig+0x2d4>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	f003 0207 	and.w	r2, r3, #7
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4422      	add	r2, r4
 8006046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006048:	e106      	b.n	8006258 <UART_SetConfig+0x4d8>
 800604a:	bf00      	nop
 800604c:	40011000 	.word	0x40011000
 8006050:	40011400 	.word	0x40011400
 8006054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800606a:	4642      	mov	r2, r8
 800606c:	464b      	mov	r3, r9
 800606e:	1891      	adds	r1, r2, r2
 8006070:	6239      	str	r1, [r7, #32]
 8006072:	415b      	adcs	r3, r3
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
 8006076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800607a:	4641      	mov	r1, r8
 800607c:	1854      	adds	r4, r2, r1
 800607e:	4649      	mov	r1, r9
 8006080:	eb43 0501 	adc.w	r5, r3, r1
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	00eb      	lsls	r3, r5, #3
 800608e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006092:	00e2      	lsls	r2, r4, #3
 8006094:	4614      	mov	r4, r2
 8006096:	461d      	mov	r5, r3
 8006098:	4643      	mov	r3, r8
 800609a:	18e3      	adds	r3, r4, r3
 800609c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060a0:	464b      	mov	r3, r9
 80060a2:	eb45 0303 	adc.w	r3, r5, r3
 80060a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060c6:	4629      	mov	r1, r5
 80060c8:	008b      	lsls	r3, r1, #2
 80060ca:	4621      	mov	r1, r4
 80060cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060d0:	4621      	mov	r1, r4
 80060d2:	008a      	lsls	r2, r1, #2
 80060d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060d8:	f7fa fdf6 	bl	8000cc8 <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4b60      	ldr	r3, [pc, #384]	@ (8006264 <UART_SetConfig+0x4e4>)
 80060e2:	fba3 2302 	umull	r2, r3, r3, r2
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	011c      	lsls	r4, r3, #4
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	1891      	adds	r1, r2, r2
 8006102:	61b9      	str	r1, [r7, #24]
 8006104:	415b      	adcs	r3, r3
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800610c:	4641      	mov	r1, r8
 800610e:	1851      	adds	r1, r2, r1
 8006110:	6139      	str	r1, [r7, #16]
 8006112:	4649      	mov	r1, r9
 8006114:	414b      	adcs	r3, r1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006124:	4659      	mov	r1, fp
 8006126:	00cb      	lsls	r3, r1, #3
 8006128:	4651      	mov	r1, sl
 800612a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800612e:	4651      	mov	r1, sl
 8006130:	00ca      	lsls	r2, r1, #3
 8006132:	4610      	mov	r0, r2
 8006134:	4619      	mov	r1, r3
 8006136:	4603      	mov	r3, r0
 8006138:	4642      	mov	r2, r8
 800613a:	189b      	adds	r3, r3, r2
 800613c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006140:	464b      	mov	r3, r9
 8006142:	460a      	mov	r2, r1
 8006144:	eb42 0303 	adc.w	r3, r2, r3
 8006148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006164:	4649      	mov	r1, r9
 8006166:	008b      	lsls	r3, r1, #2
 8006168:	4641      	mov	r1, r8
 800616a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800616e:	4641      	mov	r1, r8
 8006170:	008a      	lsls	r2, r1, #2
 8006172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006176:	f7fa fda7 	bl	8000cc8 <__aeabi_uldivmod>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4611      	mov	r1, r2
 8006180:	4b38      	ldr	r3, [pc, #224]	@ (8006264 <UART_SetConfig+0x4e4>)
 8006182:	fba3 2301 	umull	r2, r3, r3, r1
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	2264      	movs	r2, #100	@ 0x64
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	1acb      	subs	r3, r1, r3
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	3332      	adds	r3, #50	@ 0x32
 8006194:	4a33      	ldr	r2, [pc, #204]	@ (8006264 <UART_SetConfig+0x4e4>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061a0:	441c      	add	r4, r3
 80061a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a6:	2200      	movs	r2, #0
 80061a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80061aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80061ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061b0:	4642      	mov	r2, r8
 80061b2:	464b      	mov	r3, r9
 80061b4:	1891      	adds	r1, r2, r2
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	415b      	adcs	r3, r3
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c0:	4641      	mov	r1, r8
 80061c2:	1851      	adds	r1, r2, r1
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	4649      	mov	r1, r9
 80061c8:	414b      	adcs	r3, r1
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061d8:	4659      	mov	r1, fp
 80061da:	00cb      	lsls	r3, r1, #3
 80061dc:	4651      	mov	r1, sl
 80061de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e2:	4651      	mov	r1, sl
 80061e4:	00ca      	lsls	r2, r1, #3
 80061e6:	4610      	mov	r0, r2
 80061e8:	4619      	mov	r1, r3
 80061ea:	4603      	mov	r3, r0
 80061ec:	4642      	mov	r2, r8
 80061ee:	189b      	adds	r3, r3, r2
 80061f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061f2:	464b      	mov	r3, r9
 80061f4:	460a      	mov	r2, r1
 80061f6:	eb42 0303 	adc.w	r3, r2, r3
 80061fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	663b      	str	r3, [r7, #96]	@ 0x60
 8006206:	667a      	str	r2, [r7, #100]	@ 0x64
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006214:	4649      	mov	r1, r9
 8006216:	008b      	lsls	r3, r1, #2
 8006218:	4641      	mov	r1, r8
 800621a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621e:	4641      	mov	r1, r8
 8006220:	008a      	lsls	r2, r1, #2
 8006222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006226:	f7fa fd4f 	bl	8000cc8 <__aeabi_uldivmod>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <UART_SetConfig+0x4e4>)
 8006230:	fba3 1302 	umull	r1, r3, r3, r2
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	2164      	movs	r1, #100	@ 0x64
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	3332      	adds	r3, #50	@ 0x32
 8006242:	4a08      	ldr	r2, [pc, #32]	@ (8006264 <UART_SetConfig+0x4e4>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4422      	add	r2, r4
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800625e:	46bd      	mov	sp, r7
 8006260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006264:	51eb851f 	.word	0x51eb851f

08006268 <__NVIC_SetPriority>:
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	6039      	str	r1, [r7, #0]
 8006272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006278:	2b00      	cmp	r3, #0
 800627a:	db0a      	blt.n	8006292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	b2da      	uxtb	r2, r3
 8006280:	490c      	ldr	r1, [pc, #48]	@ (80062b4 <__NVIC_SetPriority+0x4c>)
 8006282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006286:	0112      	lsls	r2, r2, #4
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	440b      	add	r3, r1
 800628c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006290:	e00a      	b.n	80062a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	4908      	ldr	r1, [pc, #32]	@ (80062b8 <__NVIC_SetPriority+0x50>)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	3b04      	subs	r3, #4
 80062a0:	0112      	lsls	r2, r2, #4
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	440b      	add	r3, r1
 80062a6:	761a      	strb	r2, [r3, #24]
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	e000e100 	.word	0xe000e100
 80062b8:	e000ed00 	.word	0xe000ed00

080062bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80062c0:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <SysTick_Handler+0x1c>)
 80062c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062c4:	f001 feae 	bl	8008024 <xTaskGetSchedulerState>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d001      	beq.n	80062d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80062ce:	f002 fda3 	bl	8008e18 <xPortSysTickHandler>
  }
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	e000e010 	.word	0xe000e010

080062dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80062e0:	2100      	movs	r1, #0
 80062e2:	f06f 0004 	mvn.w	r0, #4
 80062e6:	f7ff ffbf 	bl	8006268 <__NVIC_SetPriority>
#endif
}
 80062ea:	bf00      	nop
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f6:	f3ef 8305 	mrs	r3, IPSR
 80062fa:	603b      	str	r3, [r7, #0]
  return(result);
 80062fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006302:	f06f 0305 	mvn.w	r3, #5
 8006306:	607b      	str	r3, [r7, #4]
 8006308:	e00c      	b.n	8006324 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800630a:	4b0a      	ldr	r3, [pc, #40]	@ (8006334 <osKernelInitialize+0x44>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d105      	bne.n	800631e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006312:	4b08      	ldr	r3, [pc, #32]	@ (8006334 <osKernelInitialize+0x44>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006318:	2300      	movs	r3, #0
 800631a:	607b      	str	r3, [r7, #4]
 800631c:	e002      	b.n	8006324 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800631e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006324:	687b      	ldr	r3, [r7, #4]
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	200003ac 	.word	0x200003ac

08006338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800633e:	f3ef 8305 	mrs	r3, IPSR
 8006342:	603b      	str	r3, [r7, #0]
  return(result);
 8006344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <osKernelStart+0x1a>
    stat = osErrorISR;
 800634a:	f06f 0305 	mvn.w	r3, #5
 800634e:	607b      	str	r3, [r7, #4]
 8006350:	e010      	b.n	8006374 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006352:	4b0b      	ldr	r3, [pc, #44]	@ (8006380 <osKernelStart+0x48>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d109      	bne.n	800636e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800635a:	f7ff ffbf 	bl	80062dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800635e:	4b08      	ldr	r3, [pc, #32]	@ (8006380 <osKernelStart+0x48>)
 8006360:	2202      	movs	r2, #2
 8006362:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006364:	f001 fa10 	bl	8007788 <vTaskStartScheduler>
      stat = osOK;
 8006368:	2300      	movs	r3, #0
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e002      	b.n	8006374 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800636e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006374:	687b      	ldr	r3, [r7, #4]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	200003ac 	.word	0x200003ac

08006384 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	@ 0x38
 8006388:	af04      	add	r7, sp, #16
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006394:	f3ef 8305 	mrs	r3, IPSR
 8006398:	617b      	str	r3, [r7, #20]
  return(result);
 800639a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800639c:	2b00      	cmp	r3, #0
 800639e:	d17e      	bne.n	800649e <osThreadNew+0x11a>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d07b      	beq.n	800649e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063a6:	2380      	movs	r3, #128	@ 0x80
 80063a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80063aa:	2318      	movs	r3, #24
 80063ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d045      	beq.n	800644a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <osThreadNew+0x48>
        name = attr->name;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <osThreadNew+0x6e>
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b38      	cmp	r3, #56	@ 0x38
 80063e4:	d805      	bhi.n	80063f2 <osThreadNew+0x6e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <osThreadNew+0x72>
        return (NULL);
 80063f2:	2300      	movs	r3, #0
 80063f4:	e054      	b.n	80064a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00e      	beq.n	800642c <osThreadNew+0xa8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2b5b      	cmp	r3, #91	@ 0x5b
 8006414:	d90a      	bls.n	800642c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800641a:	2b00      	cmp	r3, #0
 800641c:	d006      	beq.n	800642c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <osThreadNew+0xa8>
        mem = 1;
 8006426:	2301      	movs	r3, #1
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	e010      	b.n	800644e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10c      	bne.n	800644e <osThreadNew+0xca>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <osThreadNew+0xca>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <osThreadNew+0xca>
          mem = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e001      	b.n	800644e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d110      	bne.n	8006476 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800645c:	9202      	str	r2, [sp, #8]
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6a3a      	ldr	r2, [r7, #32]
 8006468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 ffb0 	bl	80073d0 <xTaskCreateStatic>
 8006470:	4603      	mov	r3, r0
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	e013      	b.n	800649e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d110      	bne.n	800649e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	b29a      	uxth	r2, r3
 8006480:	f107 0310 	add.w	r3, r7, #16
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fffe 	bl	8007490 <xTaskCreate>
 8006494:	4603      	mov	r3, r0
 8006496:	2b01      	cmp	r3, #1
 8006498:	d001      	beq.n	800649e <osThreadNew+0x11a>
            hTask = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800649e:	693b      	ldr	r3, [r7, #16]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3728      	adds	r7, #40	@ 0x28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064b0:	f3ef 8305 	mrs	r3, IPSR
 80064b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80064b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <osDelay+0x1c>
    stat = osErrorISR;
 80064bc:	f06f 0305 	mvn.w	r3, #5
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e007      	b.n	80064d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 f924 	bl	800771c <vTaskDelay>
    }
  }

  return (stat);
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4a07      	ldr	r2, [pc, #28]	@ (800650c <vApplicationGetIdleTaskMemory+0x2c>)
 80064f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4a06      	ldr	r2, [pc, #24]	@ (8006510 <vApplicationGetIdleTaskMemory+0x30>)
 80064f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2280      	movs	r2, #128	@ 0x80
 80064fc:	601a      	str	r2, [r3, #0]
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	200003b0 	.word	0x200003b0
 8006510:	2000040c 	.word	0x2000040c

08006514 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a07      	ldr	r2, [pc, #28]	@ (8006540 <vApplicationGetTimerTaskMemory+0x2c>)
 8006524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4a06      	ldr	r2, [pc, #24]	@ (8006544 <vApplicationGetTimerTaskMemory+0x30>)
 800652a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006532:	601a      	str	r2, [r3, #0]
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	2000060c 	.word	0x2000060c
 8006544:	20000668 	.word	0x20000668

08006548 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f103 0208 	add.w	r2, r3, #8
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006560:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f103 0208 	add.w	r2, r3, #8
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f103 0208 	add.w	r2, r3, #8
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	601a      	str	r2, [r3, #0]
}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006600:	d103      	bne.n	800660a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e00c      	b.n	8006624 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3308      	adds	r3, #8
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e002      	b.n	8006618 <vListInsert+0x2e>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	d2f6      	bcs.n	8006612 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	601a      	str	r2, [r3, #0]
}
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6892      	ldr	r2, [r2, #8]
 8006672:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6852      	ldr	r2, [r2, #4]
 800667c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d103      	bne.n	8006690 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	1e5a      	subs	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10b      	bne.n	80066dc <xQueueGenericReset+0x2c>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	60bb      	str	r3, [r7, #8]
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066dc:	f002 fb0c 	bl	8008cf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e8:	68f9      	ldr	r1, [r7, #12]
 80066ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80066ec:	fb01 f303 	mul.w	r3, r1, r3
 80066f0:	441a      	add	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670c:	3b01      	subs	r3, #1
 800670e:	68f9      	ldr	r1, [r7, #12]
 8006710:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	441a      	add	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	22ff      	movs	r2, #255	@ 0xff
 8006720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	22ff      	movs	r2, #255	@ 0xff
 8006728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d114      	bne.n	800675c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d01a      	beq.n	8006770 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3310      	adds	r3, #16
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fab0 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d012      	beq.n	8006770 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800674a:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <xQueueGenericReset+0xd0>)
 800674c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	e009      	b.n	8006770 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3310      	adds	r3, #16
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fef1 	bl	8006548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3324      	adds	r3, #36	@ 0x24
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff feec 	bl	8006548 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006770:	f002 faf4 	bl	8008d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006774:	2301      	movs	r3, #1
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08e      	sub	sp, #56	@ 0x38
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <xQueueGenericCreateStatic+0x56>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <xQueueGenericCreateStatic+0x5a>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <xQueueGenericCreateStatic+0x5c>
 80067de:	2300      	movs	r3, #0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	623b      	str	r3, [r7, #32]
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	e7fd      	b.n	80067f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <xQueueGenericCreateStatic+0x84>
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <xQueueGenericCreateStatic+0x88>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <xQueueGenericCreateStatic+0x8a>
 800680c:	2300      	movs	r3, #0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	61fb      	str	r3, [r7, #28]
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	e7fd      	b.n	8006826 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800682a:	2350      	movs	r3, #80	@ 0x50
 800682c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b50      	cmp	r3, #80	@ 0x50
 8006832:	d00b      	beq.n	800684c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	61bb      	str	r3, [r7, #24]
}
 8006846:	bf00      	nop
 8006848:	bf00      	nop
 800684a:	e7fd      	b.n	8006848 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800684c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00d      	beq.n	8006874 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006860:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	4613      	mov	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 f840 	bl	80068f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006876:	4618      	mov	r0, r3
 8006878:	3730      	adds	r7, #48	@ 0x30
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800687e:	b580      	push	{r7, lr}
 8006880:	b08a      	sub	sp, #40	@ 0x28
 8006882:	af02      	add	r7, sp, #8
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	4613      	mov	r3, r2
 800688a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <xQueueGenericCreate+0x2c>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	613b      	str	r3, [r7, #16]
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	e7fd      	b.n	80068a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	3350      	adds	r3, #80	@ 0x50
 80068b8:	4618      	mov	r0, r3
 80068ba:	f002 fb3f 	bl	8008f3c <pvPortMalloc>
 80068be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d011      	beq.n	80068ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	3350      	adds	r3, #80	@ 0x50
 80068ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068d8:	79fa      	ldrb	r2, [r7, #7]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	4613      	mov	r3, r2
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f805 	bl	80068f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068ea:	69bb      	ldr	r3, [r7, #24]
	}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d103      	bne.n	8006910 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e002      	b.n	8006916 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006922:	2101      	movs	r1, #1
 8006924:	69b8      	ldr	r0, [r7, #24]
 8006926:	f7ff fec3 	bl	80066b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	78fa      	ldrb	r2, [r7, #3]
 800692e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00e      	beq.n	8006966 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800695a:	2300      	movs	r3, #0
 800695c:	2200      	movs	r2, #0
 800695e:	2100      	movs	r1, #0
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f81d 	bl	80069a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	4603      	mov	r3, r0
 8006976:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006978:	2301      	movs	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	461a      	mov	r2, r3
 8006984:	6939      	ldr	r1, [r7, #16]
 8006986:	6978      	ldr	r0, [r7, #20]
 8006988:	f7ff ff79 	bl	800687e <xQueueGenericCreate>
 800698c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff ffd3 	bl	800693a <prvInitialiseMutex>

		return xNewQueue;
 8006994:	68fb      	ldr	r3, [r7, #12]
	}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	@ 0x38
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069ae:	2300      	movs	r3, #0
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <xQueueGenericSend+0x34>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d103      	bne.n	80069e2 <xQueueGenericSend+0x42>
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <xQueueGenericSend+0x46>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <xQueueGenericSend+0x48>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10b      	bne.n	8006a04 <xQueueGenericSend+0x64>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	e7fd      	b.n	8006a00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d103      	bne.n	8006a12 <xQueueGenericSend+0x72>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <xQueueGenericSend+0x76>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <xQueueGenericSend+0x78>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <xQueueGenericSend+0x94>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	623b      	str	r3, [r7, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a34:	f001 faf6 	bl	8008024 <xTaskGetSchedulerState>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d102      	bne.n	8006a44 <xQueueGenericSend+0xa4>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <xQueueGenericSend+0xa8>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <xQueueGenericSend+0xaa>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <xQueueGenericSend+0xc6>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	61fb      	str	r3, [r7, #28]
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	e7fd      	b.n	8006a62 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a66:	f002 f947 	bl	8008cf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <xQueueGenericSend+0xdc>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d129      	bne.n	8006ad0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a82:	f000 fb37 	bl	80070f4 <prvCopyDataToQueue>
 8006a86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d010      	beq.n	8006ab2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	3324      	adds	r3, #36	@ 0x24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f905 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d013      	beq.n	8006ac8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ba0 <xQueueGenericSend+0x200>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	e00a      	b.n	8006ac8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ab8:	4b39      	ldr	r3, [pc, #228]	@ (8006ba0 <xQueueGenericSend+0x200>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ac8:	f002 f948 	bl	8008d5c <vPortExitCritical>
				return pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e063      	b.n	8006b98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ad6:	f002 f941 	bl	8008d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	e05c      	b.n	8006b98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 f93f 	bl	8007d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006af2:	f002 f933 	bl	8008d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006af6:	f000 feaf 	bl	8007858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006afa:	f002 f8fd 	bl	8008cf8 <vPortEnterCritical>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b0a:	d103      	bne.n	8006b14 <xQueueGenericSend+0x174>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b1a:	b25b      	sxtb	r3, r3
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b20:	d103      	bne.n	8006b2a <xQueueGenericSend+0x18a>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b2a:	f002 f917 	bl	8008d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b2e:	1d3a      	adds	r2, r7, #4
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 f92e 	bl	8007d98 <xTaskCheckForTimeOut>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d124      	bne.n	8006b8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b44:	f000 fbce 	bl	80072e4 <prvIsQueueFull>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	3310      	adds	r3, #16
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 f852 	bl	8007c00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b5e:	f000 fb59 	bl	8007214 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b62:	f000 fe87 	bl	8007874 <xTaskResumeAll>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f47f af7c 	bne.w	8006a66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba0 <xQueueGenericSend+0x200>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	e772      	b.n	8006a66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b82:	f000 fb47 	bl	8007214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b86:	f000 fe75 	bl	8007874 <xTaskResumeAll>
 8006b8a:	e76c      	b.n	8006a66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b8e:	f000 fb41 	bl	8007214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b92:	f000 fe6f 	bl	8007874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3738      	adds	r7, #56	@ 0x38
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b090      	sub	sp, #64	@ 0x40
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10b      	bne.n	8006bd4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	e7fd      	b.n	8006bd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d103      	bne.n	8006be2 <xQueueGenericSendFromISR+0x3e>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <xQueueGenericSendFromISR+0x42>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueGenericSendFromISR+0x44>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bfe:	bf00      	nop
 8006c00:	bf00      	nop
 8006c02:	e7fd      	b.n	8006c00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d103      	bne.n	8006c12 <xQueueGenericSendFromISR+0x6e>
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <xQueueGenericSendFromISR+0x72>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <xQueueGenericSendFromISR+0x74>
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	623b      	str	r3, [r7, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	bf00      	nop
 8006c32:	e7fd      	b.n	8006c30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c34:	f002 f940 	bl	8008eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c38:	f3ef 8211 	mrs	r2, BASEPRI
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	61fa      	str	r2, [r7, #28]
 8006c4e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d302      	bcc.n	8006c66 <xQueueGenericSendFromISR+0xc2>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d12f      	bne.n	8006cc6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c7c:	f000 fa3a 	bl	80070f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c88:	d112      	bne.n	8006cb0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d016      	beq.n	8006cc0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c94:	3324      	adds	r3, #36	@ 0x24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 f804 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00e      	beq.n	8006cc0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e007      	b.n	8006cc0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	b25a      	sxtb	r2, r3
 8006cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006cc4:	e001      	b.n	8006cca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ccc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3740      	adds	r7, #64	@ 0x40
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08c      	sub	sp, #48	@ 0x30
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <xQueueReceive+0x32>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	623b      	str	r3, [r7, #32]
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	e7fd      	b.n	8006d0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d103      	bne.n	8006d20 <xQueueReceive+0x40>
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <xQueueReceive+0x44>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <xQueueReceive+0x46>
 8006d24:	2300      	movs	r3, #0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10b      	bne.n	8006d42 <xQueueReceive+0x62>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	61fb      	str	r3, [r7, #28]
}
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	e7fd      	b.n	8006d3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d42:	f001 f96f 	bl	8008024 <xTaskGetSchedulerState>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d102      	bne.n	8006d52 <xQueueReceive+0x72>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <xQueueReceive+0x76>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <xQueueReceive+0x78>
 8006d56:	2300      	movs	r3, #0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <xQueueReceive+0x94>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	61bb      	str	r3, [r7, #24]
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d74:	f001 ffc0 	bl	8008cf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01f      	beq.n	8006dc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d88:	f000 fa1e 	bl	80071c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	1e5a      	subs	r2, r3, #1
 8006d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00f      	beq.n	8006dbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9e:	3310      	adds	r3, #16
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 ff7f 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dac:	4b3c      	ldr	r3, [pc, #240]	@ (8006ea0 <xQueueReceive+0x1c0>)
 8006dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dbc:	f001 ffce 	bl	8008d5c <vPortExitCritical>
				return pdPASS;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e069      	b.n	8006e98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dca:	f001 ffc7 	bl	8008d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e062      	b.n	8006e98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d106      	bne.n	8006de6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dd8:	f107 0310 	add.w	r3, r7, #16
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 ffc5 	bl	8007d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006de6:	f001 ffb9 	bl	8008d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dea:	f000 fd35 	bl	8007858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dee:	f001 ff83 	bl	8008cf8 <vPortEnterCritical>
 8006df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006df8:	b25b      	sxtb	r3, r3
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dfe:	d103      	bne.n	8006e08 <xQueueReceive+0x128>
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e0e:	b25b      	sxtb	r3, r3
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e14:	d103      	bne.n	8006e1e <xQueueReceive+0x13e>
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e1e:	f001 ff9d 	bl	8008d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e22:	1d3a      	adds	r2, r7, #4
 8006e24:	f107 0310 	add.w	r3, r7, #16
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 ffb4 	bl	8007d98 <xTaskCheckForTimeOut>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d123      	bne.n	8006e7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e38:	f000 fa3e 	bl	80072b8 <prvIsQueueEmpty>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d017      	beq.n	8006e72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	3324      	adds	r3, #36	@ 0x24
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fed8 	bl	8007c00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e52:	f000 f9df 	bl	8007214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e56:	f000 fd0d 	bl	8007874 <xTaskResumeAll>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d189      	bne.n	8006d74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006e60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <xQueueReceive+0x1c0>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	e780      	b.n	8006d74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e74:	f000 f9ce 	bl	8007214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e78:	f000 fcfc 	bl	8007874 <xTaskResumeAll>
 8006e7c:	e77a      	b.n	8006d74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e80:	f000 f9c8 	bl	8007214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e84:	f000 fcf6 	bl	8007874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e8a:	f000 fa15 	bl	80072b8 <prvIsQueueEmpty>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f43f af6f 	beq.w	8006d74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3730      	adds	r7, #48	@ 0x30
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08e      	sub	sp, #56	@ 0x38
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	623b      	str	r3, [r7, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	61fb      	str	r3, [r7, #28]
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ef8:	f001 f894 	bl	8008024 <xTaskGetSchedulerState>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <xQueueSemaphoreTake+0x64>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <xQueueSemaphoreTake+0x68>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e000      	b.n	8006f0e <xQueueSemaphoreTake+0x6a>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	61bb      	str	r3, [r7, #24]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f2a:	f001 fee5 	bl	8008cf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d024      	beq.n	8006f84 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	1e5a      	subs	r2, r3, #1
 8006f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f40:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f4a:	f001 f9e5 	bl	8008318 <pvTaskIncrementMutexHeldCount>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00f      	beq.n	8006f7c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5e:	3310      	adds	r3, #16
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fe9f 	bl	8007ca4 <xTaskRemoveFromEventList>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f6c:	4b54      	ldr	r3, [pc, #336]	@ (80070c0 <xQueueSemaphoreTake+0x21c>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f7c:	f001 feee 	bl	8008d5c <vPortExitCritical>
				return pdPASS;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e098      	b.n	80070b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d112      	bne.n	8006fb0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	617b      	str	r3, [r7, #20]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fa8:	f001 fed8 	bl	8008d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e082      	b.n	80070b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb6:	f107 030c 	add.w	r3, r7, #12
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fed6 	bl	8007d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc4:	f001 feca 	bl	8008d5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fc8:	f000 fc46 	bl	8007858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fcc:	f001 fe94 	bl	8008cf8 <vPortEnterCritical>
 8006fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fd6:	b25b      	sxtb	r3, r3
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fdc:	d103      	bne.n	8006fe6 <xQueueSemaphoreTake+0x142>
 8006fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ff2:	d103      	bne.n	8006ffc <xQueueSemaphoreTake+0x158>
 8006ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ffc:	f001 feae 	bl	8008d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007000:	463a      	mov	r2, r7
 8007002:	f107 030c 	add.w	r3, r7, #12
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fec5 	bl	8007d98 <xTaskCheckForTimeOut>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d132      	bne.n	800707a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007014:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007016:	f000 f94f 	bl	80072b8 <prvIsQueueEmpty>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d026      	beq.n	800706e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007028:	f001 fe66 	bl	8008cf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4618      	mov	r0, r3
 8007032:	f001 f815 	bl	8008060 <xTaskPriorityInherit>
 8007036:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007038:	f001 fe90 	bl	8008d5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703e:	3324      	adds	r3, #36	@ 0x24
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fddb 	bl	8007c00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800704a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800704c:	f000 f8e2 	bl	8007214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007050:	f000 fc10 	bl	8007874 <xTaskResumeAll>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	f47f af67 	bne.w	8006f2a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800705c:	4b18      	ldr	r3, [pc, #96]	@ (80070c0 <xQueueSemaphoreTake+0x21c>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	e75d      	b.n	8006f2a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800706e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007070:	f000 f8d0 	bl	8007214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007074:	f000 fbfe 	bl	8007874 <xTaskResumeAll>
 8007078:	e757      	b.n	8006f2a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800707a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800707c:	f000 f8ca 	bl	8007214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007080:	f000 fbf8 	bl	8007874 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007084:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007086:	f000 f917 	bl	80072b8 <prvIsQueueEmpty>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	f43f af4c 	beq.w	8006f2a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00d      	beq.n	80070b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007098:	f001 fe2e 	bl	8008cf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800709c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800709e:	f000 f811 	bl	80070c4 <prvGetDisinheritPriorityAfterTimeout>
 80070a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 f8b0 	bl	8008210 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070b0:	f001 fe54 	bl	8008d5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3738      	adds	r7, #56	@ 0x38
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	e000ed04 	.word	0xe000ed04

080070c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d006      	beq.n	80070e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e001      	b.n	80070e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070e6:	68fb      	ldr	r3, [r7, #12]
	}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007108:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10d      	bne.n	800712e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d14d      	bne.n	80071b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f806 	bl	8008130 <xTaskPriorityDisinherit>
 8007124:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	609a      	str	r2, [r3, #8]
 800712c:	e043      	b.n	80071b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d119      	bne.n	8007168 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6858      	ldr	r0, [r3, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	461a      	mov	r2, r3
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	f003 fcd0 	bl	800aae4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	441a      	add	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	429a      	cmp	r2, r3
 800715c:	d32b      	bcc.n	80071b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	e026      	b.n	80071b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68d8      	ldr	r0, [r3, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007170:	461a      	mov	r2, r3
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	f003 fcb6 	bl	800aae4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	425b      	negs	r3, r3
 8007182:	441a      	add	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d207      	bcs.n	80071a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	425b      	negs	r3, r3
 800719e:	441a      	add	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d105      	bne.n	80071b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80071be:	697b      	ldr	r3, [r7, #20]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d018      	beq.n	800720c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	441a      	add	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d303      	bcc.n	80071fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68d9      	ldr	r1, [r3, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007204:	461a      	mov	r2, r3
 8007206:	6838      	ldr	r0, [r7, #0]
 8007208:	f003 fc6c 	bl	800aae4 <memcpy>
	}
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800721c:	f001 fd6c 	bl	8008cf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007226:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007228:	e011      	b.n	800724e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d012      	beq.n	8007258 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3324      	adds	r3, #36	@ 0x24
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fd34 	bl	8007ca4 <xTaskRemoveFromEventList>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007242:	f000 fe0d 	bl	8007e60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	3b01      	subs	r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800724e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007252:	2b00      	cmp	r3, #0
 8007254:	dce9      	bgt.n	800722a <prvUnlockQueue+0x16>
 8007256:	e000      	b.n	800725a <prvUnlockQueue+0x46>
					break;
 8007258:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	22ff      	movs	r2, #255	@ 0xff
 800725e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007262:	f001 fd7b 	bl	8008d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007266:	f001 fd47 	bl	8008cf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007270:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007272:	e011      	b.n	8007298 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d012      	beq.n	80072a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3310      	adds	r3, #16
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fd0f 	bl	8007ca4 <xTaskRemoveFromEventList>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800728c:	f000 fde8 	bl	8007e60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	3b01      	subs	r3, #1
 8007294:	b2db      	uxtb	r3, r3
 8007296:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	dce9      	bgt.n	8007274 <prvUnlockQueue+0x60>
 80072a0:	e000      	b.n	80072a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	22ff      	movs	r2, #255	@ 0xff
 80072a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80072ac:	f001 fd56 	bl	8008d5c <vPortExitCritical>
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072c0:	f001 fd1a 	bl	8008cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e001      	b.n	80072d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072d6:	f001 fd41 	bl	8008d5c <vPortExitCritical>

	return xReturn;
 80072da:	68fb      	ldr	r3, [r7, #12]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072ec:	f001 fd04 	bl	8008cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d102      	bne.n	8007302 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	e001      	b.n	8007306 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007306:	f001 fd29 	bl	8008d5c <vPortExitCritical>

	return xReturn;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	e014      	b.n	800734e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007324:	4a0f      	ldr	r2, [pc, #60]	@ (8007364 <vQueueAddToRegistry+0x50>)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10b      	bne.n	8007348 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007330:	490c      	ldr	r1, [pc, #48]	@ (8007364 <vQueueAddToRegistry+0x50>)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800733a:	4a0a      	ldr	r2, [pc, #40]	@ (8007364 <vQueueAddToRegistry+0x50>)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4413      	add	r3, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007346:	e006      	b.n	8007356 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b07      	cmp	r3, #7
 8007352:	d9e7      	bls.n	8007324 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000a68 	.word	0x20000a68

08007368 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007378:	f001 fcbe 	bl	8008cf8 <vPortEnterCritical>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007382:	b25b      	sxtb	r3, r3
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007388:	d103      	bne.n	8007392 <vQueueWaitForMessageRestricted+0x2a>
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007398:	b25b      	sxtb	r3, r3
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800739e:	d103      	bne.n	80073a8 <vQueueWaitForMessageRestricted+0x40>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073a8:	f001 fcd8 	bl	8008d5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d106      	bne.n	80073c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	3324      	adds	r3, #36	@ 0x24
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fc45 	bl	8007c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073c2:	6978      	ldr	r0, [r7, #20]
 80073c4:	f7ff ff26 	bl	8007214 <prvUnlockQueue>
	}
 80073c8:	bf00      	nop
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08e      	sub	sp, #56	@ 0x38
 80073d4:	af04      	add	r7, sp, #16
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10b      	bne.n	80073fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	623b      	str	r3, [r7, #32]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10b      	bne.n	800741a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	61fb      	str	r3, [r7, #28]
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	e7fd      	b.n	8007416 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800741a:	235c      	movs	r3, #92	@ 0x5c
 800741c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b5c      	cmp	r3, #92	@ 0x5c
 8007422:	d00b      	beq.n	800743c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	61bb      	str	r3, [r7, #24]
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800743c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800743e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01e      	beq.n	8007482 <xTaskCreateStatic+0xb2>
 8007444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01b      	beq.n	8007482 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800744a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007452:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800745c:	2300      	movs	r3, #0
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	9302      	str	r3, [sp, #8]
 8007464:	f107 0314 	add.w	r3, r7, #20
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f850 	bl	800751a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800747a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800747c:	f000 f8de 	bl	800763c <prvAddNewTaskToReadyList>
 8007480:	e001      	b.n	8007486 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007486:	697b      	ldr	r3, [r7, #20]
	}
 8007488:	4618      	mov	r0, r3
 800748a:	3728      	adds	r7, #40	@ 0x28
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08c      	sub	sp, #48	@ 0x30
 8007494:	af04      	add	r7, sp, #16
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 fd49 	bl	8008f3c <pvPortMalloc>
 80074aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00e      	beq.n	80074d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074b2:	205c      	movs	r0, #92	@ 0x5c
 80074b4:	f001 fd42 	bl	8008f3c <pvPortMalloc>
 80074b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80074c6:	e005      	b.n	80074d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074c8:	6978      	ldr	r0, [r7, #20]
 80074ca:	f001 fe05 	bl	80090d8 <vPortFree>
 80074ce:	e001      	b.n	80074d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d017      	beq.n	800750a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	2300      	movs	r3, #0
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	9302      	str	r3, [sp, #8]
 80074ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f80e 	bl	800751a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074fe:	69f8      	ldr	r0, [r7, #28]
 8007500:	f000 f89c 	bl	800763c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007504:	2301      	movs	r3, #1
 8007506:	61bb      	str	r3, [r7, #24]
 8007508:	e002      	b.n	8007510 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800750a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800750e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007510:	69bb      	ldr	r3, [r7, #24]
	}
 8007512:	4618      	mov	r0, r3
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b088      	sub	sp, #32
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	461a      	mov	r2, r3
 8007532:	21a5      	movs	r1, #165	@ 0xa5
 8007534:	f003 fa8a 	bl	800aa4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007542:	3b01      	subs	r3, #1
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f023 0307 	bic.w	r3, r3, #7
 8007550:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	f003 0307 	and.w	r3, r3, #7
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	617b      	str	r3, [r7, #20]
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	e7fd      	b.n	8007570 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01f      	beq.n	80075ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	e012      	b.n	80075a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	7819      	ldrb	r1, [r3, #0]
 8007588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	3334      	adds	r3, #52	@ 0x34
 8007590:	460a      	mov	r2, r1
 8007592:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	4413      	add	r3, r2
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	3301      	adds	r3, #1
 80075a4:	61fb      	str	r3, [r7, #28]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	2b0f      	cmp	r3, #15
 80075aa:	d9e9      	bls.n	8007580 <prvInitialiseNewTask+0x66>
 80075ac:	e000      	b.n	80075b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80075ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075b8:	e003      	b.n	80075c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c4:	2b37      	cmp	r3, #55	@ 0x37
 80075c6:	d901      	bls.n	80075cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075c8:	2337      	movs	r3, #55	@ 0x37
 80075ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	2200      	movs	r2, #0
 80075dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	3304      	adds	r3, #4
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe ffd0 	bl	8006588 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	3318      	adds	r3, #24
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe ffcb 	bl	8006588 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007606:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	68f9      	ldr	r1, [r7, #12]
 800761a:	69b8      	ldr	r0, [r7, #24]
 800761c:	f001 fa3e 	bl	8008a9c <pxPortInitialiseStack>
 8007620:	4602      	mov	r2, r0
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007632:	bf00      	nop
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007644:	f001 fb58 	bl	8008cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007648:	4b2d      	ldr	r3, [pc, #180]	@ (8007700 <prvAddNewTaskToReadyList+0xc4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	4a2c      	ldr	r2, [pc, #176]	@ (8007700 <prvAddNewTaskToReadyList+0xc4>)
 8007650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007652:	4b2c      	ldr	r3, [pc, #176]	@ (8007704 <prvAddNewTaskToReadyList+0xc8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800765a:	4a2a      	ldr	r2, [pc, #168]	@ (8007704 <prvAddNewTaskToReadyList+0xc8>)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007660:	4b27      	ldr	r3, [pc, #156]	@ (8007700 <prvAddNewTaskToReadyList+0xc4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d110      	bne.n	800768a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007668:	f000 fc1e 	bl	8007ea8 <prvInitialiseTaskLists>
 800766c:	e00d      	b.n	800768a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800766e:	4b26      	ldr	r3, [pc, #152]	@ (8007708 <prvAddNewTaskToReadyList+0xcc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007676:	4b23      	ldr	r3, [pc, #140]	@ (8007704 <prvAddNewTaskToReadyList+0xc8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	429a      	cmp	r2, r3
 8007682:	d802      	bhi.n	800768a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007684:	4a1f      	ldr	r2, [pc, #124]	@ (8007704 <prvAddNewTaskToReadyList+0xc8>)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800768a:	4b20      	ldr	r3, [pc, #128]	@ (800770c <prvAddNewTaskToReadyList+0xd0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3301      	adds	r3, #1
 8007690:	4a1e      	ldr	r2, [pc, #120]	@ (800770c <prvAddNewTaskToReadyList+0xd0>)
 8007692:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007694:	4b1d      	ldr	r3, [pc, #116]	@ (800770c <prvAddNewTaskToReadyList+0xd0>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007710 <prvAddNewTaskToReadyList+0xd4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d903      	bls.n	80076b0 <prvAddNewTaskToReadyList+0x74>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a18      	ldr	r2, [pc, #96]	@ (8007710 <prvAddNewTaskToReadyList+0xd4>)
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4a15      	ldr	r2, [pc, #84]	@ (8007714 <prvAddNewTaskToReadyList+0xd8>)
 80076be:	441a      	add	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f7fe ff6b 	bl	80065a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076cc:	f001 fb46 	bl	8008d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007708 <prvAddNewTaskToReadyList+0xcc>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007704 <prvAddNewTaskToReadyList+0xc8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d207      	bcs.n	80076f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <prvAddNewTaskToReadyList+0xdc>)
 80076e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076f6:	bf00      	nop
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000f7c 	.word	0x20000f7c
 8007704:	20000aa8 	.word	0x20000aa8
 8007708:	20000f88 	.word	0x20000f88
 800770c:	20000f98 	.word	0x20000f98
 8007710:	20000f84 	.word	0x20000f84
 8007714:	20000aac 	.word	0x20000aac
 8007718:	e000ed04 	.word	0xe000ed04

0800771c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d018      	beq.n	8007760 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800772e:	4b14      	ldr	r3, [pc, #80]	@ (8007780 <vTaskDelay+0x64>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <vTaskDelay+0x32>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60bb      	str	r3, [r7, #8]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800774e:	f000 f883 	bl	8007858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007752:	2100      	movs	r1, #0
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fdf3 	bl	8008340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800775a:	f000 f88b 	bl	8007874 <xTaskResumeAll>
 800775e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d107      	bne.n	8007776 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007766:	4b07      	ldr	r3, [pc, #28]	@ (8007784 <vTaskDelay+0x68>)
 8007768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000fa4 	.word	0x20000fa4
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	@ 0x28
 800778c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007792:	2300      	movs	r3, #0
 8007794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007796:	463a      	mov	r2, r7
 8007798:	1d39      	adds	r1, r7, #4
 800779a:	f107 0308 	add.w	r3, r7, #8
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fe9e 	bl	80064e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	9202      	str	r2, [sp, #8]
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	2300      	movs	r3, #0
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	2300      	movs	r3, #0
 80077b4:	460a      	mov	r2, r1
 80077b6:	4922      	ldr	r1, [pc, #136]	@ (8007840 <vTaskStartScheduler+0xb8>)
 80077b8:	4822      	ldr	r0, [pc, #136]	@ (8007844 <vTaskStartScheduler+0xbc>)
 80077ba:	f7ff fe09 	bl	80073d0 <xTaskCreateStatic>
 80077be:	4603      	mov	r3, r0
 80077c0:	4a21      	ldr	r2, [pc, #132]	@ (8007848 <vTaskStartScheduler+0xc0>)
 80077c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077c4:	4b20      	ldr	r3, [pc, #128]	@ (8007848 <vTaskStartScheduler+0xc0>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e001      	b.n	80077d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d102      	bne.n	80077e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077dc:	f000 fe04 	bl	80083e8 <xTimerCreateTimerTask>
 80077e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d116      	bne.n	8007816 <vTaskStartScheduler+0x8e>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	613b      	str	r3, [r7, #16]
}
 80077fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077fc:	4b13      	ldr	r3, [pc, #76]	@ (800784c <vTaskStartScheduler+0xc4>)
 80077fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007802:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007804:	4b12      	ldr	r3, [pc, #72]	@ (8007850 <vTaskStartScheduler+0xc8>)
 8007806:	2201      	movs	r2, #1
 8007808:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800780a:	4b12      	ldr	r3, [pc, #72]	@ (8007854 <vTaskStartScheduler+0xcc>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007810:	f001 f9ce 	bl	8008bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007814:	e00f      	b.n	8007836 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800781c:	d10b      	bne.n	8007836 <vTaskStartScheduler+0xae>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	60fb      	str	r3, [r7, #12]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <vTaskStartScheduler+0xaa>
}
 8007836:	bf00      	nop
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	0800d298 	.word	0x0800d298
 8007844:	08007e79 	.word	0x08007e79
 8007848:	20000fa0 	.word	0x20000fa0
 800784c:	20000f9c 	.word	0x20000f9c
 8007850:	20000f88 	.word	0x20000f88
 8007854:	20000f80 	.word	0x20000f80

08007858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800785c:	4b04      	ldr	r3, [pc, #16]	@ (8007870 <vTaskSuspendAll+0x18>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3301      	adds	r3, #1
 8007862:	4a03      	ldr	r2, [pc, #12]	@ (8007870 <vTaskSuspendAll+0x18>)
 8007864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007866:	bf00      	nop
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	20000fa4 	.word	0x20000fa4

08007874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007882:	4b42      	ldr	r3, [pc, #264]	@ (800798c <xTaskResumeAll+0x118>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10b      	bne.n	80078a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	603b      	str	r3, [r7, #0]
}
 800789c:	bf00      	nop
 800789e:	bf00      	nop
 80078a0:	e7fd      	b.n	800789e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078a2:	f001 fa29 	bl	8008cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078a6:	4b39      	ldr	r3, [pc, #228]	@ (800798c <xTaskResumeAll+0x118>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	4a37      	ldr	r2, [pc, #220]	@ (800798c <xTaskResumeAll+0x118>)
 80078ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b0:	4b36      	ldr	r3, [pc, #216]	@ (800798c <xTaskResumeAll+0x118>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d162      	bne.n	800797e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078b8:	4b35      	ldr	r3, [pc, #212]	@ (8007990 <xTaskResumeAll+0x11c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d05e      	beq.n	800797e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078c0:	e02f      	b.n	8007922 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c2:	4b34      	ldr	r3, [pc, #208]	@ (8007994 <xTaskResumeAll+0x120>)
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3318      	adds	r3, #24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fec4 	bl	800665c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe febf 	bl	800665c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007998 <xTaskResumeAll+0x124>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d903      	bls.n	80078f2 <xTaskResumeAll+0x7e>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007998 <xTaskResumeAll+0x124>)
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4a27      	ldr	r2, [pc, #156]	@ (800799c <xTaskResumeAll+0x128>)
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3304      	adds	r3, #4
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7fe fe4a 	bl	80065a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007912:	4b23      	ldr	r3, [pc, #140]	@ (80079a0 <xTaskResumeAll+0x12c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007918:	429a      	cmp	r2, r3
 800791a:	d302      	bcc.n	8007922 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800791c:	4b21      	ldr	r3, [pc, #132]	@ (80079a4 <xTaskResumeAll+0x130>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007922:	4b1c      	ldr	r3, [pc, #112]	@ (8007994 <xTaskResumeAll+0x120>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1cb      	bne.n	80078c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007930:	f000 fb58 	bl	8007fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007934:	4b1c      	ldr	r3, [pc, #112]	@ (80079a8 <xTaskResumeAll+0x134>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d010      	beq.n	8007962 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007940:	f000 f846 	bl	80079d0 <xTaskIncrementTick>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800794a:	4b16      	ldr	r3, [pc, #88]	@ (80079a4 <xTaskResumeAll+0x130>)
 800794c:	2201      	movs	r2, #1
 800794e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3b01      	subs	r3, #1
 8007954:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f1      	bne.n	8007940 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800795c:	4b12      	ldr	r3, [pc, #72]	@ (80079a8 <xTaskResumeAll+0x134>)
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007962:	4b10      	ldr	r3, [pc, #64]	@ (80079a4 <xTaskResumeAll+0x130>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d009      	beq.n	800797e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800796a:	2301      	movs	r3, #1
 800796c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800796e:	4b0f      	ldr	r3, [pc, #60]	@ (80079ac <xTaskResumeAll+0x138>)
 8007970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800797e:	f001 f9ed 	bl	8008d5c <vPortExitCritical>

	return xAlreadyYielded;
 8007982:	68bb      	ldr	r3, [r7, #8]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20000fa4 	.word	0x20000fa4
 8007990:	20000f7c 	.word	0x20000f7c
 8007994:	20000f3c 	.word	0x20000f3c
 8007998:	20000f84 	.word	0x20000f84
 800799c:	20000aac 	.word	0x20000aac
 80079a0:	20000aa8 	.word	0x20000aa8
 80079a4:	20000f90 	.word	0x20000f90
 80079a8:	20000f8c 	.word	0x20000f8c
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079b6:	4b05      	ldr	r3, [pc, #20]	@ (80079cc <xTaskGetTickCount+0x1c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079bc:	687b      	ldr	r3, [r7, #4]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20000f80 	.word	0x20000f80

080079d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079da:	4b4f      	ldr	r3, [pc, #316]	@ (8007b18 <xTaskIncrementTick+0x148>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 8090 	bne.w	8007b04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079e4:	4b4d      	ldr	r3, [pc, #308]	@ (8007b1c <xTaskIncrementTick+0x14c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079ec:	4a4b      	ldr	r2, [pc, #300]	@ (8007b1c <xTaskIncrementTick+0x14c>)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d121      	bne.n	8007a3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079f8:	4b49      	ldr	r3, [pc, #292]	@ (8007b20 <xTaskIncrementTick+0x150>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	603b      	str	r3, [r7, #0]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <xTaskIncrementTick+0x46>
 8007a1a:	4b41      	ldr	r3, [pc, #260]	@ (8007b20 <xTaskIncrementTick+0x150>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	4b40      	ldr	r3, [pc, #256]	@ (8007b24 <xTaskIncrementTick+0x154>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a3e      	ldr	r2, [pc, #248]	@ (8007b20 <xTaskIncrementTick+0x150>)
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	4a3e      	ldr	r2, [pc, #248]	@ (8007b24 <xTaskIncrementTick+0x154>)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b28 <xTaskIncrementTick+0x158>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3301      	adds	r3, #1
 8007a34:	4a3c      	ldr	r2, [pc, #240]	@ (8007b28 <xTaskIncrementTick+0x158>)
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	f000 fad4 	bl	8007fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b2c <xTaskIncrementTick+0x15c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d349      	bcc.n	8007ada <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a46:	4b36      	ldr	r3, [pc, #216]	@ (8007b20 <xTaskIncrementTick+0x150>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a50:	4b36      	ldr	r3, [pc, #216]	@ (8007b2c <xTaskIncrementTick+0x15c>)
 8007a52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a56:	601a      	str	r2, [r3, #0]
					break;
 8007a58:	e03f      	b.n	8007ada <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5a:	4b31      	ldr	r3, [pc, #196]	@ (8007b20 <xTaskIncrementTick+0x150>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d203      	bcs.n	8007a7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a72:	4a2e      	ldr	r2, [pc, #184]	@ (8007b2c <xTaskIncrementTick+0x15c>)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a78:	e02f      	b.n	8007ada <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fdec 	bl	800665c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	3318      	adds	r3, #24
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fde3 	bl	800665c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9a:	4b25      	ldr	r3, [pc, #148]	@ (8007b30 <xTaskIncrementTick+0x160>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d903      	bls.n	8007aaa <xTaskIncrementTick+0xda>
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa6:	4a22      	ldr	r2, [pc, #136]	@ (8007b30 <xTaskIncrementTick+0x160>)
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8007b34 <xTaskIncrementTick+0x164>)
 8007ab8:	441a      	add	r2, r3
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f7fe fd6e 	bl	80065a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aca:	4b1b      	ldr	r3, [pc, #108]	@ (8007b38 <xTaskIncrementTick+0x168>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d3b8      	bcc.n	8007a46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ad8:	e7b5      	b.n	8007a46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ada:	4b17      	ldr	r3, [pc, #92]	@ (8007b38 <xTaskIncrementTick+0x168>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae0:	4914      	ldr	r1, [pc, #80]	@ (8007b34 <xTaskIncrementTick+0x164>)
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d901      	bls.n	8007af6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007af2:	2301      	movs	r3, #1
 8007af4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007af6:	4b11      	ldr	r3, [pc, #68]	@ (8007b3c <xTaskIncrementTick+0x16c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d007      	beq.n	8007b0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007afe:	2301      	movs	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	e004      	b.n	8007b0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b04:	4b0e      	ldr	r3, [pc, #56]	@ (8007b40 <xTaskIncrementTick+0x170>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b40 <xTaskIncrementTick+0x170>)
 8007b0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b0e:	697b      	ldr	r3, [r7, #20]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	20000fa4 	.word	0x20000fa4
 8007b1c:	20000f80 	.word	0x20000f80
 8007b20:	20000f34 	.word	0x20000f34
 8007b24:	20000f38 	.word	0x20000f38
 8007b28:	20000f94 	.word	0x20000f94
 8007b2c:	20000f9c 	.word	0x20000f9c
 8007b30:	20000f84 	.word	0x20000f84
 8007b34:	20000aac 	.word	0x20000aac
 8007b38:	20000aa8 	.word	0x20000aa8
 8007b3c:	20000f90 	.word	0x20000f90
 8007b40:	20000f8c 	.word	0x20000f8c

08007b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b4a:	4b28      	ldr	r3, [pc, #160]	@ (8007bec <vTaskSwitchContext+0xa8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b52:	4b27      	ldr	r3, [pc, #156]	@ (8007bf0 <vTaskSwitchContext+0xac>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b58:	e042      	b.n	8007be0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007b5a:	4b25      	ldr	r3, [pc, #148]	@ (8007bf0 <vTaskSwitchContext+0xac>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b60:	4b24      	ldr	r3, [pc, #144]	@ (8007bf4 <vTaskSwitchContext+0xb0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e011      	b.n	8007b8c <vTaskSwitchContext+0x48>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10b      	bne.n	8007b86 <vTaskSwitchContext+0x42>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	607b      	str	r3, [r7, #4]
}
 8007b80:	bf00      	nop
 8007b82:	bf00      	nop
 8007b84:	e7fd      	b.n	8007b82 <vTaskSwitchContext+0x3e>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	491a      	ldr	r1, [pc, #104]	@ (8007bf8 <vTaskSwitchContext+0xb4>)
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0e3      	beq.n	8007b68 <vTaskSwitchContext+0x24>
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4a13      	ldr	r2, [pc, #76]	@ (8007bf8 <vTaskSwitchContext+0xb4>)
 8007bac:	4413      	add	r3, r2
 8007bae:	60bb      	str	r3, [r7, #8]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d104      	bne.n	8007bd0 <vTaskSwitchContext+0x8c>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	605a      	str	r2, [r3, #4]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	4a09      	ldr	r2, [pc, #36]	@ (8007bfc <vTaskSwitchContext+0xb8>)
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	4a06      	ldr	r2, [pc, #24]	@ (8007bf4 <vTaskSwitchContext+0xb0>)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6013      	str	r3, [r2, #0]
}
 8007be0:	bf00      	nop
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20000fa4 	.word	0x20000fa4
 8007bf0:	20000f90 	.word	0x20000f90
 8007bf4:	20000f84 	.word	0x20000f84
 8007bf8:	20000aac 	.word	0x20000aac
 8007bfc:	20000aa8 	.word	0x20000aa8

08007c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10b      	bne.n	8007c28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	60fb      	str	r3, [r7, #12]
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	e7fd      	b.n	8007c24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c28:	4b07      	ldr	r3, [pc, #28]	@ (8007c48 <vTaskPlaceOnEventList+0x48>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3318      	adds	r3, #24
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7fe fcda 	bl	80065ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c36:	2101      	movs	r1, #1
 8007c38:	6838      	ldr	r0, [r7, #0]
 8007c3a:	f000 fb81 	bl	8008340 <prvAddCurrentTaskToDelayedList>
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000aa8 	.word	0x20000aa8

08007c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10b      	bne.n	8007c76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	617b      	str	r3, [r7, #20]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c76:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3318      	adds	r3, #24
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7fe fc8f 	bl	80065a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	68b8      	ldr	r0, [r7, #8]
 8007c94:	f000 fb54 	bl	8008340 <prvAddCurrentTaskToDelayedList>
	}
 8007c98:	bf00      	nop
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000aa8 	.word	0x20000aa8

08007ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10b      	bne.n	8007cd2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	60fb      	str	r3, [r7, #12]
}
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
 8007cd0:	e7fd      	b.n	8007cce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	3318      	adds	r3, #24
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fcc0 	bl	800665c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8007d54 <xTaskRemoveFromEventList+0xb0>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d11d      	bne.n	8007d20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fe fcb7 	bl	800665c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf2:	4b19      	ldr	r3, [pc, #100]	@ (8007d58 <xTaskRemoveFromEventList+0xb4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d903      	bls.n	8007d02 <xTaskRemoveFromEventList+0x5e>
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfe:	4a16      	ldr	r2, [pc, #88]	@ (8007d58 <xTaskRemoveFromEventList+0xb4>)
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4a13      	ldr	r2, [pc, #76]	@ (8007d5c <xTaskRemoveFromEventList+0xb8>)
 8007d10:	441a      	add	r2, r3
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	3304      	adds	r3, #4
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f7fe fc42 	bl	80065a2 <vListInsertEnd>
 8007d1e:	e005      	b.n	8007d2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	3318      	adds	r3, #24
 8007d24:	4619      	mov	r1, r3
 8007d26:	480e      	ldr	r0, [pc, #56]	@ (8007d60 <xTaskRemoveFromEventList+0xbc>)
 8007d28:	f7fe fc3b 	bl	80065a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d30:	4b0c      	ldr	r3, [pc, #48]	@ (8007d64 <xTaskRemoveFromEventList+0xc0>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d905      	bls.n	8007d46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d68 <xTaskRemoveFromEventList+0xc4>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	e001      	b.n	8007d4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d4a:	697b      	ldr	r3, [r7, #20]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000fa4 	.word	0x20000fa4
 8007d58:	20000f84 	.word	0x20000f84
 8007d5c:	20000aac 	.word	0x20000aac
 8007d60:	20000f3c 	.word	0x20000f3c
 8007d64:	20000aa8 	.word	0x20000aa8
 8007d68:	20000f90 	.word	0x20000f90

08007d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d74:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <vTaskInternalSetTimeOutState+0x24>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d7c:	4b05      	ldr	r3, [pc, #20]	@ (8007d94 <vTaskInternalSetTimeOutState+0x28>)
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	605a      	str	r2, [r3, #4]
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	20000f94 	.word	0x20000f94
 8007d94:	20000f80 	.word	0x20000f80

08007d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10b      	bne.n	8007dc0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	613b      	str	r3, [r7, #16]
}
 8007dba:	bf00      	nop
 8007dbc:	bf00      	nop
 8007dbe:	e7fd      	b.n	8007dbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60fb      	str	r3, [r7, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
 8007ddc:	e7fd      	b.n	8007dda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007dde:	f000 ff8b 	bl	8008cf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007de2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e58 <xTaskCheckForTimeOut+0xc0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dfa:	d102      	bne.n	8007e02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	e023      	b.n	8007e4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b15      	ldr	r3, [pc, #84]	@ (8007e5c <xTaskCheckForTimeOut+0xc4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d007      	beq.n	8007e1e <xTaskCheckForTimeOut+0x86>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d302      	bcc.n	8007e1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	61fb      	str	r3, [r7, #28]
 8007e1c:	e015      	b.n	8007e4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d20b      	bcs.n	8007e40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff ff99 	bl	8007d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	61fb      	str	r3, [r7, #28]
 8007e3e:	e004      	b.n	8007e4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e46:	2301      	movs	r3, #1
 8007e48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e4a:	f000 ff87 	bl	8008d5c <vPortExitCritical>

	return xReturn;
 8007e4e:	69fb      	ldr	r3, [r7, #28]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3720      	adds	r7, #32
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000f80 	.word	0x20000f80
 8007e5c:	20000f94 	.word	0x20000f94

08007e60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e64:	4b03      	ldr	r3, [pc, #12]	@ (8007e74 <vTaskMissedYield+0x14>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	601a      	str	r2, [r3, #0]
}
 8007e6a:	bf00      	nop
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	20000f90 	.word	0x20000f90

08007e78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e80:	f000 f852 	bl	8007f28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e84:	4b06      	ldr	r3, [pc, #24]	@ (8007ea0 <prvIdleTask+0x28>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d9f9      	bls.n	8007e80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e8c:	4b05      	ldr	r3, [pc, #20]	@ (8007ea4 <prvIdleTask+0x2c>)
 8007e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e9c:	e7f0      	b.n	8007e80 <prvIdleTask+0x8>
 8007e9e:	bf00      	nop
 8007ea0:	20000aac 	.word	0x20000aac
 8007ea4:	e000ed04 	.word	0xe000ed04

08007ea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eae:	2300      	movs	r3, #0
 8007eb0:	607b      	str	r3, [r7, #4]
 8007eb2:	e00c      	b.n	8007ece <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4a12      	ldr	r2, [pc, #72]	@ (8007f08 <prvInitialiseTaskLists+0x60>)
 8007ec0:	4413      	add	r3, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fb40 	bl	8006548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	607b      	str	r3, [r7, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b37      	cmp	r3, #55	@ 0x37
 8007ed2:	d9ef      	bls.n	8007eb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ed4:	480d      	ldr	r0, [pc, #52]	@ (8007f0c <prvInitialiseTaskLists+0x64>)
 8007ed6:	f7fe fb37 	bl	8006548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eda:	480d      	ldr	r0, [pc, #52]	@ (8007f10 <prvInitialiseTaskLists+0x68>)
 8007edc:	f7fe fb34 	bl	8006548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ee0:	480c      	ldr	r0, [pc, #48]	@ (8007f14 <prvInitialiseTaskLists+0x6c>)
 8007ee2:	f7fe fb31 	bl	8006548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ee6:	480c      	ldr	r0, [pc, #48]	@ (8007f18 <prvInitialiseTaskLists+0x70>)
 8007ee8:	f7fe fb2e 	bl	8006548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007eec:	480b      	ldr	r0, [pc, #44]	@ (8007f1c <prvInitialiseTaskLists+0x74>)
 8007eee:	f7fe fb2b 	bl	8006548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <prvInitialiseTaskLists+0x78>)
 8007ef4:	4a05      	ldr	r2, [pc, #20]	@ (8007f0c <prvInitialiseTaskLists+0x64>)
 8007ef6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8007f24 <prvInitialiseTaskLists+0x7c>)
 8007efa:	4a05      	ldr	r2, [pc, #20]	@ (8007f10 <prvInitialiseTaskLists+0x68>)
 8007efc:	601a      	str	r2, [r3, #0]
}
 8007efe:	bf00      	nop
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000aac 	.word	0x20000aac
 8007f0c:	20000f0c 	.word	0x20000f0c
 8007f10:	20000f20 	.word	0x20000f20
 8007f14:	20000f3c 	.word	0x20000f3c
 8007f18:	20000f50 	.word	0x20000f50
 8007f1c:	20000f68 	.word	0x20000f68
 8007f20:	20000f34 	.word	0x20000f34
 8007f24:	20000f38 	.word	0x20000f38

08007f28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f2e:	e019      	b.n	8007f64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f30:	f000 fee2 	bl	8008cf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f34:	4b10      	ldr	r3, [pc, #64]	@ (8007f78 <prvCheckTasksWaitingTermination+0x50>)
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fe fb8b 	bl	800665c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f46:	4b0d      	ldr	r3, [pc, #52]	@ (8007f7c <prvCheckTasksWaitingTermination+0x54>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8007f7c <prvCheckTasksWaitingTermination+0x54>)
 8007f4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f50:	4b0b      	ldr	r3, [pc, #44]	@ (8007f80 <prvCheckTasksWaitingTermination+0x58>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	4a0a      	ldr	r2, [pc, #40]	@ (8007f80 <prvCheckTasksWaitingTermination+0x58>)
 8007f58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f5a:	f000 feff 	bl	8008d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f810 	bl	8007f84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f64:	4b06      	ldr	r3, [pc, #24]	@ (8007f80 <prvCheckTasksWaitingTermination+0x58>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e1      	bne.n	8007f30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000f50 	.word	0x20000f50
 8007f7c:	20000f7c 	.word	0x20000f7c
 8007f80:	20000f64 	.word	0x20000f64

08007f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d108      	bne.n	8007fa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 f89c 	bl	80090d8 <vPortFree>
				vPortFree( pxTCB );
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f899 	bl	80090d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fa6:	e019      	b.n	8007fdc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d103      	bne.n	8007fba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 f890 	bl	80090d8 <vPortFree>
	}
 8007fb8:	e010      	b.n	8007fdc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d00b      	beq.n	8007fdc <prvDeleteTCB+0x58>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <prvDeleteTCB+0x54>
	}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fea:	4b0c      	ldr	r3, [pc, #48]	@ (800801c <prvResetNextTaskUnblockTime+0x38>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8008020 <prvResetNextTaskUnblockTime+0x3c>)
 8007ff6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ffc:	e008      	b.n	8008010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ffe:	4b07      	ldr	r3, [pc, #28]	@ (800801c <prvResetNextTaskUnblockTime+0x38>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	4a04      	ldr	r2, [pc, #16]	@ (8008020 <prvResetNextTaskUnblockTime+0x3c>)
 800800e:	6013      	str	r3, [r2, #0]
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20000f34 	.word	0x20000f34
 8008020:	20000f9c 	.word	0x20000f9c

08008024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800802a:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <xTaskGetSchedulerState+0x34>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d102      	bne.n	8008038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008032:	2301      	movs	r3, #1
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	e008      	b.n	800804a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008038:	4b08      	ldr	r3, [pc, #32]	@ (800805c <xTaskGetSchedulerState+0x38>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008040:	2302      	movs	r3, #2
 8008042:	607b      	str	r3, [r7, #4]
 8008044:	e001      	b.n	800804a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008046:	2300      	movs	r3, #0
 8008048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800804a:	687b      	ldr	r3, [r7, #4]
	}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	20000f88 	.word	0x20000f88
 800805c:	20000fa4 	.word	0x20000fa4

08008060 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d051      	beq.n	800811a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800807a:	4b2a      	ldr	r3, [pc, #168]	@ (8008124 <xTaskPriorityInherit+0xc4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	429a      	cmp	r2, r3
 8008082:	d241      	bcs.n	8008108 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	db06      	blt.n	800809a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800808c:	4b25      	ldr	r3, [pc, #148]	@ (8008124 <xTaskPriorityInherit+0xc4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008092:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6959      	ldr	r1, [r3, #20]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008128 <xTaskPriorityInherit+0xc8>)
 80080ac:	4413      	add	r3, r2
 80080ae:	4299      	cmp	r1, r3
 80080b0:	d122      	bne.n	80080f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fad0 	bl	800665c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080bc:	4b19      	ldr	r3, [pc, #100]	@ (8008124 <xTaskPriorityInherit+0xc4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ca:	4b18      	ldr	r3, [pc, #96]	@ (800812c <xTaskPriorityInherit+0xcc>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d903      	bls.n	80080da <xTaskPriorityInherit+0x7a>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	4a15      	ldr	r2, [pc, #84]	@ (800812c <xTaskPriorityInherit+0xcc>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4a10      	ldr	r2, [pc, #64]	@ (8008128 <xTaskPriorityInherit+0xc8>)
 80080e8:	441a      	add	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fe fa56 	bl	80065a2 <vListInsertEnd>
 80080f6:	e004      	b.n	8008102 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <xTaskPriorityInherit+0xc4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008102:	2301      	movs	r3, #1
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	e008      	b.n	800811a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800810c:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <xTaskPriorityInherit+0xc4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	429a      	cmp	r2, r3
 8008114:	d201      	bcs.n	800811a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008116:	2301      	movs	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800811a:	68fb      	ldr	r3, [r7, #12]
	}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000aa8 	.word	0x20000aa8
 8008128:	20000aac 	.word	0x20000aac
 800812c:	20000f84 	.word	0x20000f84

08008130 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d058      	beq.n	80081f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008146:	4b2f      	ldr	r3, [pc, #188]	@ (8008204 <xTaskPriorityDisinherit+0xd4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	d00b      	beq.n	8008168 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	60fb      	str	r3, [r7, #12]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60bb      	str	r3, [r7, #8]
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800818c:	1e5a      	subs	r2, r3, #1
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800819a:	429a      	cmp	r2, r3
 800819c:	d02c      	beq.n	80081f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d128      	bne.n	80081f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fa56 	bl	800665c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008208 <xTaskPriorityDisinherit+0xd8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d903      	bls.n	80081d8 <xTaskPriorityDisinherit+0xa8>
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008208 <xTaskPriorityDisinherit+0xd8>)
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4a09      	ldr	r2, [pc, #36]	@ (800820c <xTaskPriorityDisinherit+0xdc>)
 80081e6:	441a      	add	r2, r3
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	f7fe f9d7 	bl	80065a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081f8:	697b      	ldr	r3, [r7, #20]
	}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20000aa8 	.word	0x20000aa8
 8008208:	20000f84 	.word	0x20000f84
 800820c:	20000aac 	.word	0x20000aac

08008210 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008210:	b580      	push	{r7, lr}
 8008212:	b088      	sub	sp, #32
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800821e:	2301      	movs	r3, #1
 8008220:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d06c      	beq.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10b      	bne.n	8008248 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60fb      	str	r3, [r7, #12]
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d902      	bls.n	8008258 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	e002      	b.n	800825e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	429a      	cmp	r2, r3
 8008266:	d04c      	beq.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	429a      	cmp	r2, r3
 8008270:	d147      	bne.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008272:	4b26      	ldr	r3, [pc, #152]	@ (800830c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	429a      	cmp	r2, r3
 800827a:	d10b      	bne.n	8008294 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	60bb      	str	r3, [r7, #8]
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	db04      	blt.n	80082b2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	6959      	ldr	r1, [r3, #20]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4a13      	ldr	r2, [pc, #76]	@ (8008310 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082c2:	4413      	add	r3, r2
 80082c4:	4299      	cmp	r1, r3
 80082c6:	d11c      	bne.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe f9c5 	bl	800665c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008314 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d903      	bls.n	80082e6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008314 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a07      	ldr	r2, [pc, #28]	@ (8008310 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082f4:	441a      	add	r2, r3
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7fe f950 	bl	80065a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008302:	bf00      	nop
 8008304:	3720      	adds	r7, #32
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000aa8 	.word	0x20000aa8
 8008310:	20000aac 	.word	0x20000aac
 8008314:	20000f84 	.word	0x20000f84

08008318 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008318:	b480      	push	{r7}
 800831a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800831c:	4b07      	ldr	r3, [pc, #28]	@ (800833c <pvTaskIncrementMutexHeldCount+0x24>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008324:	4b05      	ldr	r3, [pc, #20]	@ (800833c <pvTaskIncrementMutexHeldCount+0x24>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800832a:	3201      	adds	r2, #1
 800832c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800832e:	4b03      	ldr	r3, [pc, #12]	@ (800833c <pvTaskIncrementMutexHeldCount+0x24>)
 8008330:	681b      	ldr	r3, [r3, #0]
	}
 8008332:	4618      	mov	r0, r3
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20000aa8 	.word	0x20000aa8

08008340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800834a:	4b21      	ldr	r3, [pc, #132]	@ (80083d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008350:	4b20      	ldr	r3, [pc, #128]	@ (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3304      	adds	r3, #4
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe f980 	bl	800665c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008362:	d10a      	bne.n	800837a <prvAddCurrentTaskToDelayedList+0x3a>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d007      	beq.n	800837a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800836a:	4b1a      	ldr	r3, [pc, #104]	@ (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4819      	ldr	r0, [pc, #100]	@ (80083d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008374:	f7fe f915 	bl	80065a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008378:	e026      	b.n	80083c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4413      	add	r3, r2
 8008380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008382:	4b14      	ldr	r3, [pc, #80]	@ (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	429a      	cmp	r2, r3
 8008390:	d209      	bcs.n	80083a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008392:	4b12      	ldr	r3, [pc, #72]	@ (80083dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b0f      	ldr	r3, [pc, #60]	@ (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3304      	adds	r3, #4
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7fe f923 	bl	80065ea <vListInsert>
}
 80083a4:	e010      	b.n	80083c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a6:	4b0e      	ldr	r3, [pc, #56]	@ (80083e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4b0a      	ldr	r3, [pc, #40]	@ (80083d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fe f919 	bl	80065ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083b8:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d202      	bcs.n	80083c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083c2:	4a08      	ldr	r2, [pc, #32]	@ (80083e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	6013      	str	r3, [r2, #0]
}
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000f80 	.word	0x20000f80
 80083d4:	20000aa8 	.word	0x20000aa8
 80083d8:	20000f68 	.word	0x20000f68
 80083dc:	20000f38 	.word	0x20000f38
 80083e0:	20000f34 	.word	0x20000f34
 80083e4:	20000f9c 	.word	0x20000f9c

080083e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	@ 0x28
 80083ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80083f2:	f000 fb13 	bl	8008a1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80083f6:	4b1d      	ldr	r3, [pc, #116]	@ (800846c <xTimerCreateTimerTask+0x84>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d021      	beq.n	8008442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008406:	1d3a      	adds	r2, r7, #4
 8008408:	f107 0108 	add.w	r1, r7, #8
 800840c:	f107 030c 	add.w	r3, r7, #12
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe f87f 	bl	8006514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	9202      	str	r2, [sp, #8]
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	2302      	movs	r3, #2
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	460a      	mov	r2, r1
 8008428:	4911      	ldr	r1, [pc, #68]	@ (8008470 <xTimerCreateTimerTask+0x88>)
 800842a:	4812      	ldr	r0, [pc, #72]	@ (8008474 <xTimerCreateTimerTask+0x8c>)
 800842c:	f7fe ffd0 	bl	80073d0 <xTaskCreateStatic>
 8008430:	4603      	mov	r3, r0
 8008432:	4a11      	ldr	r2, [pc, #68]	@ (8008478 <xTimerCreateTimerTask+0x90>)
 8008434:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008436:	4b10      	ldr	r3, [pc, #64]	@ (8008478 <xTimerCreateTimerTask+0x90>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800843e:	2301      	movs	r3, #1
 8008440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10b      	bne.n	8008460 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	613b      	str	r3, [r7, #16]
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	e7fd      	b.n	800845c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008460:	697b      	ldr	r3, [r7, #20]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000fd8 	.word	0x20000fd8
 8008470:	0800d2a0 	.word	0x0800d2a0
 8008474:	080085b5 	.word	0x080085b5
 8008478:	20000fdc 	.word	0x20000fdc

0800847c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	@ 0x28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <xTimerGenericCommand+0x30>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	623b      	str	r3, [r7, #32]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084ac:	4b19      	ldr	r3, [pc, #100]	@ (8008514 <xTimerGenericCommand+0x98>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d02a      	beq.n	800850a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	dc18      	bgt.n	80084f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084c6:	f7ff fdad 	bl	8008024 <xTaskGetSchedulerState>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d109      	bne.n	80084e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084d0:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <xTimerGenericCommand+0x98>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	f107 0110 	add.w	r1, r7, #16
 80084d8:	2300      	movs	r3, #0
 80084da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084dc:	f7fe fa60 	bl	80069a0 <xQueueGenericSend>
 80084e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80084e2:	e012      	b.n	800850a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <xTimerGenericCommand+0x98>)
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	f107 0110 	add.w	r1, r7, #16
 80084ec:	2300      	movs	r3, #0
 80084ee:	2200      	movs	r2, #0
 80084f0:	f7fe fa56 	bl	80069a0 <xQueueGenericSend>
 80084f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80084f6:	e008      	b.n	800850a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084f8:	4b06      	ldr	r3, [pc, #24]	@ (8008514 <xTimerGenericCommand+0x98>)
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	f107 0110 	add.w	r1, r7, #16
 8008500:	2300      	movs	r3, #0
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	f7fe fb4e 	bl	8006ba4 <xQueueGenericSendFromISR>
 8008508:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800850c:	4618      	mov	r0, r3
 800850e:	3728      	adds	r7, #40	@ 0x28
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	20000fd8 	.word	0x20000fd8

08008518 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af02      	add	r7, sp, #8
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008522:	4b23      	ldr	r3, [pc, #140]	@ (80085b0 <prvProcessExpiredTimer+0x98>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	3304      	adds	r3, #4
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe f893 	bl	800665c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d023      	beq.n	800858c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	699a      	ldr	r2, [r3, #24]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	18d1      	adds	r1, r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	6978      	ldr	r0, [r7, #20]
 8008552:	f000 f8d5 	bl	8008700 <prvInsertTimerInActiveList>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d020      	beq.n	800859e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800855c:	2300      	movs	r3, #0
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	2300      	movs	r3, #0
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	2100      	movs	r1, #0
 8008566:	6978      	ldr	r0, [r7, #20]
 8008568:	f7ff ff88 	bl	800847c <xTimerGenericCommand>
 800856c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d114      	bne.n	800859e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	60fb      	str	r3, [r7, #12]
}
 8008586:	bf00      	nop
 8008588:	bf00      	nop
 800858a:	e7fd      	b.n	8008588 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008592:	f023 0301 	bic.w	r3, r3, #1
 8008596:	b2da      	uxtb	r2, r3
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	6978      	ldr	r0, [r7, #20]
 80085a4:	4798      	blx	r3
}
 80085a6:	bf00      	nop
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000fd0 	.word	0x20000fd0

080085b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085bc:	f107 0308 	add.w	r3, r7, #8
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 f859 	bl	8008678 <prvGetNextExpireTime>
 80085c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4619      	mov	r1, r3
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f805 	bl	80085dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085d2:	f000 f8d7 	bl	8008784 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085d6:	bf00      	nop
 80085d8:	e7f0      	b.n	80085bc <prvTimerTask+0x8>
	...

080085dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085e6:	f7ff f937 	bl	8007858 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085ea:	f107 0308 	add.w	r3, r7, #8
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 f866 	bl	80086c0 <prvSampleTimeNow>
 80085f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d130      	bne.n	800865e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <prvProcessTimerOrBlockTask+0x3c>
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	429a      	cmp	r2, r3
 8008608:	d806      	bhi.n	8008618 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800860a:	f7ff f933 	bl	8007874 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff ff81 	bl	8008518 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008616:	e024      	b.n	8008662 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d008      	beq.n	8008630 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800861e:	4b13      	ldr	r3, [pc, #76]	@ (800866c <prvProcessTimerOrBlockTask+0x90>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <prvProcessTimerOrBlockTask+0x50>
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <prvProcessTimerOrBlockTask+0x52>
 800862c:	2300      	movs	r3, #0
 800862e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008630:	4b0f      	ldr	r3, [pc, #60]	@ (8008670 <prvProcessTimerOrBlockTask+0x94>)
 8008632:	6818      	ldr	r0, [r3, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	4619      	mov	r1, r3
 800863e:	f7fe fe93 	bl	8007368 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008642:	f7ff f917 	bl	8007874 <xTaskResumeAll>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800864c:	4b09      	ldr	r3, [pc, #36]	@ (8008674 <prvProcessTimerOrBlockTask+0x98>)
 800864e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	f3bf 8f6f 	isb	sy
}
 800865c:	e001      	b.n	8008662 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800865e:	f7ff f909 	bl	8007874 <xTaskResumeAll>
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000fd4 	.word	0x20000fd4
 8008670:	20000fd8 	.word	0x20000fd8
 8008674:	e000ed04 	.word	0xe000ed04

08008678 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008680:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <prvGetNextExpireTime+0x44>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <prvGetNextExpireTime+0x16>
 800868a:	2201      	movs	r2, #1
 800868c:	e000      	b.n	8008690 <prvGetNextExpireTime+0x18>
 800868e:	2200      	movs	r2, #0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d105      	bne.n	80086a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800869c:	4b07      	ldr	r3, [pc, #28]	@ (80086bc <prvGetNextExpireTime+0x44>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	e001      	b.n	80086ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086ac:	68fb      	ldr	r3, [r7, #12]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	20000fd0 	.word	0x20000fd0

080086c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086c8:	f7ff f972 	bl	80079b0 <xTaskGetTickCount>
 80086cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086ce:	4b0b      	ldr	r3, [pc, #44]	@ (80086fc <prvSampleTimeNow+0x3c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d205      	bcs.n	80086e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086d8:	f000 f93a 	bl	8008950 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e002      	b.n	80086ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086ea:	4a04      	ldr	r2, [pc, #16]	@ (80086fc <prvSampleTimeNow+0x3c>)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086f0:	68fb      	ldr	r3, [r7, #12]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000fe0 	.word	0x20000fe0

08008700 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	429a      	cmp	r2, r3
 8008724:	d812      	bhi.n	800874c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	1ad2      	subs	r2, r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	429a      	cmp	r2, r3
 8008732:	d302      	bcc.n	800873a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008734:	2301      	movs	r3, #1
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	e01b      	b.n	8008772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800873a:	4b10      	ldr	r3, [pc, #64]	@ (800877c <prvInsertTimerInActiveList+0x7c>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3304      	adds	r3, #4
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f7fd ff50 	bl	80065ea <vListInsert>
 800874a:	e012      	b.n	8008772 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d206      	bcs.n	8008762 <prvInsertTimerInActiveList+0x62>
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d302      	bcc.n	8008762 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800875c:	2301      	movs	r3, #1
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	e007      	b.n	8008772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008762:	4b07      	ldr	r3, [pc, #28]	@ (8008780 <prvInsertTimerInActiveList+0x80>)
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3304      	adds	r3, #4
 800876a:	4619      	mov	r1, r3
 800876c:	4610      	mov	r0, r2
 800876e:	f7fd ff3c 	bl	80065ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008772:	697b      	ldr	r3, [r7, #20]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20000fd4 	.word	0x20000fd4
 8008780:	20000fd0 	.word	0x20000fd0

08008784 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08e      	sub	sp, #56	@ 0x38
 8008788:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800878a:	e0ce      	b.n	800892a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	da19      	bge.n	80087c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008792:	1d3b      	adds	r3, r7, #4
 8008794:	3304      	adds	r3, #4
 8008796:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	61fb      	str	r3, [r7, #28]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087bc:	6850      	ldr	r0, [r2, #4]
 80087be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087c0:	6892      	ldr	r2, [r2, #8]
 80087c2:	4611      	mov	r1, r2
 80087c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f2c0 80ae 	blt.w	800892a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d004      	beq.n	80087e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	3304      	adds	r3, #4
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fd ff3c 	bl	800665c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087e4:	463b      	mov	r3, r7
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff ff6a 	bl	80086c0 <prvSampleTimeNow>
 80087ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b09      	cmp	r3, #9
 80087f2:	f200 8097 	bhi.w	8008924 <prvProcessReceivedCommands+0x1a0>
 80087f6:	a201      	add	r2, pc, #4	@ (adr r2, 80087fc <prvProcessReceivedCommands+0x78>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008825 	.word	0x08008825
 8008800:	08008825 	.word	0x08008825
 8008804:	08008825 	.word	0x08008825
 8008808:	0800889b 	.word	0x0800889b
 800880c:	080088af 	.word	0x080088af
 8008810:	080088fb 	.word	0x080088fb
 8008814:	08008825 	.word	0x08008825
 8008818:	08008825 	.word	0x08008825
 800881c:	0800889b 	.word	0x0800889b
 8008820:	080088af 	.word	0x080088af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008826:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800882a:	f043 0301 	orr.w	r3, r3, #1
 800882e:	b2da      	uxtb	r2, r3
 8008830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	18d1      	adds	r1, r2, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008844:	f7ff ff5c 	bl	8008700 <prvInsertTimerInActiveList>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d06c      	beq.n	8008928 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800884e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008854:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008858:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d061      	beq.n	8008928 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	441a      	add	r2, r3
 800886c:	2300      	movs	r3, #0
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	2300      	movs	r3, #0
 8008872:	2100      	movs	r1, #0
 8008874:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008876:	f7ff fe01 	bl	800847c <xTimerGenericCommand>
 800887a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d152      	bne.n	8008928 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	61bb      	str	r3, [r7, #24]
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	e7fd      	b.n	8008896 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800889a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80088ac:	e03d      	b.n	800892a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088b4:	f043 0301 	orr.w	r3, r3, #1
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10b      	bne.n	80088e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	617b      	str	r3, [r7, #20]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	18d1      	adds	r1, r2, r3
 80088ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f4:	f7ff ff04 	bl	8008700 <prvInsertTimerInActiveList>
					break;
 80088f8:	e017      	b.n	800892a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800890a:	f000 fbe5 	bl	80090d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800890e:	e00c      	b.n	800892a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008912:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008922:	e002      	b.n	800892a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008924:	bf00      	nop
 8008926:	e000      	b.n	800892a <prvProcessReceivedCommands+0x1a6>
					break;
 8008928:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800892a:	4b08      	ldr	r3, [pc, #32]	@ (800894c <prvProcessReceivedCommands+0x1c8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	1d39      	adds	r1, r7, #4
 8008930:	2200      	movs	r2, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe f9d4 	bl	8006ce0 <xQueueReceive>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	f47f af26 	bne.w	800878c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	3730      	adds	r7, #48	@ 0x30
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20000fd8 	.word	0x20000fd8

08008950 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008956:	e049      	b.n	80089ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008958:	4b2e      	ldr	r3, [pc, #184]	@ (8008a14 <prvSwitchTimerLists+0xc4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008962:	4b2c      	ldr	r3, [pc, #176]	@ (8008a14 <prvSwitchTimerLists+0xc4>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3304      	adds	r3, #4
 8008970:	4618      	mov	r0, r3
 8008972:	f7fd fe73 	bl	800665c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d02f      	beq.n	80089ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	4413      	add	r3, r2
 8008994:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	429a      	cmp	r2, r3
 800899c:	d90e      	bls.n	80089bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008a14 <prvSwitchTimerLists+0xc4>)
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3304      	adds	r3, #4
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f7fd fe18 	bl	80065ea <vListInsert>
 80089ba:	e017      	b.n	80089ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089bc:	2300      	movs	r3, #0
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	2300      	movs	r3, #0
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	2100      	movs	r1, #0
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7ff fd58 	bl	800847c <xTimerGenericCommand>
 80089cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	603b      	str	r3, [r7, #0]
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	e7fd      	b.n	80089e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089ec:	4b09      	ldr	r3, [pc, #36]	@ (8008a14 <prvSwitchTimerLists+0xc4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1b0      	bne.n	8008958 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089f6:	4b07      	ldr	r3, [pc, #28]	@ (8008a14 <prvSwitchTimerLists+0xc4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089fc:	4b06      	ldr	r3, [pc, #24]	@ (8008a18 <prvSwitchTimerLists+0xc8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a04      	ldr	r2, [pc, #16]	@ (8008a14 <prvSwitchTimerLists+0xc4>)
 8008a02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a04:	4a04      	ldr	r2, [pc, #16]	@ (8008a18 <prvSwitchTimerLists+0xc8>)
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	6013      	str	r3, [r2, #0]
}
 8008a0a:	bf00      	nop
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20000fd0 	.word	0x20000fd0
 8008a18:	20000fd4 	.word	0x20000fd4

08008a1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a22:	f000 f969 	bl	8008cf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a26:	4b15      	ldr	r3, [pc, #84]	@ (8008a7c <prvCheckForValidListAndQueue+0x60>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d120      	bne.n	8008a70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a2e:	4814      	ldr	r0, [pc, #80]	@ (8008a80 <prvCheckForValidListAndQueue+0x64>)
 8008a30:	f7fd fd8a 	bl	8006548 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a34:	4813      	ldr	r0, [pc, #76]	@ (8008a84 <prvCheckForValidListAndQueue+0x68>)
 8008a36:	f7fd fd87 	bl	8006548 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a3a:	4b13      	ldr	r3, [pc, #76]	@ (8008a88 <prvCheckForValidListAndQueue+0x6c>)
 8008a3c:	4a10      	ldr	r2, [pc, #64]	@ (8008a80 <prvCheckForValidListAndQueue+0x64>)
 8008a3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a40:	4b12      	ldr	r3, [pc, #72]	@ (8008a8c <prvCheckForValidListAndQueue+0x70>)
 8008a42:	4a10      	ldr	r2, [pc, #64]	@ (8008a84 <prvCheckForValidListAndQueue+0x68>)
 8008a44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a46:	2300      	movs	r3, #0
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	4b11      	ldr	r3, [pc, #68]	@ (8008a90 <prvCheckForValidListAndQueue+0x74>)
 8008a4c:	4a11      	ldr	r2, [pc, #68]	@ (8008a94 <prvCheckForValidListAndQueue+0x78>)
 8008a4e:	2110      	movs	r1, #16
 8008a50:	200a      	movs	r0, #10
 8008a52:	f7fd fe97 	bl	8006784 <xQueueGenericCreateStatic>
 8008a56:	4603      	mov	r3, r0
 8008a58:	4a08      	ldr	r2, [pc, #32]	@ (8008a7c <prvCheckForValidListAndQueue+0x60>)
 8008a5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a5c:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <prvCheckForValidListAndQueue+0x60>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a64:	4b05      	ldr	r3, [pc, #20]	@ (8008a7c <prvCheckForValidListAndQueue+0x60>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	490b      	ldr	r1, [pc, #44]	@ (8008a98 <prvCheckForValidListAndQueue+0x7c>)
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe fc52 	bl	8007314 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a70:	f000 f974 	bl	8008d5c <vPortExitCritical>
}
 8008a74:	bf00      	nop
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000fd8 	.word	0x20000fd8
 8008a80:	20000fa8 	.word	0x20000fa8
 8008a84:	20000fbc 	.word	0x20000fbc
 8008a88:	20000fd0 	.word	0x20000fd0
 8008a8c:	20000fd4 	.word	0x20000fd4
 8008a90:	20001084 	.word	0x20001084
 8008a94:	20000fe4 	.word	0x20000fe4
 8008a98:	0800d2a8 	.word	0x0800d2a8

08008a9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3b04      	subs	r3, #4
 8008aac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3b04      	subs	r3, #4
 8008aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f023 0201 	bic.w	r2, r3, #1
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008acc:	4a0c      	ldr	r2, [pc, #48]	@ (8008b00 <pxPortInitialiseStack+0x64>)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3b14      	subs	r3, #20
 8008ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3b04      	subs	r3, #4
 8008ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f06f 0202 	mvn.w	r2, #2
 8008aea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3b20      	subs	r3, #32
 8008af0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008af2:	68fb      	ldr	r3, [r7, #12]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	08008b05 	.word	0x08008b05

08008b04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b0e:	4b13      	ldr	r3, [pc, #76]	@ (8008b5c <prvTaskExitError+0x58>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b16:	d00b      	beq.n	8008b30 <prvTaskExitError+0x2c>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	60fb      	str	r3, [r7, #12]
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	e7fd      	b.n	8008b2c <prvTaskExitError+0x28>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60bb      	str	r3, [r7, #8]
}
 8008b42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b44:	bf00      	nop
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0fc      	beq.n	8008b46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b4c:	bf00      	nop
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	2000000c 	.word	0x2000000c

08008b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b60:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <pxCurrentTCBConst2>)
 8008b62:	6819      	ldr	r1, [r3, #0]
 8008b64:	6808      	ldr	r0, [r1, #0]
 8008b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	f380 8809 	msr	PSP, r0
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f380 8811 	msr	BASEPRI, r0
 8008b7a:	4770      	bx	lr
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst2>:
 8008b80:	20000aa8 	.word	0x20000aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b88:	4808      	ldr	r0, [pc, #32]	@ (8008bac <prvPortStartFirstTask+0x24>)
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	6800      	ldr	r0, [r0, #0]
 8008b8e:	f380 8808 	msr	MSP, r0
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8814 	msr	CONTROL, r0
 8008b9a:	b662      	cpsie	i
 8008b9c:	b661      	cpsie	f
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	df00      	svc	0
 8008ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008baa:	bf00      	nop
 8008bac:	e000ed08 	.word	0xe000ed08

08008bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bb6:	4b47      	ldr	r3, [pc, #284]	@ (8008cd4 <xPortStartScheduler+0x124>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a47      	ldr	r2, [pc, #284]	@ (8008cd8 <xPortStartScheduler+0x128>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10b      	bne.n	8008bd8 <xPortStartScheduler+0x28>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60fb      	str	r3, [r7, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd4 <xPortStartScheduler+0x124>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8008cdc <xPortStartScheduler+0x12c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d10b      	bne.n	8008bfa <xPortStartScheduler+0x4a>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	613b      	str	r3, [r7, #16]
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	e7fd      	b.n	8008bf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bfa:	4b39      	ldr	r3, [pc, #228]	@ (8008ce0 <xPortStartScheduler+0x130>)
 8008bfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	22ff      	movs	r2, #255	@ 0xff
 8008c0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ce4 <xPortStartScheduler+0x134>)
 8008c20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c22:	4b31      	ldr	r3, [pc, #196]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c24:	2207      	movs	r2, #7
 8008c26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c28:	e009      	b.n	8008c3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c34:	78fb      	ldrb	r3, [r7, #3]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c46:	2b80      	cmp	r3, #128	@ 0x80
 8008c48:	d0ef      	beq.n	8008c2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f1c3 0307 	rsb	r3, r3, #7
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d00b      	beq.n	8008c6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60bb      	str	r3, [r7, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	4a1c      	ldr	r2, [pc, #112]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c78:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c80:	4a19      	ldr	r2, [pc, #100]	@ (8008ce8 <xPortStartScheduler+0x138>)
 8008c82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c8c:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <xPortStartScheduler+0x13c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a16      	ldr	r2, [pc, #88]	@ (8008cec <xPortStartScheduler+0x13c>)
 8008c92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c98:	4b14      	ldr	r3, [pc, #80]	@ (8008cec <xPortStartScheduler+0x13c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a13      	ldr	r2, [pc, #76]	@ (8008cec <xPortStartScheduler+0x13c>)
 8008c9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ca4:	f000 f8da 	bl	8008e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ca8:	4b11      	ldr	r3, [pc, #68]	@ (8008cf0 <xPortStartScheduler+0x140>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cae:	f000 f8f9 	bl	8008ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cb2:	4b10      	ldr	r3, [pc, #64]	@ (8008cf4 <xPortStartScheduler+0x144>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008cf4 <xPortStartScheduler+0x144>)
 8008cb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008cbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cbe:	f7ff ff63 	bl	8008b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cc2:	f7fe ff3f 	bl	8007b44 <vTaskSwitchContext>
	prvTaskExitError();
 8008cc6:	f7ff ff1d 	bl	8008b04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	e000ed00 	.word	0xe000ed00
 8008cd8:	410fc271 	.word	0x410fc271
 8008cdc:	410fc270 	.word	0x410fc270
 8008ce0:	e000e400 	.word	0xe000e400
 8008ce4:	200010d4 	.word	0x200010d4
 8008ce8:	200010d8 	.word	0x200010d8
 8008cec:	e000ed20 	.word	0xe000ed20
 8008cf0:	2000000c 	.word	0x2000000c
 8008cf4:	e000ef34 	.word	0xe000ef34

08008cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	607b      	str	r3, [r7, #4]
}
 8008d10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d12:	4b10      	ldr	r3, [pc, #64]	@ (8008d54 <vPortEnterCritical+0x5c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3301      	adds	r3, #1
 8008d18:	4a0e      	ldr	r2, [pc, #56]	@ (8008d54 <vPortEnterCritical+0x5c>)
 8008d1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d54 <vPortEnterCritical+0x5c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d110      	bne.n	8008d46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d24:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <vPortEnterCritical+0x60>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <vPortEnterCritical+0x4e>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	603b      	str	r3, [r7, #0]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <vPortEnterCritical+0x4a>
	}
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	2000000c 	.word	0x2000000c
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d62:	4b12      	ldr	r3, [pc, #72]	@ (8008dac <vPortExitCritical+0x50>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10b      	bne.n	8008d82 <vPortExitCritical+0x26>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	607b      	str	r3, [r7, #4]
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	e7fd      	b.n	8008d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d82:	4b0a      	ldr	r3, [pc, #40]	@ (8008dac <vPortExitCritical+0x50>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	4a08      	ldr	r2, [pc, #32]	@ (8008dac <vPortExitCritical+0x50>)
 8008d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d8c:	4b07      	ldr	r3, [pc, #28]	@ (8008dac <vPortExitCritical+0x50>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d105      	bne.n	8008da0 <vPortExitCritical+0x44>
 8008d94:	2300      	movs	r3, #0
 8008d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f383 8811 	msr	BASEPRI, r3
}
 8008d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	2000000c 	.word	0x2000000c

08008db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008db0:	f3ef 8009 	mrs	r0, PSP
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4b15      	ldr	r3, [pc, #84]	@ (8008e10 <pxCurrentTCBConst>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	f01e 0f10 	tst.w	lr, #16
 8008dc0:	bf08      	it	eq
 8008dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008dd4:	f380 8811 	msr	BASEPRI, r0
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f7fe feb0 	bl	8007b44 <vTaskSwitchContext>
 8008de4:	f04f 0000 	mov.w	r0, #0
 8008de8:	f380 8811 	msr	BASEPRI, r0
 8008dec:	bc09      	pop	{r0, r3}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df6:	f01e 0f10 	tst.w	lr, #16
 8008dfa:	bf08      	it	eq
 8008dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e00:	f380 8809 	msr	PSP, r0
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst>:
 8008e10:	20000aa8 	.word	0x20000aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e32:	f7fe fdcd 	bl	80079d0 <xTaskIncrementTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e3c:	4b06      	ldr	r3, [pc, #24]	@ (8008e58 <xPortSysTickHandler+0x40>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	@ (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <vPortSetupTimerInterrupt+0x38>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e98 <vPortSetupTimerInterrupt+0x3c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	@ (8008e9c <vPortSetupTimerInterrupt+0x40>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	4a09      	ldr	r2, [pc, #36]	@ (8008ea0 <vPortSetupTimerInterrupt+0x44>)
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7e:	4b04      	ldr	r3, [pc, #16]	@ (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000e010 	.word	0xe000e010
 8008e94:	e000e018 	.word	0xe000e018
 8008e98:	20000000 	.word	0x20000000
 8008e9c:	10624dd3 	.word	0x10624dd3
 8008ea0:	e000e014 	.word	0xe000e014

08008ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008eb4 <vPortEnableVFP+0x10>
 8008ea8:	6801      	ldr	r1, [r0, #0]
 8008eaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008eae:	6001      	str	r1, [r0, #0]
 8008eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed88 	.word	0xe000ed88

08008eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ebe:	f3ef 8305 	mrs	r3, IPSR
 8008ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d915      	bls.n	8008ef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eca:	4a18      	ldr	r2, [pc, #96]	@ (8008f2c <vPortValidateInterruptPriority+0x74>)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ed4:	4b16      	ldr	r3, [pc, #88]	@ (8008f30 <vPortValidateInterruptPriority+0x78>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	7afa      	ldrb	r2, [r7, #11]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d20b      	bcs.n	8008ef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	607b      	str	r3, [r7, #4]
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	e7fd      	b.n	8008ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f34 <vPortValidateInterruptPriority+0x7c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008efe:	4b0e      	ldr	r3, [pc, #56]	@ (8008f38 <vPortValidateInterruptPriority+0x80>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d90b      	bls.n	8008f1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	603b      	str	r3, [r7, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <vPortValidateInterruptPriority+0x62>
	}
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	e000e3f0 	.word	0xe000e3f0
 8008f30:	200010d4 	.word	0x200010d4
 8008f34:	e000ed0c 	.word	0xe000ed0c
 8008f38:	200010d8 	.word	0x200010d8

08008f3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08a      	sub	sp, #40	@ 0x28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f48:	f7fe fc86 	bl	8007858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80090c0 <pvPortMalloc+0x184>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f54:	f000 f924 	bl	80091a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f58:	4b5a      	ldr	r3, [pc, #360]	@ (80090c4 <pvPortMalloc+0x188>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f040 8095 	bne.w	8009090 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01e      	beq.n	8008faa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f6c:	2208      	movs	r2, #8
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4413      	add	r3, r2
 8008f72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d015      	beq.n	8008faa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f023 0307 	bic.w	r3, r3, #7
 8008f84:	3308      	adds	r3, #8
 8008f86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <pvPortMalloc+0x6e>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	617b      	str	r3, [r7, #20]
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d06f      	beq.n	8009090 <pvPortMalloc+0x154>
 8008fb0:	4b45      	ldr	r3, [pc, #276]	@ (80090c8 <pvPortMalloc+0x18c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d86a      	bhi.n	8009090 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fba:	4b44      	ldr	r3, [pc, #272]	@ (80090cc <pvPortMalloc+0x190>)
 8008fbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fbe:	4b43      	ldr	r3, [pc, #268]	@ (80090cc <pvPortMalloc+0x190>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fc4:	e004      	b.n	8008fd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d903      	bls.n	8008fe2 <pvPortMalloc+0xa6>
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1f1      	bne.n	8008fc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fe2:	4b37      	ldr	r3, [pc, #220]	@ (80090c0 <pvPortMalloc+0x184>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d051      	beq.n	8009090 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2208      	movs	r2, #8
 8008ff2:	4413      	add	r3, r2
 8008ff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	1ad2      	subs	r2, r2, r3
 8009006:	2308      	movs	r3, #8
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	429a      	cmp	r2, r3
 800900c:	d920      	bls.n	8009050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800900e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <pvPortMalloc+0xfc>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	613b      	str	r3, [r7, #16]
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	e7fd      	b.n	8009034 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800904a:	69b8      	ldr	r0, [r7, #24]
 800904c:	f000 f90a 	bl	8009264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009050:	4b1d      	ldr	r3, [pc, #116]	@ (80090c8 <pvPortMalloc+0x18c>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	4a1b      	ldr	r2, [pc, #108]	@ (80090c8 <pvPortMalloc+0x18c>)
 800905c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800905e:	4b1a      	ldr	r3, [pc, #104]	@ (80090c8 <pvPortMalloc+0x18c>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	4b1b      	ldr	r3, [pc, #108]	@ (80090d0 <pvPortMalloc+0x194>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	429a      	cmp	r2, r3
 8009068:	d203      	bcs.n	8009072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800906a:	4b17      	ldr	r3, [pc, #92]	@ (80090c8 <pvPortMalloc+0x18c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a18      	ldr	r2, [pc, #96]	@ (80090d0 <pvPortMalloc+0x194>)
 8009070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	4b13      	ldr	r3, [pc, #76]	@ (80090c4 <pvPortMalloc+0x188>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	431a      	orrs	r2, r3
 800907c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009086:	4b13      	ldr	r3, [pc, #76]	@ (80090d4 <pvPortMalloc+0x198>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a11      	ldr	r2, [pc, #68]	@ (80090d4 <pvPortMalloc+0x198>)
 800908e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009090:	f7fe fbf0 	bl	8007874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00b      	beq.n	80090b6 <pvPortMalloc+0x17a>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	60fb      	str	r3, [r7, #12]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <pvPortMalloc+0x176>
	return pvReturn;
 80090b6:	69fb      	ldr	r3, [r7, #28]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3728      	adds	r7, #40	@ 0x28
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20004ce4 	.word	0x20004ce4
 80090c4:	20004cf8 	.word	0x20004cf8
 80090c8:	20004ce8 	.word	0x20004ce8
 80090cc:	20004cdc 	.word	0x20004cdc
 80090d0:	20004cec 	.word	0x20004cec
 80090d4:	20004cf0 	.word	0x20004cf0

080090d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d04f      	beq.n	800918a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090ea:	2308      	movs	r3, #8
 80090ec:	425b      	negs	r3, r3
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	4413      	add	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	4b25      	ldr	r3, [pc, #148]	@ (8009194 <vPortFree+0xbc>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4013      	ands	r3, r2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10b      	bne.n	800911e <vPortFree+0x46>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60fb      	str	r3, [r7, #12]
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	e7fd      	b.n	800911a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00b      	beq.n	800913e <vPortFree+0x66>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60bb      	str	r3, [r7, #8]
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	e7fd      	b.n	800913a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	4b14      	ldr	r3, [pc, #80]	@ (8009194 <vPortFree+0xbc>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4013      	ands	r3, r2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01e      	beq.n	800918a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d11a      	bne.n	800918a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	4b0e      	ldr	r3, [pc, #56]	@ (8009194 <vPortFree+0xbc>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	43db      	mvns	r3, r3
 800915e:	401a      	ands	r2, r3
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009164:	f7fe fb78 	bl	8007858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	4b0a      	ldr	r3, [pc, #40]	@ (8009198 <vPortFree+0xc0>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4413      	add	r3, r2
 8009172:	4a09      	ldr	r2, [pc, #36]	@ (8009198 <vPortFree+0xc0>)
 8009174:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009176:	6938      	ldr	r0, [r7, #16]
 8009178:	f000 f874 	bl	8009264 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800917c:	4b07      	ldr	r3, [pc, #28]	@ (800919c <vPortFree+0xc4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3301      	adds	r3, #1
 8009182:	4a06      	ldr	r2, [pc, #24]	@ (800919c <vPortFree+0xc4>)
 8009184:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009186:	f7fe fb75 	bl	8007874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800918a:	bf00      	nop
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20004cf8 	.word	0x20004cf8
 8009198:	20004ce8 	.word	0x20004ce8
 800919c:	20004cf4 	.word	0x20004cf4

080091a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80091aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091ac:	4b27      	ldr	r3, [pc, #156]	@ (800924c <prvHeapInit+0xac>)
 80091ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00c      	beq.n	80091d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3307      	adds	r3, #7
 80091be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 0307 	bic.w	r3, r3, #7
 80091c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	4a1f      	ldr	r2, [pc, #124]	@ (800924c <prvHeapInit+0xac>)
 80091d0:	4413      	add	r3, r2
 80091d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009250 <prvHeapInit+0xb0>)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091de:	4b1c      	ldr	r3, [pc, #112]	@ (8009250 <prvHeapInit+0xb0>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	4413      	add	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091ec:	2208      	movs	r2, #8
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	1a9b      	subs	r3, r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0307 	bic.w	r3, r3, #7
 80091fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4a15      	ldr	r2, [pc, #84]	@ (8009254 <prvHeapInit+0xb4>)
 8009200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009202:	4b14      	ldr	r3, [pc, #80]	@ (8009254 <prvHeapInit+0xb4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2200      	movs	r2, #0
 8009208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800920a:	4b12      	ldr	r3, [pc, #72]	@ (8009254 <prvHeapInit+0xb4>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	1ad2      	subs	r2, r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009220:	4b0c      	ldr	r3, [pc, #48]	@ (8009254 <prvHeapInit+0xb4>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	4a0a      	ldr	r2, [pc, #40]	@ (8009258 <prvHeapInit+0xb8>)
 800922e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	4a09      	ldr	r2, [pc, #36]	@ (800925c <prvHeapInit+0xbc>)
 8009236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009238:	4b09      	ldr	r3, [pc, #36]	@ (8009260 <prvHeapInit+0xc0>)
 800923a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800923e:	601a      	str	r2, [r3, #0]
}
 8009240:	bf00      	nop
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	200010dc 	.word	0x200010dc
 8009250:	20004cdc 	.word	0x20004cdc
 8009254:	20004ce4 	.word	0x20004ce4
 8009258:	20004cec 	.word	0x20004cec
 800925c:	20004ce8 	.word	0x20004ce8
 8009260:	20004cf8 	.word	0x20004cf8

08009264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800926c:	4b28      	ldr	r3, [pc, #160]	@ (8009310 <prvInsertBlockIntoFreeList+0xac>)
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e002      	b.n	8009278 <prvInsertBlockIntoFreeList+0x14>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d8f7      	bhi.n	8009272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	4413      	add	r3, r2
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	429a      	cmp	r2, r3
 8009292:	d108      	bne.n	80092a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	441a      	add	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d118      	bne.n	80092ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b15      	ldr	r3, [pc, #84]	@ (8009314 <prvInsertBlockIntoFreeList+0xb0>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d00d      	beq.n	80092e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	441a      	add	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	e008      	b.n	80092f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009314 <prvInsertBlockIntoFreeList+0xb0>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e003      	b.n	80092f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d002      	beq.n	8009302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009302:	bf00      	nop
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20004cdc 	.word	0x20004cdc
 8009314:	20004ce4 	.word	0x20004ce4

08009318 <atof>:
 8009318:	2100      	movs	r1, #0
 800931a:	f001 bafd 	b.w	800a918 <strtod>

0800931e <__cvt>:
 800931e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009322:	ec57 6b10 	vmov	r6, r7, d0
 8009326:	2f00      	cmp	r7, #0
 8009328:	460c      	mov	r4, r1
 800932a:	4619      	mov	r1, r3
 800932c:	463b      	mov	r3, r7
 800932e:	bfbb      	ittet	lt
 8009330:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009334:	461f      	movlt	r7, r3
 8009336:	2300      	movge	r3, #0
 8009338:	232d      	movlt	r3, #45	@ 0x2d
 800933a:	700b      	strb	r3, [r1, #0]
 800933c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800933e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009342:	4691      	mov	r9, r2
 8009344:	f023 0820 	bic.w	r8, r3, #32
 8009348:	bfbc      	itt	lt
 800934a:	4632      	movlt	r2, r6
 800934c:	4616      	movlt	r6, r2
 800934e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009352:	d005      	beq.n	8009360 <__cvt+0x42>
 8009354:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009358:	d100      	bne.n	800935c <__cvt+0x3e>
 800935a:	3401      	adds	r4, #1
 800935c:	2102      	movs	r1, #2
 800935e:	e000      	b.n	8009362 <__cvt+0x44>
 8009360:	2103      	movs	r1, #3
 8009362:	ab03      	add	r3, sp, #12
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	ab02      	add	r3, sp, #8
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	ec47 6b10 	vmov	d0, r6, r7
 800936e:	4653      	mov	r3, sl
 8009370:	4622      	mov	r2, r4
 8009372:	f001 fc55 	bl	800ac20 <_dtoa_r>
 8009376:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800937a:	4605      	mov	r5, r0
 800937c:	d119      	bne.n	80093b2 <__cvt+0x94>
 800937e:	f019 0f01 	tst.w	r9, #1
 8009382:	d00e      	beq.n	80093a2 <__cvt+0x84>
 8009384:	eb00 0904 	add.w	r9, r0, r4
 8009388:	2200      	movs	r2, #0
 800938a:	2300      	movs	r3, #0
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f7 fbba 	bl	8000b08 <__aeabi_dcmpeq>
 8009394:	b108      	cbz	r0, 800939a <__cvt+0x7c>
 8009396:	f8cd 900c 	str.w	r9, [sp, #12]
 800939a:	2230      	movs	r2, #48	@ 0x30
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	454b      	cmp	r3, r9
 80093a0:	d31e      	bcc.n	80093e0 <__cvt+0xc2>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093a6:	1b5b      	subs	r3, r3, r5
 80093a8:	4628      	mov	r0, r5
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	b004      	add	sp, #16
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093b6:	eb00 0904 	add.w	r9, r0, r4
 80093ba:	d1e5      	bne.n	8009388 <__cvt+0x6a>
 80093bc:	7803      	ldrb	r3, [r0, #0]
 80093be:	2b30      	cmp	r3, #48	@ 0x30
 80093c0:	d10a      	bne.n	80093d8 <__cvt+0xba>
 80093c2:	2200      	movs	r2, #0
 80093c4:	2300      	movs	r3, #0
 80093c6:	4630      	mov	r0, r6
 80093c8:	4639      	mov	r1, r7
 80093ca:	f7f7 fb9d 	bl	8000b08 <__aeabi_dcmpeq>
 80093ce:	b918      	cbnz	r0, 80093d8 <__cvt+0xba>
 80093d0:	f1c4 0401 	rsb	r4, r4, #1
 80093d4:	f8ca 4000 	str.w	r4, [sl]
 80093d8:	f8da 3000 	ldr.w	r3, [sl]
 80093dc:	4499      	add	r9, r3
 80093de:	e7d3      	b.n	8009388 <__cvt+0x6a>
 80093e0:	1c59      	adds	r1, r3, #1
 80093e2:	9103      	str	r1, [sp, #12]
 80093e4:	701a      	strb	r2, [r3, #0]
 80093e6:	e7d9      	b.n	800939c <__cvt+0x7e>

080093e8 <__exponent>:
 80093e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ea:	2900      	cmp	r1, #0
 80093ec:	bfba      	itte	lt
 80093ee:	4249      	neglt	r1, r1
 80093f0:	232d      	movlt	r3, #45	@ 0x2d
 80093f2:	232b      	movge	r3, #43	@ 0x2b
 80093f4:	2909      	cmp	r1, #9
 80093f6:	7002      	strb	r2, [r0, #0]
 80093f8:	7043      	strb	r3, [r0, #1]
 80093fa:	dd29      	ble.n	8009450 <__exponent+0x68>
 80093fc:	f10d 0307 	add.w	r3, sp, #7
 8009400:	461d      	mov	r5, r3
 8009402:	270a      	movs	r7, #10
 8009404:	461a      	mov	r2, r3
 8009406:	fbb1 f6f7 	udiv	r6, r1, r7
 800940a:	fb07 1416 	mls	r4, r7, r6, r1
 800940e:	3430      	adds	r4, #48	@ 0x30
 8009410:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009414:	460c      	mov	r4, r1
 8009416:	2c63      	cmp	r4, #99	@ 0x63
 8009418:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800941c:	4631      	mov	r1, r6
 800941e:	dcf1      	bgt.n	8009404 <__exponent+0x1c>
 8009420:	3130      	adds	r1, #48	@ 0x30
 8009422:	1e94      	subs	r4, r2, #2
 8009424:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009428:	1c41      	adds	r1, r0, #1
 800942a:	4623      	mov	r3, r4
 800942c:	42ab      	cmp	r3, r5
 800942e:	d30a      	bcc.n	8009446 <__exponent+0x5e>
 8009430:	f10d 0309 	add.w	r3, sp, #9
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	42ac      	cmp	r4, r5
 8009438:	bf88      	it	hi
 800943a:	2300      	movhi	r3, #0
 800943c:	3302      	adds	r3, #2
 800943e:	4403      	add	r3, r0
 8009440:	1a18      	subs	r0, r3, r0
 8009442:	b003      	add	sp, #12
 8009444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009446:	f813 6b01 	ldrb.w	r6, [r3], #1
 800944a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800944e:	e7ed      	b.n	800942c <__exponent+0x44>
 8009450:	2330      	movs	r3, #48	@ 0x30
 8009452:	3130      	adds	r1, #48	@ 0x30
 8009454:	7083      	strb	r3, [r0, #2]
 8009456:	70c1      	strb	r1, [r0, #3]
 8009458:	1d03      	adds	r3, r0, #4
 800945a:	e7f1      	b.n	8009440 <__exponent+0x58>

0800945c <_printf_float>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	b08d      	sub	sp, #52	@ 0x34
 8009462:	460c      	mov	r4, r1
 8009464:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009468:	4616      	mov	r6, r2
 800946a:	461f      	mov	r7, r3
 800946c:	4605      	mov	r5, r0
 800946e:	f001 fb35 	bl	800aadc <_localeconv_r>
 8009472:	6803      	ldr	r3, [r0, #0]
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	4618      	mov	r0, r3
 8009478:	f7f6 ff1a 	bl	80002b0 <strlen>
 800947c:	2300      	movs	r3, #0
 800947e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009480:	f8d8 3000 	ldr.w	r3, [r8]
 8009484:	9005      	str	r0, [sp, #20]
 8009486:	3307      	adds	r3, #7
 8009488:	f023 0307 	bic.w	r3, r3, #7
 800948c:	f103 0208 	add.w	r2, r3, #8
 8009490:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009494:	f8d4 b000 	ldr.w	fp, [r4]
 8009498:	f8c8 2000 	str.w	r2, [r8]
 800949c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80094a4:	9307      	str	r3, [sp, #28]
 80094a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80094aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80094ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094b2:	4b9c      	ldr	r3, [pc, #624]	@ (8009724 <_printf_float+0x2c8>)
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094b8:	f7f7 fb58 	bl	8000b6c <__aeabi_dcmpun>
 80094bc:	bb70      	cbnz	r0, 800951c <_printf_float+0xc0>
 80094be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094c2:	4b98      	ldr	r3, [pc, #608]	@ (8009724 <_printf_float+0x2c8>)
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094c8:	f7f7 fb32 	bl	8000b30 <__aeabi_dcmple>
 80094cc:	bb30      	cbnz	r0, 800951c <_printf_float+0xc0>
 80094ce:	2200      	movs	r2, #0
 80094d0:	2300      	movs	r3, #0
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	f7f7 fb21 	bl	8000b1c <__aeabi_dcmplt>
 80094da:	b110      	cbz	r0, 80094e2 <_printf_float+0x86>
 80094dc:	232d      	movs	r3, #45	@ 0x2d
 80094de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094e2:	4a91      	ldr	r2, [pc, #580]	@ (8009728 <_printf_float+0x2cc>)
 80094e4:	4b91      	ldr	r3, [pc, #580]	@ (800972c <_printf_float+0x2d0>)
 80094e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094ea:	bf8c      	ite	hi
 80094ec:	4690      	movhi	r8, r2
 80094ee:	4698      	movls	r8, r3
 80094f0:	2303      	movs	r3, #3
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	f02b 0304 	bic.w	r3, fp, #4
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	f04f 0900 	mov.w	r9, #0
 80094fe:	9700      	str	r7, [sp, #0]
 8009500:	4633      	mov	r3, r6
 8009502:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009504:	4621      	mov	r1, r4
 8009506:	4628      	mov	r0, r5
 8009508:	f000 f9d2 	bl	80098b0 <_printf_common>
 800950c:	3001      	adds	r0, #1
 800950e:	f040 808d 	bne.w	800962c <_printf_float+0x1d0>
 8009512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009516:	b00d      	add	sp, #52	@ 0x34
 8009518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	4642      	mov	r2, r8
 800951e:	464b      	mov	r3, r9
 8009520:	4640      	mov	r0, r8
 8009522:	4649      	mov	r1, r9
 8009524:	f7f7 fb22 	bl	8000b6c <__aeabi_dcmpun>
 8009528:	b140      	cbz	r0, 800953c <_printf_float+0xe0>
 800952a:	464b      	mov	r3, r9
 800952c:	2b00      	cmp	r3, #0
 800952e:	bfbc      	itt	lt
 8009530:	232d      	movlt	r3, #45	@ 0x2d
 8009532:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009536:	4a7e      	ldr	r2, [pc, #504]	@ (8009730 <_printf_float+0x2d4>)
 8009538:	4b7e      	ldr	r3, [pc, #504]	@ (8009734 <_printf_float+0x2d8>)
 800953a:	e7d4      	b.n	80094e6 <_printf_float+0x8a>
 800953c:	6863      	ldr	r3, [r4, #4]
 800953e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009542:	9206      	str	r2, [sp, #24]
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	d13b      	bne.n	80095c0 <_printf_float+0x164>
 8009548:	2306      	movs	r3, #6
 800954a:	6063      	str	r3, [r4, #4]
 800954c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009550:	2300      	movs	r3, #0
 8009552:	6022      	str	r2, [r4, #0]
 8009554:	9303      	str	r3, [sp, #12]
 8009556:	ab0a      	add	r3, sp, #40	@ 0x28
 8009558:	e9cd a301 	strd	sl, r3, [sp, #4]
 800955c:	ab09      	add	r3, sp, #36	@ 0x24
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	6861      	ldr	r1, [r4, #4]
 8009562:	ec49 8b10 	vmov	d0, r8, r9
 8009566:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800956a:	4628      	mov	r0, r5
 800956c:	f7ff fed7 	bl	800931e <__cvt>
 8009570:	9b06      	ldr	r3, [sp, #24]
 8009572:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009574:	2b47      	cmp	r3, #71	@ 0x47
 8009576:	4680      	mov	r8, r0
 8009578:	d129      	bne.n	80095ce <_printf_float+0x172>
 800957a:	1cc8      	adds	r0, r1, #3
 800957c:	db02      	blt.n	8009584 <_printf_float+0x128>
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	4299      	cmp	r1, r3
 8009582:	dd41      	ble.n	8009608 <_printf_float+0x1ac>
 8009584:	f1aa 0a02 	sub.w	sl, sl, #2
 8009588:	fa5f fa8a 	uxtb.w	sl, sl
 800958c:	3901      	subs	r1, #1
 800958e:	4652      	mov	r2, sl
 8009590:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009594:	9109      	str	r1, [sp, #36]	@ 0x24
 8009596:	f7ff ff27 	bl	80093e8 <__exponent>
 800959a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800959c:	1813      	adds	r3, r2, r0
 800959e:	2a01      	cmp	r2, #1
 80095a0:	4681      	mov	r9, r0
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	dc02      	bgt.n	80095ac <_printf_float+0x150>
 80095a6:	6822      	ldr	r2, [r4, #0]
 80095a8:	07d2      	lsls	r2, r2, #31
 80095aa:	d501      	bpl.n	80095b0 <_printf_float+0x154>
 80095ac:	3301      	adds	r3, #1
 80095ae:	6123      	str	r3, [r4, #16]
 80095b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0a2      	beq.n	80094fe <_printf_float+0xa2>
 80095b8:	232d      	movs	r3, #45	@ 0x2d
 80095ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095be:	e79e      	b.n	80094fe <_printf_float+0xa2>
 80095c0:	9a06      	ldr	r2, [sp, #24]
 80095c2:	2a47      	cmp	r2, #71	@ 0x47
 80095c4:	d1c2      	bne.n	800954c <_printf_float+0xf0>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1c0      	bne.n	800954c <_printf_float+0xf0>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e7bd      	b.n	800954a <_printf_float+0xee>
 80095ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095d2:	d9db      	bls.n	800958c <_printf_float+0x130>
 80095d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80095d8:	d118      	bne.n	800960c <_printf_float+0x1b0>
 80095da:	2900      	cmp	r1, #0
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	dd0b      	ble.n	80095f8 <_printf_float+0x19c>
 80095e0:	6121      	str	r1, [r4, #16]
 80095e2:	b913      	cbnz	r3, 80095ea <_printf_float+0x18e>
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	07d0      	lsls	r0, r2, #31
 80095e8:	d502      	bpl.n	80095f0 <_printf_float+0x194>
 80095ea:	3301      	adds	r3, #1
 80095ec:	440b      	add	r3, r1
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095f2:	f04f 0900 	mov.w	r9, #0
 80095f6:	e7db      	b.n	80095b0 <_printf_float+0x154>
 80095f8:	b913      	cbnz	r3, 8009600 <_printf_float+0x1a4>
 80095fa:	6822      	ldr	r2, [r4, #0]
 80095fc:	07d2      	lsls	r2, r2, #31
 80095fe:	d501      	bpl.n	8009604 <_printf_float+0x1a8>
 8009600:	3302      	adds	r3, #2
 8009602:	e7f4      	b.n	80095ee <_printf_float+0x192>
 8009604:	2301      	movs	r3, #1
 8009606:	e7f2      	b.n	80095ee <_printf_float+0x192>
 8009608:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800960c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800960e:	4299      	cmp	r1, r3
 8009610:	db05      	blt.n	800961e <_printf_float+0x1c2>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	6121      	str	r1, [r4, #16]
 8009616:	07d8      	lsls	r0, r3, #31
 8009618:	d5ea      	bpl.n	80095f0 <_printf_float+0x194>
 800961a:	1c4b      	adds	r3, r1, #1
 800961c:	e7e7      	b.n	80095ee <_printf_float+0x192>
 800961e:	2900      	cmp	r1, #0
 8009620:	bfd4      	ite	le
 8009622:	f1c1 0202 	rsble	r2, r1, #2
 8009626:	2201      	movgt	r2, #1
 8009628:	4413      	add	r3, r2
 800962a:	e7e0      	b.n	80095ee <_printf_float+0x192>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	055a      	lsls	r2, r3, #21
 8009630:	d407      	bmi.n	8009642 <_printf_float+0x1e6>
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	4642      	mov	r2, r8
 8009636:	4631      	mov	r1, r6
 8009638:	4628      	mov	r0, r5
 800963a:	47b8      	blx	r7
 800963c:	3001      	adds	r0, #1
 800963e:	d12b      	bne.n	8009698 <_printf_float+0x23c>
 8009640:	e767      	b.n	8009512 <_printf_float+0xb6>
 8009642:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009646:	f240 80dd 	bls.w	8009804 <_printf_float+0x3a8>
 800964a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800964e:	2200      	movs	r2, #0
 8009650:	2300      	movs	r3, #0
 8009652:	f7f7 fa59 	bl	8000b08 <__aeabi_dcmpeq>
 8009656:	2800      	cmp	r0, #0
 8009658:	d033      	beq.n	80096c2 <_printf_float+0x266>
 800965a:	4a37      	ldr	r2, [pc, #220]	@ (8009738 <_printf_float+0x2dc>)
 800965c:	2301      	movs	r3, #1
 800965e:	4631      	mov	r1, r6
 8009660:	4628      	mov	r0, r5
 8009662:	47b8      	blx	r7
 8009664:	3001      	adds	r0, #1
 8009666:	f43f af54 	beq.w	8009512 <_printf_float+0xb6>
 800966a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800966e:	4543      	cmp	r3, r8
 8009670:	db02      	blt.n	8009678 <_printf_float+0x21c>
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	07d8      	lsls	r0, r3, #31
 8009676:	d50f      	bpl.n	8009698 <_printf_float+0x23c>
 8009678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800967c:	4631      	mov	r1, r6
 800967e:	4628      	mov	r0, r5
 8009680:	47b8      	blx	r7
 8009682:	3001      	adds	r0, #1
 8009684:	f43f af45 	beq.w	8009512 <_printf_float+0xb6>
 8009688:	f04f 0900 	mov.w	r9, #0
 800968c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009690:	f104 0a1a 	add.w	sl, r4, #26
 8009694:	45c8      	cmp	r8, r9
 8009696:	dc09      	bgt.n	80096ac <_printf_float+0x250>
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	079b      	lsls	r3, r3, #30
 800969c:	f100 8103 	bmi.w	80098a6 <_printf_float+0x44a>
 80096a0:	68e0      	ldr	r0, [r4, #12]
 80096a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a4:	4298      	cmp	r0, r3
 80096a6:	bfb8      	it	lt
 80096a8:	4618      	movlt	r0, r3
 80096aa:	e734      	b.n	8009516 <_printf_float+0xba>
 80096ac:	2301      	movs	r3, #1
 80096ae:	4652      	mov	r2, sl
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	f43f af2b 	beq.w	8009512 <_printf_float+0xb6>
 80096bc:	f109 0901 	add.w	r9, r9, #1
 80096c0:	e7e8      	b.n	8009694 <_printf_float+0x238>
 80096c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dc39      	bgt.n	800973c <_printf_float+0x2e0>
 80096c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009738 <_printf_float+0x2dc>)
 80096ca:	2301      	movs	r3, #1
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	f43f af1d 	beq.w	8009512 <_printf_float+0xb6>
 80096d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80096dc:	ea59 0303 	orrs.w	r3, r9, r3
 80096e0:	d102      	bne.n	80096e8 <_printf_float+0x28c>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	07d9      	lsls	r1, r3, #31
 80096e6:	d5d7      	bpl.n	8009698 <_printf_float+0x23c>
 80096e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ec:	4631      	mov	r1, r6
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b8      	blx	r7
 80096f2:	3001      	adds	r0, #1
 80096f4:	f43f af0d 	beq.w	8009512 <_printf_float+0xb6>
 80096f8:	f04f 0a00 	mov.w	sl, #0
 80096fc:	f104 0b1a 	add.w	fp, r4, #26
 8009700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009702:	425b      	negs	r3, r3
 8009704:	4553      	cmp	r3, sl
 8009706:	dc01      	bgt.n	800970c <_printf_float+0x2b0>
 8009708:	464b      	mov	r3, r9
 800970a:	e793      	b.n	8009634 <_printf_float+0x1d8>
 800970c:	2301      	movs	r3, #1
 800970e:	465a      	mov	r2, fp
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f aefb 	beq.w	8009512 <_printf_float+0xb6>
 800971c:	f10a 0a01 	add.w	sl, sl, #1
 8009720:	e7ee      	b.n	8009700 <_printf_float+0x2a4>
 8009722:	bf00      	nop
 8009724:	7fefffff 	.word	0x7fefffff
 8009728:	0800d2f8 	.word	0x0800d2f8
 800972c:	0800d2f4 	.word	0x0800d2f4
 8009730:	0800d300 	.word	0x0800d300
 8009734:	0800d2fc 	.word	0x0800d2fc
 8009738:	0800d304 	.word	0x0800d304
 800973c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800973e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009742:	4553      	cmp	r3, sl
 8009744:	bfa8      	it	ge
 8009746:	4653      	movge	r3, sl
 8009748:	2b00      	cmp	r3, #0
 800974a:	4699      	mov	r9, r3
 800974c:	dc36      	bgt.n	80097bc <_printf_float+0x360>
 800974e:	f04f 0b00 	mov.w	fp, #0
 8009752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009756:	f104 021a 	add.w	r2, r4, #26
 800975a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800975c:	9306      	str	r3, [sp, #24]
 800975e:	eba3 0309 	sub.w	r3, r3, r9
 8009762:	455b      	cmp	r3, fp
 8009764:	dc31      	bgt.n	80097ca <_printf_float+0x36e>
 8009766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009768:	459a      	cmp	sl, r3
 800976a:	dc3a      	bgt.n	80097e2 <_printf_float+0x386>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	07da      	lsls	r2, r3, #31
 8009770:	d437      	bmi.n	80097e2 <_printf_float+0x386>
 8009772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009774:	ebaa 0903 	sub.w	r9, sl, r3
 8009778:	9b06      	ldr	r3, [sp, #24]
 800977a:	ebaa 0303 	sub.w	r3, sl, r3
 800977e:	4599      	cmp	r9, r3
 8009780:	bfa8      	it	ge
 8009782:	4699      	movge	r9, r3
 8009784:	f1b9 0f00 	cmp.w	r9, #0
 8009788:	dc33      	bgt.n	80097f2 <_printf_float+0x396>
 800978a:	f04f 0800 	mov.w	r8, #0
 800978e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009792:	f104 0b1a 	add.w	fp, r4, #26
 8009796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009798:	ebaa 0303 	sub.w	r3, sl, r3
 800979c:	eba3 0309 	sub.w	r3, r3, r9
 80097a0:	4543      	cmp	r3, r8
 80097a2:	f77f af79 	ble.w	8009698 <_printf_float+0x23c>
 80097a6:	2301      	movs	r3, #1
 80097a8:	465a      	mov	r2, fp
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	f43f aeae 	beq.w	8009512 <_printf_float+0xb6>
 80097b6:	f108 0801 	add.w	r8, r8, #1
 80097ba:	e7ec      	b.n	8009796 <_printf_float+0x33a>
 80097bc:	4642      	mov	r2, r8
 80097be:	4631      	mov	r1, r6
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b8      	blx	r7
 80097c4:	3001      	adds	r0, #1
 80097c6:	d1c2      	bne.n	800974e <_printf_float+0x2f2>
 80097c8:	e6a3      	b.n	8009512 <_printf_float+0xb6>
 80097ca:	2301      	movs	r3, #1
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	9206      	str	r2, [sp, #24]
 80097d2:	47b8      	blx	r7
 80097d4:	3001      	adds	r0, #1
 80097d6:	f43f ae9c 	beq.w	8009512 <_printf_float+0xb6>
 80097da:	9a06      	ldr	r2, [sp, #24]
 80097dc:	f10b 0b01 	add.w	fp, fp, #1
 80097e0:	e7bb      	b.n	800975a <_printf_float+0x2fe>
 80097e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097e6:	4631      	mov	r1, r6
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b8      	blx	r7
 80097ec:	3001      	adds	r0, #1
 80097ee:	d1c0      	bne.n	8009772 <_printf_float+0x316>
 80097f0:	e68f      	b.n	8009512 <_printf_float+0xb6>
 80097f2:	9a06      	ldr	r2, [sp, #24]
 80097f4:	464b      	mov	r3, r9
 80097f6:	4442      	add	r2, r8
 80097f8:	4631      	mov	r1, r6
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b8      	blx	r7
 80097fe:	3001      	adds	r0, #1
 8009800:	d1c3      	bne.n	800978a <_printf_float+0x32e>
 8009802:	e686      	b.n	8009512 <_printf_float+0xb6>
 8009804:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009808:	f1ba 0f01 	cmp.w	sl, #1
 800980c:	dc01      	bgt.n	8009812 <_printf_float+0x3b6>
 800980e:	07db      	lsls	r3, r3, #31
 8009810:	d536      	bpl.n	8009880 <_printf_float+0x424>
 8009812:	2301      	movs	r3, #1
 8009814:	4642      	mov	r2, r8
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	47b8      	blx	r7
 800981c:	3001      	adds	r0, #1
 800981e:	f43f ae78 	beq.w	8009512 <_printf_float+0xb6>
 8009822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009826:	4631      	mov	r1, r6
 8009828:	4628      	mov	r0, r5
 800982a:	47b8      	blx	r7
 800982c:	3001      	adds	r0, #1
 800982e:	f43f ae70 	beq.w	8009512 <_printf_float+0xb6>
 8009832:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009836:	2200      	movs	r2, #0
 8009838:	2300      	movs	r3, #0
 800983a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800983e:	f7f7 f963 	bl	8000b08 <__aeabi_dcmpeq>
 8009842:	b9c0      	cbnz	r0, 8009876 <_printf_float+0x41a>
 8009844:	4653      	mov	r3, sl
 8009846:	f108 0201 	add.w	r2, r8, #1
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	d10c      	bne.n	800986e <_printf_float+0x412>
 8009854:	e65d      	b.n	8009512 <_printf_float+0xb6>
 8009856:	2301      	movs	r3, #1
 8009858:	465a      	mov	r2, fp
 800985a:	4631      	mov	r1, r6
 800985c:	4628      	mov	r0, r5
 800985e:	47b8      	blx	r7
 8009860:	3001      	adds	r0, #1
 8009862:	f43f ae56 	beq.w	8009512 <_printf_float+0xb6>
 8009866:	f108 0801 	add.w	r8, r8, #1
 800986a:	45d0      	cmp	r8, sl
 800986c:	dbf3      	blt.n	8009856 <_printf_float+0x3fa>
 800986e:	464b      	mov	r3, r9
 8009870:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009874:	e6df      	b.n	8009636 <_printf_float+0x1da>
 8009876:	f04f 0800 	mov.w	r8, #0
 800987a:	f104 0b1a 	add.w	fp, r4, #26
 800987e:	e7f4      	b.n	800986a <_printf_float+0x40e>
 8009880:	2301      	movs	r3, #1
 8009882:	4642      	mov	r2, r8
 8009884:	e7e1      	b.n	800984a <_printf_float+0x3ee>
 8009886:	2301      	movs	r3, #1
 8009888:	464a      	mov	r2, r9
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f ae3e 	beq.w	8009512 <_printf_float+0xb6>
 8009896:	f108 0801 	add.w	r8, r8, #1
 800989a:	68e3      	ldr	r3, [r4, #12]
 800989c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800989e:	1a5b      	subs	r3, r3, r1
 80098a0:	4543      	cmp	r3, r8
 80098a2:	dcf0      	bgt.n	8009886 <_printf_float+0x42a>
 80098a4:	e6fc      	b.n	80096a0 <_printf_float+0x244>
 80098a6:	f04f 0800 	mov.w	r8, #0
 80098aa:	f104 0919 	add.w	r9, r4, #25
 80098ae:	e7f4      	b.n	800989a <_printf_float+0x43e>

080098b0 <_printf_common>:
 80098b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	4616      	mov	r6, r2
 80098b6:	4698      	mov	r8, r3
 80098b8:	688a      	ldr	r2, [r1, #8]
 80098ba:	690b      	ldr	r3, [r1, #16]
 80098bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098c0:	4293      	cmp	r3, r2
 80098c2:	bfb8      	it	lt
 80098c4:	4613      	movlt	r3, r2
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098cc:	4607      	mov	r7, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	b10a      	cbz	r2, 80098d6 <_printf_common+0x26>
 80098d2:	3301      	adds	r3, #1
 80098d4:	6033      	str	r3, [r6, #0]
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	0699      	lsls	r1, r3, #26
 80098da:	bf42      	ittt	mi
 80098dc:	6833      	ldrmi	r3, [r6, #0]
 80098de:	3302      	addmi	r3, #2
 80098e0:	6033      	strmi	r3, [r6, #0]
 80098e2:	6825      	ldr	r5, [r4, #0]
 80098e4:	f015 0506 	ands.w	r5, r5, #6
 80098e8:	d106      	bne.n	80098f8 <_printf_common+0x48>
 80098ea:	f104 0a19 	add.w	sl, r4, #25
 80098ee:	68e3      	ldr	r3, [r4, #12]
 80098f0:	6832      	ldr	r2, [r6, #0]
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	dc26      	bgt.n	8009946 <_printf_common+0x96>
 80098f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098fc:	6822      	ldr	r2, [r4, #0]
 80098fe:	3b00      	subs	r3, #0
 8009900:	bf18      	it	ne
 8009902:	2301      	movne	r3, #1
 8009904:	0692      	lsls	r2, r2, #26
 8009906:	d42b      	bmi.n	8009960 <_printf_common+0xb0>
 8009908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800990c:	4641      	mov	r1, r8
 800990e:	4638      	mov	r0, r7
 8009910:	47c8      	blx	r9
 8009912:	3001      	adds	r0, #1
 8009914:	d01e      	beq.n	8009954 <_printf_common+0xa4>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	6922      	ldr	r2, [r4, #16]
 800991a:	f003 0306 	and.w	r3, r3, #6
 800991e:	2b04      	cmp	r3, #4
 8009920:	bf02      	ittt	eq
 8009922:	68e5      	ldreq	r5, [r4, #12]
 8009924:	6833      	ldreq	r3, [r6, #0]
 8009926:	1aed      	subeq	r5, r5, r3
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	bf0c      	ite	eq
 800992c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009930:	2500      	movne	r5, #0
 8009932:	4293      	cmp	r3, r2
 8009934:	bfc4      	itt	gt
 8009936:	1a9b      	subgt	r3, r3, r2
 8009938:	18ed      	addgt	r5, r5, r3
 800993a:	2600      	movs	r6, #0
 800993c:	341a      	adds	r4, #26
 800993e:	42b5      	cmp	r5, r6
 8009940:	d11a      	bne.n	8009978 <_printf_common+0xc8>
 8009942:	2000      	movs	r0, #0
 8009944:	e008      	b.n	8009958 <_printf_common+0xa8>
 8009946:	2301      	movs	r3, #1
 8009948:	4652      	mov	r2, sl
 800994a:	4641      	mov	r1, r8
 800994c:	4638      	mov	r0, r7
 800994e:	47c8      	blx	r9
 8009950:	3001      	adds	r0, #1
 8009952:	d103      	bne.n	800995c <_printf_common+0xac>
 8009954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800995c:	3501      	adds	r5, #1
 800995e:	e7c6      	b.n	80098ee <_printf_common+0x3e>
 8009960:	18e1      	adds	r1, r4, r3
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	2030      	movs	r0, #48	@ 0x30
 8009966:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800996a:	4422      	add	r2, r4
 800996c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009970:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009974:	3302      	adds	r3, #2
 8009976:	e7c7      	b.n	8009908 <_printf_common+0x58>
 8009978:	2301      	movs	r3, #1
 800997a:	4622      	mov	r2, r4
 800997c:	4641      	mov	r1, r8
 800997e:	4638      	mov	r0, r7
 8009980:	47c8      	blx	r9
 8009982:	3001      	adds	r0, #1
 8009984:	d0e6      	beq.n	8009954 <_printf_common+0xa4>
 8009986:	3601      	adds	r6, #1
 8009988:	e7d9      	b.n	800993e <_printf_common+0x8e>
	...

0800998c <_printf_i>:
 800998c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	7e0f      	ldrb	r7, [r1, #24]
 8009992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009994:	2f78      	cmp	r7, #120	@ 0x78
 8009996:	4691      	mov	r9, r2
 8009998:	4680      	mov	r8, r0
 800999a:	460c      	mov	r4, r1
 800999c:	469a      	mov	sl, r3
 800999e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099a2:	d807      	bhi.n	80099b4 <_printf_i+0x28>
 80099a4:	2f62      	cmp	r7, #98	@ 0x62
 80099a6:	d80a      	bhi.n	80099be <_printf_i+0x32>
 80099a8:	2f00      	cmp	r7, #0
 80099aa:	f000 80d1 	beq.w	8009b50 <_printf_i+0x1c4>
 80099ae:	2f58      	cmp	r7, #88	@ 0x58
 80099b0:	f000 80b8 	beq.w	8009b24 <_printf_i+0x198>
 80099b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099bc:	e03a      	b.n	8009a34 <_printf_i+0xa8>
 80099be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099c2:	2b15      	cmp	r3, #21
 80099c4:	d8f6      	bhi.n	80099b4 <_printf_i+0x28>
 80099c6:	a101      	add	r1, pc, #4	@ (adr r1, 80099cc <_printf_i+0x40>)
 80099c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099cc:	08009a25 	.word	0x08009a25
 80099d0:	08009a39 	.word	0x08009a39
 80099d4:	080099b5 	.word	0x080099b5
 80099d8:	080099b5 	.word	0x080099b5
 80099dc:	080099b5 	.word	0x080099b5
 80099e0:	080099b5 	.word	0x080099b5
 80099e4:	08009a39 	.word	0x08009a39
 80099e8:	080099b5 	.word	0x080099b5
 80099ec:	080099b5 	.word	0x080099b5
 80099f0:	080099b5 	.word	0x080099b5
 80099f4:	080099b5 	.word	0x080099b5
 80099f8:	08009b37 	.word	0x08009b37
 80099fc:	08009a63 	.word	0x08009a63
 8009a00:	08009af1 	.word	0x08009af1
 8009a04:	080099b5 	.word	0x080099b5
 8009a08:	080099b5 	.word	0x080099b5
 8009a0c:	08009b59 	.word	0x08009b59
 8009a10:	080099b5 	.word	0x080099b5
 8009a14:	08009a63 	.word	0x08009a63
 8009a18:	080099b5 	.word	0x080099b5
 8009a1c:	080099b5 	.word	0x080099b5
 8009a20:	08009af9 	.word	0x08009af9
 8009a24:	6833      	ldr	r3, [r6, #0]
 8009a26:	1d1a      	adds	r2, r3, #4
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6032      	str	r2, [r6, #0]
 8009a2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a34:	2301      	movs	r3, #1
 8009a36:	e09c      	b.n	8009b72 <_printf_i+0x1e6>
 8009a38:	6833      	ldr	r3, [r6, #0]
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	1d19      	adds	r1, r3, #4
 8009a3e:	6031      	str	r1, [r6, #0]
 8009a40:	0606      	lsls	r6, r0, #24
 8009a42:	d501      	bpl.n	8009a48 <_printf_i+0xbc>
 8009a44:	681d      	ldr	r5, [r3, #0]
 8009a46:	e003      	b.n	8009a50 <_printf_i+0xc4>
 8009a48:	0645      	lsls	r5, r0, #25
 8009a4a:	d5fb      	bpl.n	8009a44 <_printf_i+0xb8>
 8009a4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	da03      	bge.n	8009a5c <_printf_i+0xd0>
 8009a54:	232d      	movs	r3, #45	@ 0x2d
 8009a56:	426d      	negs	r5, r5
 8009a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a5c:	4858      	ldr	r0, [pc, #352]	@ (8009bc0 <_printf_i+0x234>)
 8009a5e:	230a      	movs	r3, #10
 8009a60:	e011      	b.n	8009a86 <_printf_i+0xfa>
 8009a62:	6821      	ldr	r1, [r4, #0]
 8009a64:	6833      	ldr	r3, [r6, #0]
 8009a66:	0608      	lsls	r0, r1, #24
 8009a68:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a6c:	d402      	bmi.n	8009a74 <_printf_i+0xe8>
 8009a6e:	0649      	lsls	r1, r1, #25
 8009a70:	bf48      	it	mi
 8009a72:	b2ad      	uxthmi	r5, r5
 8009a74:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a76:	4852      	ldr	r0, [pc, #328]	@ (8009bc0 <_printf_i+0x234>)
 8009a78:	6033      	str	r3, [r6, #0]
 8009a7a:	bf14      	ite	ne
 8009a7c:	230a      	movne	r3, #10
 8009a7e:	2308      	moveq	r3, #8
 8009a80:	2100      	movs	r1, #0
 8009a82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a86:	6866      	ldr	r6, [r4, #4]
 8009a88:	60a6      	str	r6, [r4, #8]
 8009a8a:	2e00      	cmp	r6, #0
 8009a8c:	db05      	blt.n	8009a9a <_printf_i+0x10e>
 8009a8e:	6821      	ldr	r1, [r4, #0]
 8009a90:	432e      	orrs	r6, r5
 8009a92:	f021 0104 	bic.w	r1, r1, #4
 8009a96:	6021      	str	r1, [r4, #0]
 8009a98:	d04b      	beq.n	8009b32 <_printf_i+0x1a6>
 8009a9a:	4616      	mov	r6, r2
 8009a9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009aa0:	fb03 5711 	mls	r7, r3, r1, r5
 8009aa4:	5dc7      	ldrb	r7, [r0, r7]
 8009aa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aaa:	462f      	mov	r7, r5
 8009aac:	42bb      	cmp	r3, r7
 8009aae:	460d      	mov	r5, r1
 8009ab0:	d9f4      	bls.n	8009a9c <_printf_i+0x110>
 8009ab2:	2b08      	cmp	r3, #8
 8009ab4:	d10b      	bne.n	8009ace <_printf_i+0x142>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	07df      	lsls	r7, r3, #31
 8009aba:	d508      	bpl.n	8009ace <_printf_i+0x142>
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	6861      	ldr	r1, [r4, #4]
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	bfde      	ittt	le
 8009ac4:	2330      	movle	r3, #48	@ 0x30
 8009ac6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009aca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009ace:	1b92      	subs	r2, r2, r6
 8009ad0:	6122      	str	r2, [r4, #16]
 8009ad2:	f8cd a000 	str.w	sl, [sp]
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	aa03      	add	r2, sp, #12
 8009ada:	4621      	mov	r1, r4
 8009adc:	4640      	mov	r0, r8
 8009ade:	f7ff fee7 	bl	80098b0 <_printf_common>
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d14a      	bne.n	8009b7c <_printf_i+0x1f0>
 8009ae6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009aea:	b004      	add	sp, #16
 8009aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	f043 0320 	orr.w	r3, r3, #32
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	4832      	ldr	r0, [pc, #200]	@ (8009bc4 <_printf_i+0x238>)
 8009afa:	2778      	movs	r7, #120	@ 0x78
 8009afc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	6831      	ldr	r1, [r6, #0]
 8009b04:	061f      	lsls	r7, r3, #24
 8009b06:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b0a:	d402      	bmi.n	8009b12 <_printf_i+0x186>
 8009b0c:	065f      	lsls	r7, r3, #25
 8009b0e:	bf48      	it	mi
 8009b10:	b2ad      	uxthmi	r5, r5
 8009b12:	6031      	str	r1, [r6, #0]
 8009b14:	07d9      	lsls	r1, r3, #31
 8009b16:	bf44      	itt	mi
 8009b18:	f043 0320 	orrmi.w	r3, r3, #32
 8009b1c:	6023      	strmi	r3, [r4, #0]
 8009b1e:	b11d      	cbz	r5, 8009b28 <_printf_i+0x19c>
 8009b20:	2310      	movs	r3, #16
 8009b22:	e7ad      	b.n	8009a80 <_printf_i+0xf4>
 8009b24:	4826      	ldr	r0, [pc, #152]	@ (8009bc0 <_printf_i+0x234>)
 8009b26:	e7e9      	b.n	8009afc <_printf_i+0x170>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	f023 0320 	bic.w	r3, r3, #32
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	e7f6      	b.n	8009b20 <_printf_i+0x194>
 8009b32:	4616      	mov	r6, r2
 8009b34:	e7bd      	b.n	8009ab2 <_printf_i+0x126>
 8009b36:	6833      	ldr	r3, [r6, #0]
 8009b38:	6825      	ldr	r5, [r4, #0]
 8009b3a:	6961      	ldr	r1, [r4, #20]
 8009b3c:	1d18      	adds	r0, r3, #4
 8009b3e:	6030      	str	r0, [r6, #0]
 8009b40:	062e      	lsls	r6, r5, #24
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	d501      	bpl.n	8009b4a <_printf_i+0x1be>
 8009b46:	6019      	str	r1, [r3, #0]
 8009b48:	e002      	b.n	8009b50 <_printf_i+0x1c4>
 8009b4a:	0668      	lsls	r0, r5, #25
 8009b4c:	d5fb      	bpl.n	8009b46 <_printf_i+0x1ba>
 8009b4e:	8019      	strh	r1, [r3, #0]
 8009b50:	2300      	movs	r3, #0
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	4616      	mov	r6, r2
 8009b56:	e7bc      	b.n	8009ad2 <_printf_i+0x146>
 8009b58:	6833      	ldr	r3, [r6, #0]
 8009b5a:	1d1a      	adds	r2, r3, #4
 8009b5c:	6032      	str	r2, [r6, #0]
 8009b5e:	681e      	ldr	r6, [r3, #0]
 8009b60:	6862      	ldr	r2, [r4, #4]
 8009b62:	2100      	movs	r1, #0
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7f6 fb53 	bl	8000210 <memchr>
 8009b6a:	b108      	cbz	r0, 8009b70 <_printf_i+0x1e4>
 8009b6c:	1b80      	subs	r0, r0, r6
 8009b6e:	6060      	str	r0, [r4, #4]
 8009b70:	6863      	ldr	r3, [r4, #4]
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	2300      	movs	r3, #0
 8009b76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b7a:	e7aa      	b.n	8009ad2 <_printf_i+0x146>
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	4632      	mov	r2, r6
 8009b80:	4649      	mov	r1, r9
 8009b82:	4640      	mov	r0, r8
 8009b84:	47d0      	blx	sl
 8009b86:	3001      	adds	r0, #1
 8009b88:	d0ad      	beq.n	8009ae6 <_printf_i+0x15a>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	079b      	lsls	r3, r3, #30
 8009b8e:	d413      	bmi.n	8009bb8 <_printf_i+0x22c>
 8009b90:	68e0      	ldr	r0, [r4, #12]
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	4298      	cmp	r0, r3
 8009b96:	bfb8      	it	lt
 8009b98:	4618      	movlt	r0, r3
 8009b9a:	e7a6      	b.n	8009aea <_printf_i+0x15e>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	47d0      	blx	sl
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d09d      	beq.n	8009ae6 <_printf_i+0x15a>
 8009baa:	3501      	adds	r5, #1
 8009bac:	68e3      	ldr	r3, [r4, #12]
 8009bae:	9903      	ldr	r1, [sp, #12]
 8009bb0:	1a5b      	subs	r3, r3, r1
 8009bb2:	42ab      	cmp	r3, r5
 8009bb4:	dcf2      	bgt.n	8009b9c <_printf_i+0x210>
 8009bb6:	e7eb      	b.n	8009b90 <_printf_i+0x204>
 8009bb8:	2500      	movs	r5, #0
 8009bba:	f104 0619 	add.w	r6, r4, #25
 8009bbe:	e7f5      	b.n	8009bac <_printf_i+0x220>
 8009bc0:	0800d306 	.word	0x0800d306
 8009bc4:	0800d317 	.word	0x0800d317

08009bc8 <std>:
 8009bc8:	2300      	movs	r3, #0
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	4604      	mov	r4, r0
 8009bce:	e9c0 3300 	strd	r3, r3, [r0]
 8009bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bd6:	6083      	str	r3, [r0, #8]
 8009bd8:	8181      	strh	r1, [r0, #12]
 8009bda:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bdc:	81c2      	strh	r2, [r0, #14]
 8009bde:	6183      	str	r3, [r0, #24]
 8009be0:	4619      	mov	r1, r3
 8009be2:	2208      	movs	r2, #8
 8009be4:	305c      	adds	r0, #92	@ 0x5c
 8009be6:	f000 ff31 	bl	800aa4c <memset>
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <std+0x58>)
 8009bec:	6263      	str	r3, [r4, #36]	@ 0x24
 8009bee:	4b0d      	ldr	r3, [pc, #52]	@ (8009c24 <std+0x5c>)
 8009bf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c28 <std+0x60>)
 8009bf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c2c <std+0x64>)
 8009bf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009c30 <std+0x68>)
 8009bfc:	6224      	str	r4, [r4, #32]
 8009bfe:	429c      	cmp	r4, r3
 8009c00:	d006      	beq.n	8009c10 <std+0x48>
 8009c02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c06:	4294      	cmp	r4, r2
 8009c08:	d002      	beq.n	8009c10 <std+0x48>
 8009c0a:	33d0      	adds	r3, #208	@ 0xd0
 8009c0c:	429c      	cmp	r4, r3
 8009c0e:	d105      	bne.n	8009c1c <std+0x54>
 8009c10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c18:	f000 bf5c 	b.w	800aad4 <__retarget_lock_init_recursive>
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	bf00      	nop
 8009c20:	0800ccf1 	.word	0x0800ccf1
 8009c24:	0800cd13 	.word	0x0800cd13
 8009c28:	0800cd4b 	.word	0x0800cd4b
 8009c2c:	0800cd6f 	.word	0x0800cd6f
 8009c30:	20004cfc 	.word	0x20004cfc

08009c34 <stdio_exit_handler>:
 8009c34:	4a02      	ldr	r2, [pc, #8]	@ (8009c40 <stdio_exit_handler+0xc>)
 8009c36:	4903      	ldr	r1, [pc, #12]	@ (8009c44 <stdio_exit_handler+0x10>)
 8009c38:	4803      	ldr	r0, [pc, #12]	@ (8009c48 <stdio_exit_handler+0x14>)
 8009c3a:	f000 be79 	b.w	800a930 <_fwalk_sglue>
 8009c3e:	bf00      	nop
 8009c40:	20000010 	.word	0x20000010
 8009c44:	0800c335 	.word	0x0800c335
 8009c48:	2000018c 	.word	0x2000018c

08009c4c <cleanup_stdio>:
 8009c4c:	6841      	ldr	r1, [r0, #4]
 8009c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c80 <cleanup_stdio+0x34>)
 8009c50:	4299      	cmp	r1, r3
 8009c52:	b510      	push	{r4, lr}
 8009c54:	4604      	mov	r4, r0
 8009c56:	d001      	beq.n	8009c5c <cleanup_stdio+0x10>
 8009c58:	f002 fb6c 	bl	800c334 <_fflush_r>
 8009c5c:	68a1      	ldr	r1, [r4, #8]
 8009c5e:	4b09      	ldr	r3, [pc, #36]	@ (8009c84 <cleanup_stdio+0x38>)
 8009c60:	4299      	cmp	r1, r3
 8009c62:	d002      	beq.n	8009c6a <cleanup_stdio+0x1e>
 8009c64:	4620      	mov	r0, r4
 8009c66:	f002 fb65 	bl	800c334 <_fflush_r>
 8009c6a:	68e1      	ldr	r1, [r4, #12]
 8009c6c:	4b06      	ldr	r3, [pc, #24]	@ (8009c88 <cleanup_stdio+0x3c>)
 8009c6e:	4299      	cmp	r1, r3
 8009c70:	d004      	beq.n	8009c7c <cleanup_stdio+0x30>
 8009c72:	4620      	mov	r0, r4
 8009c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c78:	f002 bb5c 	b.w	800c334 <_fflush_r>
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	bf00      	nop
 8009c80:	20004cfc 	.word	0x20004cfc
 8009c84:	20004d64 	.word	0x20004d64
 8009c88:	20004dcc 	.word	0x20004dcc

08009c8c <global_stdio_init.part.0>:
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009cbc <global_stdio_init.part.0+0x30>)
 8009c90:	4c0b      	ldr	r4, [pc, #44]	@ (8009cc0 <global_stdio_init.part.0+0x34>)
 8009c92:	4a0c      	ldr	r2, [pc, #48]	@ (8009cc4 <global_stdio_init.part.0+0x38>)
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	4620      	mov	r0, r4
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2104      	movs	r1, #4
 8009c9c:	f7ff ff94 	bl	8009bc8 <std>
 8009ca0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	2109      	movs	r1, #9
 8009ca8:	f7ff ff8e 	bl	8009bc8 <std>
 8009cac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb6:	2112      	movs	r1, #18
 8009cb8:	f7ff bf86 	b.w	8009bc8 <std>
 8009cbc:	20004e34 	.word	0x20004e34
 8009cc0:	20004cfc 	.word	0x20004cfc
 8009cc4:	08009c35 	.word	0x08009c35

08009cc8 <__sfp_lock_acquire>:
 8009cc8:	4801      	ldr	r0, [pc, #4]	@ (8009cd0 <__sfp_lock_acquire+0x8>)
 8009cca:	f000 bf04 	b.w	800aad6 <__retarget_lock_acquire_recursive>
 8009cce:	bf00      	nop
 8009cd0:	20004e39 	.word	0x20004e39

08009cd4 <__sfp_lock_release>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	@ (8009cdc <__sfp_lock_release+0x8>)
 8009cd6:	f000 beff 	b.w	800aad8 <__retarget_lock_release_recursive>
 8009cda:	bf00      	nop
 8009cdc:	20004e39 	.word	0x20004e39

08009ce0 <__sinit>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	f7ff fff0 	bl	8009cc8 <__sfp_lock_acquire>
 8009ce8:	6a23      	ldr	r3, [r4, #32]
 8009cea:	b11b      	cbz	r3, 8009cf4 <__sinit+0x14>
 8009cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf0:	f7ff bff0 	b.w	8009cd4 <__sfp_lock_release>
 8009cf4:	4b04      	ldr	r3, [pc, #16]	@ (8009d08 <__sinit+0x28>)
 8009cf6:	6223      	str	r3, [r4, #32]
 8009cf8:	4b04      	ldr	r3, [pc, #16]	@ (8009d0c <__sinit+0x2c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1f5      	bne.n	8009cec <__sinit+0xc>
 8009d00:	f7ff ffc4 	bl	8009c8c <global_stdio_init.part.0>
 8009d04:	e7f2      	b.n	8009cec <__sinit+0xc>
 8009d06:	bf00      	nop
 8009d08:	08009c4d 	.word	0x08009c4d
 8009d0c:	20004e34 	.word	0x20004e34

08009d10 <sulp>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4604      	mov	r4, r0
 8009d14:	460d      	mov	r5, r1
 8009d16:	ec45 4b10 	vmov	d0, r4, r5
 8009d1a:	4616      	mov	r6, r2
 8009d1c:	f002 feaa 	bl	800ca74 <__ulp>
 8009d20:	ec51 0b10 	vmov	r0, r1, d0
 8009d24:	b17e      	cbz	r6, 8009d46 <sulp+0x36>
 8009d26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	dd09      	ble.n	8009d46 <sulp+0x36>
 8009d32:	051b      	lsls	r3, r3, #20
 8009d34:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009d38:	2400      	movs	r4, #0
 8009d3a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009d3e:	4622      	mov	r2, r4
 8009d40:	462b      	mov	r3, r5
 8009d42:	f7f6 fc79 	bl	8000638 <__aeabi_dmul>
 8009d46:	ec41 0b10 	vmov	d0, r0, r1
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	0000      	movs	r0, r0
	...

08009d50 <_strtod_l>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	b09f      	sub	sp, #124	@ 0x7c
 8009d56:	460c      	mov	r4, r1
 8009d58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009d5e:	9005      	str	r0, [sp, #20]
 8009d60:	f04f 0a00 	mov.w	sl, #0
 8009d64:	f04f 0b00 	mov.w	fp, #0
 8009d68:	460a      	mov	r2, r1
 8009d6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d6c:	7811      	ldrb	r1, [r2, #0]
 8009d6e:	292b      	cmp	r1, #43	@ 0x2b
 8009d70:	d04a      	beq.n	8009e08 <_strtod_l+0xb8>
 8009d72:	d838      	bhi.n	8009de6 <_strtod_l+0x96>
 8009d74:	290d      	cmp	r1, #13
 8009d76:	d832      	bhi.n	8009dde <_strtod_l+0x8e>
 8009d78:	2908      	cmp	r1, #8
 8009d7a:	d832      	bhi.n	8009de2 <_strtod_l+0x92>
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	d03b      	beq.n	8009df8 <_strtod_l+0xa8>
 8009d80:	2200      	movs	r2, #0
 8009d82:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009d86:	782a      	ldrb	r2, [r5, #0]
 8009d88:	2a30      	cmp	r2, #48	@ 0x30
 8009d8a:	f040 80b2 	bne.w	8009ef2 <_strtod_l+0x1a2>
 8009d8e:	786a      	ldrb	r2, [r5, #1]
 8009d90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d94:	2a58      	cmp	r2, #88	@ 0x58
 8009d96:	d16e      	bne.n	8009e76 <_strtod_l+0x126>
 8009d98:	9302      	str	r3, [sp, #8]
 8009d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	4a8f      	ldr	r2, [pc, #572]	@ (8009fe0 <_strtod_l+0x290>)
 8009da4:	9805      	ldr	r0, [sp, #20]
 8009da6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009da8:	a919      	add	r1, sp, #100	@ 0x64
 8009daa:	f001 fd71 	bl	800b890 <__gethex>
 8009dae:	f010 060f 	ands.w	r6, r0, #15
 8009db2:	4604      	mov	r4, r0
 8009db4:	d005      	beq.n	8009dc2 <_strtod_l+0x72>
 8009db6:	2e06      	cmp	r6, #6
 8009db8:	d128      	bne.n	8009e0c <_strtod_l+0xbc>
 8009dba:	3501      	adds	r5, #1
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9519      	str	r5, [sp, #100]	@ 0x64
 8009dc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8009dc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f040 858e 	bne.w	800a8e6 <_strtod_l+0xb96>
 8009dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dcc:	b1cb      	cbz	r3, 8009e02 <_strtod_l+0xb2>
 8009dce:	4652      	mov	r2, sl
 8009dd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009dd4:	ec43 2b10 	vmov	d0, r2, r3
 8009dd8:	b01f      	add	sp, #124	@ 0x7c
 8009dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dde:	2920      	cmp	r1, #32
 8009de0:	d1ce      	bne.n	8009d80 <_strtod_l+0x30>
 8009de2:	3201      	adds	r2, #1
 8009de4:	e7c1      	b.n	8009d6a <_strtod_l+0x1a>
 8009de6:	292d      	cmp	r1, #45	@ 0x2d
 8009de8:	d1ca      	bne.n	8009d80 <_strtod_l+0x30>
 8009dea:	2101      	movs	r1, #1
 8009dec:	910e      	str	r1, [sp, #56]	@ 0x38
 8009dee:	1c51      	adds	r1, r2, #1
 8009df0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009df2:	7852      	ldrb	r2, [r2, #1]
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	d1c5      	bne.n	8009d84 <_strtod_l+0x34>
 8009df8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009dfa:	9419      	str	r4, [sp, #100]	@ 0x64
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 8570 	bne.w	800a8e2 <_strtod_l+0xb92>
 8009e02:	4652      	mov	r2, sl
 8009e04:	465b      	mov	r3, fp
 8009e06:	e7e5      	b.n	8009dd4 <_strtod_l+0x84>
 8009e08:	2100      	movs	r1, #0
 8009e0a:	e7ef      	b.n	8009dec <_strtod_l+0x9c>
 8009e0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e0e:	b13a      	cbz	r2, 8009e20 <_strtod_l+0xd0>
 8009e10:	2135      	movs	r1, #53	@ 0x35
 8009e12:	a81c      	add	r0, sp, #112	@ 0x70
 8009e14:	f002 ff28 	bl	800cc68 <__copybits>
 8009e18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e1a:	9805      	ldr	r0, [sp, #20]
 8009e1c:	f002 fafe 	bl	800c41c <_Bfree>
 8009e20:	3e01      	subs	r6, #1
 8009e22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009e24:	2e04      	cmp	r6, #4
 8009e26:	d806      	bhi.n	8009e36 <_strtod_l+0xe6>
 8009e28:	e8df f006 	tbb	[pc, r6]
 8009e2c:	201d0314 	.word	0x201d0314
 8009e30:	14          	.byte	0x14
 8009e31:	00          	.byte	0x00
 8009e32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009e36:	05e1      	lsls	r1, r4, #23
 8009e38:	bf48      	it	mi
 8009e3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009e3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e42:	0d1b      	lsrs	r3, r3, #20
 8009e44:	051b      	lsls	r3, r3, #20
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1bb      	bne.n	8009dc2 <_strtod_l+0x72>
 8009e4a:	f000 fe19 	bl	800aa80 <__errno>
 8009e4e:	2322      	movs	r3, #34	@ 0x22
 8009e50:	6003      	str	r3, [r0, #0]
 8009e52:	e7b6      	b.n	8009dc2 <_strtod_l+0x72>
 8009e54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009e58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009e5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009e60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e64:	e7e7      	b.n	8009e36 <_strtod_l+0xe6>
 8009e66:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009fe8 <_strtod_l+0x298>
 8009e6a:	e7e4      	b.n	8009e36 <_strtod_l+0xe6>
 8009e6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009e70:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009e74:	e7df      	b.n	8009e36 <_strtod_l+0xe6>
 8009e76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e78:	1c5a      	adds	r2, r3, #1
 8009e7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e7c:	785b      	ldrb	r3, [r3, #1]
 8009e7e:	2b30      	cmp	r3, #48	@ 0x30
 8009e80:	d0f9      	beq.n	8009e76 <_strtod_l+0x126>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d09d      	beq.n	8009dc2 <_strtod_l+0x72>
 8009e86:	2301      	movs	r3, #1
 8009e88:	2700      	movs	r7, #0
 8009e8a:	9308      	str	r3, [sp, #32]
 8009e8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e90:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009e92:	46b9      	mov	r9, r7
 8009e94:	220a      	movs	r2, #10
 8009e96:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009e98:	7805      	ldrb	r5, [r0, #0]
 8009e9a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009e9e:	b2d9      	uxtb	r1, r3
 8009ea0:	2909      	cmp	r1, #9
 8009ea2:	d928      	bls.n	8009ef6 <_strtod_l+0x1a6>
 8009ea4:	494f      	ldr	r1, [pc, #316]	@ (8009fe4 <_strtod_l+0x294>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f000 fdd8 	bl	800aa5c <strncmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d032      	beq.n	8009f16 <_strtod_l+0x1c6>
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009eb6:	464d      	mov	r5, r9
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2a65      	cmp	r2, #101	@ 0x65
 8009ebc:	d001      	beq.n	8009ec2 <_strtod_l+0x172>
 8009ebe:	2a45      	cmp	r2, #69	@ 0x45
 8009ec0:	d114      	bne.n	8009eec <_strtod_l+0x19c>
 8009ec2:	b91d      	cbnz	r5, 8009ecc <_strtod_l+0x17c>
 8009ec4:	9a08      	ldr	r2, [sp, #32]
 8009ec6:	4302      	orrs	r2, r0
 8009ec8:	d096      	beq.n	8009df8 <_strtod_l+0xa8>
 8009eca:	2500      	movs	r5, #0
 8009ecc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009ece:	1c62      	adds	r2, r4, #1
 8009ed0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ed2:	7862      	ldrb	r2, [r4, #1]
 8009ed4:	2a2b      	cmp	r2, #43	@ 0x2b
 8009ed6:	d07a      	beq.n	8009fce <_strtod_l+0x27e>
 8009ed8:	2a2d      	cmp	r2, #45	@ 0x2d
 8009eda:	d07e      	beq.n	8009fda <_strtod_l+0x28a>
 8009edc:	f04f 0c00 	mov.w	ip, #0
 8009ee0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009ee4:	2909      	cmp	r1, #9
 8009ee6:	f240 8085 	bls.w	8009ff4 <_strtod_l+0x2a4>
 8009eea:	9419      	str	r4, [sp, #100]	@ 0x64
 8009eec:	f04f 0800 	mov.w	r8, #0
 8009ef0:	e0a5      	b.n	800a03e <_strtod_l+0x2ee>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e7c8      	b.n	8009e88 <_strtod_l+0x138>
 8009ef6:	f1b9 0f08 	cmp.w	r9, #8
 8009efa:	bfd8      	it	le
 8009efc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009efe:	f100 0001 	add.w	r0, r0, #1
 8009f02:	bfda      	itte	le
 8009f04:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f08:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009f0a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009f0e:	f109 0901 	add.w	r9, r9, #1
 8009f12:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f14:	e7bf      	b.n	8009e96 <_strtod_l+0x146>
 8009f16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f1c:	785a      	ldrb	r2, [r3, #1]
 8009f1e:	f1b9 0f00 	cmp.w	r9, #0
 8009f22:	d03b      	beq.n	8009f9c <_strtod_l+0x24c>
 8009f24:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f26:	464d      	mov	r5, r9
 8009f28:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009f2c:	2b09      	cmp	r3, #9
 8009f2e:	d912      	bls.n	8009f56 <_strtod_l+0x206>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e7c2      	b.n	8009eba <_strtod_l+0x16a>
 8009f34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f3a:	785a      	ldrb	r2, [r3, #1]
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	2a30      	cmp	r2, #48	@ 0x30
 8009f40:	d0f8      	beq.n	8009f34 <_strtod_l+0x1e4>
 8009f42:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009f46:	2b08      	cmp	r3, #8
 8009f48:	f200 84d2 	bhi.w	800a8f0 <_strtod_l+0xba0>
 8009f4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f4e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f50:	2000      	movs	r0, #0
 8009f52:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f54:	4605      	mov	r5, r0
 8009f56:	3a30      	subs	r2, #48	@ 0x30
 8009f58:	f100 0301 	add.w	r3, r0, #1
 8009f5c:	d018      	beq.n	8009f90 <_strtod_l+0x240>
 8009f5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f60:	4419      	add	r1, r3
 8009f62:	910a      	str	r1, [sp, #40]	@ 0x28
 8009f64:	462e      	mov	r6, r5
 8009f66:	f04f 0e0a 	mov.w	lr, #10
 8009f6a:	1c71      	adds	r1, r6, #1
 8009f6c:	eba1 0c05 	sub.w	ip, r1, r5
 8009f70:	4563      	cmp	r3, ip
 8009f72:	dc15      	bgt.n	8009fa0 <_strtod_l+0x250>
 8009f74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009f78:	182b      	adds	r3, r5, r0
 8009f7a:	2b08      	cmp	r3, #8
 8009f7c:	f105 0501 	add.w	r5, r5, #1
 8009f80:	4405      	add	r5, r0
 8009f82:	dc1a      	bgt.n	8009fba <_strtod_l+0x26a>
 8009f84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f86:	230a      	movs	r3, #10
 8009f88:	fb03 2301 	mla	r3, r3, r1, r2
 8009f8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f8e:	2300      	movs	r3, #0
 8009f90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f92:	1c51      	adds	r1, r2, #1
 8009f94:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f96:	7852      	ldrb	r2, [r2, #1]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	e7c5      	b.n	8009f28 <_strtod_l+0x1d8>
 8009f9c:	4648      	mov	r0, r9
 8009f9e:	e7ce      	b.n	8009f3e <_strtod_l+0x1ee>
 8009fa0:	2e08      	cmp	r6, #8
 8009fa2:	dc05      	bgt.n	8009fb0 <_strtod_l+0x260>
 8009fa4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009fa6:	fb0e f606 	mul.w	r6, lr, r6
 8009faa:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009fac:	460e      	mov	r6, r1
 8009fae:	e7dc      	b.n	8009f6a <_strtod_l+0x21a>
 8009fb0:	2910      	cmp	r1, #16
 8009fb2:	bfd8      	it	le
 8009fb4:	fb0e f707 	mulle.w	r7, lr, r7
 8009fb8:	e7f8      	b.n	8009fac <_strtod_l+0x25c>
 8009fba:	2b0f      	cmp	r3, #15
 8009fbc:	bfdc      	itt	le
 8009fbe:	230a      	movle	r3, #10
 8009fc0:	fb03 2707 	mlale	r7, r3, r7, r2
 8009fc4:	e7e3      	b.n	8009f8e <_strtod_l+0x23e>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e77a      	b.n	8009ec4 <_strtod_l+0x174>
 8009fce:	f04f 0c00 	mov.w	ip, #0
 8009fd2:	1ca2      	adds	r2, r4, #2
 8009fd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fd6:	78a2      	ldrb	r2, [r4, #2]
 8009fd8:	e782      	b.n	8009ee0 <_strtod_l+0x190>
 8009fda:	f04f 0c01 	mov.w	ip, #1
 8009fde:	e7f8      	b.n	8009fd2 <_strtod_l+0x282>
 8009fe0:	0800d4dc 	.word	0x0800d4dc
 8009fe4:	0800d328 	.word	0x0800d328
 8009fe8:	7ff00000 	.word	0x7ff00000
 8009fec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009fee:	1c51      	adds	r1, r2, #1
 8009ff0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009ff2:	7852      	ldrb	r2, [r2, #1]
 8009ff4:	2a30      	cmp	r2, #48	@ 0x30
 8009ff6:	d0f9      	beq.n	8009fec <_strtod_l+0x29c>
 8009ff8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ffc:	2908      	cmp	r1, #8
 8009ffe:	f63f af75 	bhi.w	8009eec <_strtod_l+0x19c>
 800a002:	3a30      	subs	r2, #48	@ 0x30
 800a004:	9209      	str	r2, [sp, #36]	@ 0x24
 800a006:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a008:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a00a:	f04f 080a 	mov.w	r8, #10
 800a00e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a010:	1c56      	adds	r6, r2, #1
 800a012:	9619      	str	r6, [sp, #100]	@ 0x64
 800a014:	7852      	ldrb	r2, [r2, #1]
 800a016:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a01a:	f1be 0f09 	cmp.w	lr, #9
 800a01e:	d939      	bls.n	800a094 <_strtod_l+0x344>
 800a020:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a022:	1a76      	subs	r6, r6, r1
 800a024:	2e08      	cmp	r6, #8
 800a026:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a02a:	dc03      	bgt.n	800a034 <_strtod_l+0x2e4>
 800a02c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a02e:	4588      	cmp	r8, r1
 800a030:	bfa8      	it	ge
 800a032:	4688      	movge	r8, r1
 800a034:	f1bc 0f00 	cmp.w	ip, #0
 800a038:	d001      	beq.n	800a03e <_strtod_l+0x2ee>
 800a03a:	f1c8 0800 	rsb	r8, r8, #0
 800a03e:	2d00      	cmp	r5, #0
 800a040:	d14e      	bne.n	800a0e0 <_strtod_l+0x390>
 800a042:	9908      	ldr	r1, [sp, #32]
 800a044:	4308      	orrs	r0, r1
 800a046:	f47f aebc 	bne.w	8009dc2 <_strtod_l+0x72>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f47f aed4 	bne.w	8009df8 <_strtod_l+0xa8>
 800a050:	2a69      	cmp	r2, #105	@ 0x69
 800a052:	d028      	beq.n	800a0a6 <_strtod_l+0x356>
 800a054:	dc25      	bgt.n	800a0a2 <_strtod_l+0x352>
 800a056:	2a49      	cmp	r2, #73	@ 0x49
 800a058:	d025      	beq.n	800a0a6 <_strtod_l+0x356>
 800a05a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a05c:	f47f aecc 	bne.w	8009df8 <_strtod_l+0xa8>
 800a060:	499a      	ldr	r1, [pc, #616]	@ (800a2cc <_strtod_l+0x57c>)
 800a062:	a819      	add	r0, sp, #100	@ 0x64
 800a064:	f001 fe36 	bl	800bcd4 <__match>
 800a068:	2800      	cmp	r0, #0
 800a06a:	f43f aec5 	beq.w	8009df8 <_strtod_l+0xa8>
 800a06e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	2b28      	cmp	r3, #40	@ 0x28
 800a074:	d12e      	bne.n	800a0d4 <_strtod_l+0x384>
 800a076:	4996      	ldr	r1, [pc, #600]	@ (800a2d0 <_strtod_l+0x580>)
 800a078:	aa1c      	add	r2, sp, #112	@ 0x70
 800a07a:	a819      	add	r0, sp, #100	@ 0x64
 800a07c:	f001 fe3e 	bl	800bcfc <__hexnan>
 800a080:	2805      	cmp	r0, #5
 800a082:	d127      	bne.n	800a0d4 <_strtod_l+0x384>
 800a084:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a086:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a08a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a08e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a092:	e696      	b.n	8009dc2 <_strtod_l+0x72>
 800a094:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a096:	fb08 2101 	mla	r1, r8, r1, r2
 800a09a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a09e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0a0:	e7b5      	b.n	800a00e <_strtod_l+0x2be>
 800a0a2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a0a4:	e7da      	b.n	800a05c <_strtod_l+0x30c>
 800a0a6:	498b      	ldr	r1, [pc, #556]	@ (800a2d4 <_strtod_l+0x584>)
 800a0a8:	a819      	add	r0, sp, #100	@ 0x64
 800a0aa:	f001 fe13 	bl	800bcd4 <__match>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f43f aea2 	beq.w	8009df8 <_strtod_l+0xa8>
 800a0b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0b6:	4988      	ldr	r1, [pc, #544]	@ (800a2d8 <_strtod_l+0x588>)
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	a819      	add	r0, sp, #100	@ 0x64
 800a0bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a0be:	f001 fe09 	bl	800bcd4 <__match>
 800a0c2:	b910      	cbnz	r0, 800a0ca <_strtod_l+0x37a>
 800a0c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a0ca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a2e8 <_strtod_l+0x598>
 800a0ce:	f04f 0a00 	mov.w	sl, #0
 800a0d2:	e676      	b.n	8009dc2 <_strtod_l+0x72>
 800a0d4:	4881      	ldr	r0, [pc, #516]	@ (800a2dc <_strtod_l+0x58c>)
 800a0d6:	f000 fd13 	bl	800ab00 <nan>
 800a0da:	ec5b ab10 	vmov	sl, fp, d0
 800a0de:	e670      	b.n	8009dc2 <_strtod_l+0x72>
 800a0e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a0e4:	eba8 0303 	sub.w	r3, r8, r3
 800a0e8:	f1b9 0f00 	cmp.w	r9, #0
 800a0ec:	bf08      	it	eq
 800a0ee:	46a9      	moveq	r9, r5
 800a0f0:	2d10      	cmp	r5, #16
 800a0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f4:	462c      	mov	r4, r5
 800a0f6:	bfa8      	it	ge
 800a0f8:	2410      	movge	r4, #16
 800a0fa:	f7f6 fa23 	bl	8000544 <__aeabi_ui2d>
 800a0fe:	2d09      	cmp	r5, #9
 800a100:	4682      	mov	sl, r0
 800a102:	468b      	mov	fp, r1
 800a104:	dc13      	bgt.n	800a12e <_strtod_l+0x3de>
 800a106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f43f ae5a 	beq.w	8009dc2 <_strtod_l+0x72>
 800a10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a110:	dd78      	ble.n	800a204 <_strtod_l+0x4b4>
 800a112:	2b16      	cmp	r3, #22
 800a114:	dc5f      	bgt.n	800a1d6 <_strtod_l+0x486>
 800a116:	4972      	ldr	r1, [pc, #456]	@ (800a2e0 <_strtod_l+0x590>)
 800a118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a120:	4652      	mov	r2, sl
 800a122:	465b      	mov	r3, fp
 800a124:	f7f6 fa88 	bl	8000638 <__aeabi_dmul>
 800a128:	4682      	mov	sl, r0
 800a12a:	468b      	mov	fp, r1
 800a12c:	e649      	b.n	8009dc2 <_strtod_l+0x72>
 800a12e:	4b6c      	ldr	r3, [pc, #432]	@ (800a2e0 <_strtod_l+0x590>)
 800a130:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a134:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a138:	f7f6 fa7e 	bl	8000638 <__aeabi_dmul>
 800a13c:	4682      	mov	sl, r0
 800a13e:	4638      	mov	r0, r7
 800a140:	468b      	mov	fp, r1
 800a142:	f7f6 f9ff 	bl	8000544 <__aeabi_ui2d>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4650      	mov	r0, sl
 800a14c:	4659      	mov	r1, fp
 800a14e:	f7f6 f8bd 	bl	80002cc <__adddf3>
 800a152:	2d0f      	cmp	r5, #15
 800a154:	4682      	mov	sl, r0
 800a156:	468b      	mov	fp, r1
 800a158:	ddd5      	ble.n	800a106 <_strtod_l+0x3b6>
 800a15a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a15c:	1b2c      	subs	r4, r5, r4
 800a15e:	441c      	add	r4, r3
 800a160:	2c00      	cmp	r4, #0
 800a162:	f340 8093 	ble.w	800a28c <_strtod_l+0x53c>
 800a166:	f014 030f 	ands.w	r3, r4, #15
 800a16a:	d00a      	beq.n	800a182 <_strtod_l+0x432>
 800a16c:	495c      	ldr	r1, [pc, #368]	@ (800a2e0 <_strtod_l+0x590>)
 800a16e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a172:	4652      	mov	r2, sl
 800a174:	465b      	mov	r3, fp
 800a176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17a:	f7f6 fa5d 	bl	8000638 <__aeabi_dmul>
 800a17e:	4682      	mov	sl, r0
 800a180:	468b      	mov	fp, r1
 800a182:	f034 040f 	bics.w	r4, r4, #15
 800a186:	d073      	beq.n	800a270 <_strtod_l+0x520>
 800a188:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a18c:	dd49      	ble.n	800a222 <_strtod_l+0x4d2>
 800a18e:	2400      	movs	r4, #0
 800a190:	46a0      	mov	r8, r4
 800a192:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a194:	46a1      	mov	r9, r4
 800a196:	9a05      	ldr	r2, [sp, #20]
 800a198:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a2e8 <_strtod_l+0x598>
 800a19c:	2322      	movs	r3, #34	@ 0x22
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	f04f 0a00 	mov.w	sl, #0
 800a1a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f43f ae0b 	beq.w	8009dc2 <_strtod_l+0x72>
 800a1ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1ae:	9805      	ldr	r0, [sp, #20]
 800a1b0:	f002 f934 	bl	800c41c <_Bfree>
 800a1b4:	9805      	ldr	r0, [sp, #20]
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	f002 f930 	bl	800c41c <_Bfree>
 800a1bc:	9805      	ldr	r0, [sp, #20]
 800a1be:	4641      	mov	r1, r8
 800a1c0:	f002 f92c 	bl	800c41c <_Bfree>
 800a1c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1c6:	9805      	ldr	r0, [sp, #20]
 800a1c8:	f002 f928 	bl	800c41c <_Bfree>
 800a1cc:	9805      	ldr	r0, [sp, #20]
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	f002 f924 	bl	800c41c <_Bfree>
 800a1d4:	e5f5      	b.n	8009dc2 <_strtod_l+0x72>
 800a1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	dbbc      	blt.n	800a15a <_strtod_l+0x40a>
 800a1e0:	4c3f      	ldr	r4, [pc, #252]	@ (800a2e0 <_strtod_l+0x590>)
 800a1e2:	f1c5 050f 	rsb	r5, r5, #15
 800a1e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a1ea:	4652      	mov	r2, sl
 800a1ec:	465b      	mov	r3, fp
 800a1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f2:	f7f6 fa21 	bl	8000638 <__aeabi_dmul>
 800a1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f8:	1b5d      	subs	r5, r3, r5
 800a1fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a1fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a202:	e78f      	b.n	800a124 <_strtod_l+0x3d4>
 800a204:	3316      	adds	r3, #22
 800a206:	dba8      	blt.n	800a15a <_strtod_l+0x40a>
 800a208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a20a:	eba3 0808 	sub.w	r8, r3, r8
 800a20e:	4b34      	ldr	r3, [pc, #208]	@ (800a2e0 <_strtod_l+0x590>)
 800a210:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a214:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a218:	4650      	mov	r0, sl
 800a21a:	4659      	mov	r1, fp
 800a21c:	f7f6 fb36 	bl	800088c <__aeabi_ddiv>
 800a220:	e782      	b.n	800a128 <_strtod_l+0x3d8>
 800a222:	2300      	movs	r3, #0
 800a224:	4f2f      	ldr	r7, [pc, #188]	@ (800a2e4 <_strtod_l+0x594>)
 800a226:	1124      	asrs	r4, r4, #4
 800a228:	4650      	mov	r0, sl
 800a22a:	4659      	mov	r1, fp
 800a22c:	461e      	mov	r6, r3
 800a22e:	2c01      	cmp	r4, #1
 800a230:	dc21      	bgt.n	800a276 <_strtod_l+0x526>
 800a232:	b10b      	cbz	r3, 800a238 <_strtod_l+0x4e8>
 800a234:	4682      	mov	sl, r0
 800a236:	468b      	mov	fp, r1
 800a238:	492a      	ldr	r1, [pc, #168]	@ (800a2e4 <_strtod_l+0x594>)
 800a23a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a23e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a242:	4652      	mov	r2, sl
 800a244:	465b      	mov	r3, fp
 800a246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a24a:	f7f6 f9f5 	bl	8000638 <__aeabi_dmul>
 800a24e:	4b26      	ldr	r3, [pc, #152]	@ (800a2e8 <_strtod_l+0x598>)
 800a250:	460a      	mov	r2, r1
 800a252:	400b      	ands	r3, r1
 800a254:	4925      	ldr	r1, [pc, #148]	@ (800a2ec <_strtod_l+0x59c>)
 800a256:	428b      	cmp	r3, r1
 800a258:	4682      	mov	sl, r0
 800a25a:	d898      	bhi.n	800a18e <_strtod_l+0x43e>
 800a25c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a260:	428b      	cmp	r3, r1
 800a262:	bf86      	itte	hi
 800a264:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a2f0 <_strtod_l+0x5a0>
 800a268:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a26c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a270:	2300      	movs	r3, #0
 800a272:	9308      	str	r3, [sp, #32]
 800a274:	e076      	b.n	800a364 <_strtod_l+0x614>
 800a276:	07e2      	lsls	r2, r4, #31
 800a278:	d504      	bpl.n	800a284 <_strtod_l+0x534>
 800a27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27e:	f7f6 f9db 	bl	8000638 <__aeabi_dmul>
 800a282:	2301      	movs	r3, #1
 800a284:	3601      	adds	r6, #1
 800a286:	1064      	asrs	r4, r4, #1
 800a288:	3708      	adds	r7, #8
 800a28a:	e7d0      	b.n	800a22e <_strtod_l+0x4de>
 800a28c:	d0f0      	beq.n	800a270 <_strtod_l+0x520>
 800a28e:	4264      	negs	r4, r4
 800a290:	f014 020f 	ands.w	r2, r4, #15
 800a294:	d00a      	beq.n	800a2ac <_strtod_l+0x55c>
 800a296:	4b12      	ldr	r3, [pc, #72]	@ (800a2e0 <_strtod_l+0x590>)
 800a298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a29c:	4650      	mov	r0, sl
 800a29e:	4659      	mov	r1, fp
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f6 faf2 	bl	800088c <__aeabi_ddiv>
 800a2a8:	4682      	mov	sl, r0
 800a2aa:	468b      	mov	fp, r1
 800a2ac:	1124      	asrs	r4, r4, #4
 800a2ae:	d0df      	beq.n	800a270 <_strtod_l+0x520>
 800a2b0:	2c1f      	cmp	r4, #31
 800a2b2:	dd1f      	ble.n	800a2f4 <_strtod_l+0x5a4>
 800a2b4:	2400      	movs	r4, #0
 800a2b6:	46a0      	mov	r8, r4
 800a2b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a2ba:	46a1      	mov	r9, r4
 800a2bc:	9a05      	ldr	r2, [sp, #20]
 800a2be:	2322      	movs	r3, #34	@ 0x22
 800a2c0:	f04f 0a00 	mov.w	sl, #0
 800a2c4:	f04f 0b00 	mov.w	fp, #0
 800a2c8:	6013      	str	r3, [r2, #0]
 800a2ca:	e76b      	b.n	800a1a4 <_strtod_l+0x454>
 800a2cc:	0800d301 	.word	0x0800d301
 800a2d0:	0800d4c8 	.word	0x0800d4c8
 800a2d4:	0800d2f9 	.word	0x0800d2f9
 800a2d8:	0800d335 	.word	0x0800d335
 800a2dc:	0800d4c4 	.word	0x0800d4c4
 800a2e0:	0800d650 	.word	0x0800d650
 800a2e4:	0800d628 	.word	0x0800d628
 800a2e8:	7ff00000 	.word	0x7ff00000
 800a2ec:	7ca00000 	.word	0x7ca00000
 800a2f0:	7fefffff 	.word	0x7fefffff
 800a2f4:	f014 0310 	ands.w	r3, r4, #16
 800a2f8:	bf18      	it	ne
 800a2fa:	236a      	movne	r3, #106	@ 0x6a
 800a2fc:	4ea9      	ldr	r6, [pc, #676]	@ (800a5a4 <_strtod_l+0x854>)
 800a2fe:	9308      	str	r3, [sp, #32]
 800a300:	4650      	mov	r0, sl
 800a302:	4659      	mov	r1, fp
 800a304:	2300      	movs	r3, #0
 800a306:	07e7      	lsls	r7, r4, #31
 800a308:	d504      	bpl.n	800a314 <_strtod_l+0x5c4>
 800a30a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a30e:	f7f6 f993 	bl	8000638 <__aeabi_dmul>
 800a312:	2301      	movs	r3, #1
 800a314:	1064      	asrs	r4, r4, #1
 800a316:	f106 0608 	add.w	r6, r6, #8
 800a31a:	d1f4      	bne.n	800a306 <_strtod_l+0x5b6>
 800a31c:	b10b      	cbz	r3, 800a322 <_strtod_l+0x5d2>
 800a31e:	4682      	mov	sl, r0
 800a320:	468b      	mov	fp, r1
 800a322:	9b08      	ldr	r3, [sp, #32]
 800a324:	b1b3      	cbz	r3, 800a354 <_strtod_l+0x604>
 800a326:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a32a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a32e:	2b00      	cmp	r3, #0
 800a330:	4659      	mov	r1, fp
 800a332:	dd0f      	ble.n	800a354 <_strtod_l+0x604>
 800a334:	2b1f      	cmp	r3, #31
 800a336:	dd56      	ble.n	800a3e6 <_strtod_l+0x696>
 800a338:	2b34      	cmp	r3, #52	@ 0x34
 800a33a:	bfde      	ittt	le
 800a33c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a340:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a344:	4093      	lslle	r3, r2
 800a346:	f04f 0a00 	mov.w	sl, #0
 800a34a:	bfcc      	ite	gt
 800a34c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a350:	ea03 0b01 	andle.w	fp, r3, r1
 800a354:	2200      	movs	r2, #0
 800a356:	2300      	movs	r3, #0
 800a358:	4650      	mov	r0, sl
 800a35a:	4659      	mov	r1, fp
 800a35c:	f7f6 fbd4 	bl	8000b08 <__aeabi_dcmpeq>
 800a360:	2800      	cmp	r0, #0
 800a362:	d1a7      	bne.n	800a2b4 <_strtod_l+0x564>
 800a364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a36a:	9805      	ldr	r0, [sp, #20]
 800a36c:	462b      	mov	r3, r5
 800a36e:	464a      	mov	r2, r9
 800a370:	f002 f8bc 	bl	800c4ec <__s2b>
 800a374:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a376:	2800      	cmp	r0, #0
 800a378:	f43f af09 	beq.w	800a18e <_strtod_l+0x43e>
 800a37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a37e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a380:	2a00      	cmp	r2, #0
 800a382:	eba3 0308 	sub.w	r3, r3, r8
 800a386:	bfa8      	it	ge
 800a388:	2300      	movge	r3, #0
 800a38a:	9312      	str	r3, [sp, #72]	@ 0x48
 800a38c:	2400      	movs	r4, #0
 800a38e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a392:	9316      	str	r3, [sp, #88]	@ 0x58
 800a394:	46a0      	mov	r8, r4
 800a396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a398:	9805      	ldr	r0, [sp, #20]
 800a39a:	6859      	ldr	r1, [r3, #4]
 800a39c:	f001 fffe 	bl	800c39c <_Balloc>
 800a3a0:	4681      	mov	r9, r0
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	f43f aef7 	beq.w	800a196 <_strtod_l+0x446>
 800a3a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3aa:	691a      	ldr	r2, [r3, #16]
 800a3ac:	3202      	adds	r2, #2
 800a3ae:	f103 010c 	add.w	r1, r3, #12
 800a3b2:	0092      	lsls	r2, r2, #2
 800a3b4:	300c      	adds	r0, #12
 800a3b6:	f000 fb95 	bl	800aae4 <memcpy>
 800a3ba:	ec4b ab10 	vmov	d0, sl, fp
 800a3be:	9805      	ldr	r0, [sp, #20]
 800a3c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800a3c2:	a91b      	add	r1, sp, #108	@ 0x6c
 800a3c4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a3c8:	f002 fbc4 	bl	800cb54 <__d2b>
 800a3cc:	901a      	str	r0, [sp, #104]	@ 0x68
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	f43f aee1 	beq.w	800a196 <_strtod_l+0x446>
 800a3d4:	9805      	ldr	r0, [sp, #20]
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	f002 f91e 	bl	800c618 <__i2b>
 800a3dc:	4680      	mov	r8, r0
 800a3de:	b948      	cbnz	r0, 800a3f4 <_strtod_l+0x6a4>
 800a3e0:	f04f 0800 	mov.w	r8, #0
 800a3e4:	e6d7      	b.n	800a196 <_strtod_l+0x446>
 800a3e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ee:	ea03 0a0a 	and.w	sl, r3, sl
 800a3f2:	e7af      	b.n	800a354 <_strtod_l+0x604>
 800a3f4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a3f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a3f8:	2d00      	cmp	r5, #0
 800a3fa:	bfab      	itete	ge
 800a3fc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a3fe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a400:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a402:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a404:	bfac      	ite	ge
 800a406:	18ef      	addge	r7, r5, r3
 800a408:	1b5e      	sublt	r6, r3, r5
 800a40a:	9b08      	ldr	r3, [sp, #32]
 800a40c:	1aed      	subs	r5, r5, r3
 800a40e:	4415      	add	r5, r2
 800a410:	4b65      	ldr	r3, [pc, #404]	@ (800a5a8 <_strtod_l+0x858>)
 800a412:	3d01      	subs	r5, #1
 800a414:	429d      	cmp	r5, r3
 800a416:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a41a:	da50      	bge.n	800a4be <_strtod_l+0x76e>
 800a41c:	1b5b      	subs	r3, r3, r5
 800a41e:	2b1f      	cmp	r3, #31
 800a420:	eba2 0203 	sub.w	r2, r2, r3
 800a424:	f04f 0101 	mov.w	r1, #1
 800a428:	dc3d      	bgt.n	800a4a6 <_strtod_l+0x756>
 800a42a:	fa01 f303 	lsl.w	r3, r1, r3
 800a42e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a430:	2300      	movs	r3, #0
 800a432:	9310      	str	r3, [sp, #64]	@ 0x40
 800a434:	18bd      	adds	r5, r7, r2
 800a436:	9b08      	ldr	r3, [sp, #32]
 800a438:	42af      	cmp	r7, r5
 800a43a:	4416      	add	r6, r2
 800a43c:	441e      	add	r6, r3
 800a43e:	463b      	mov	r3, r7
 800a440:	bfa8      	it	ge
 800a442:	462b      	movge	r3, r5
 800a444:	42b3      	cmp	r3, r6
 800a446:	bfa8      	it	ge
 800a448:	4633      	movge	r3, r6
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bfc2      	ittt	gt
 800a44e:	1aed      	subgt	r5, r5, r3
 800a450:	1af6      	subgt	r6, r6, r3
 800a452:	1aff      	subgt	r7, r7, r3
 800a454:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a456:	2b00      	cmp	r3, #0
 800a458:	dd16      	ble.n	800a488 <_strtod_l+0x738>
 800a45a:	4641      	mov	r1, r8
 800a45c:	9805      	ldr	r0, [sp, #20]
 800a45e:	461a      	mov	r2, r3
 800a460:	f002 f992 	bl	800c788 <__pow5mult>
 800a464:	4680      	mov	r8, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d0ba      	beq.n	800a3e0 <_strtod_l+0x690>
 800a46a:	4601      	mov	r1, r0
 800a46c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a46e:	9805      	ldr	r0, [sp, #20]
 800a470:	f002 f8e8 	bl	800c644 <__multiply>
 800a474:	900a      	str	r0, [sp, #40]	@ 0x28
 800a476:	2800      	cmp	r0, #0
 800a478:	f43f ae8d 	beq.w	800a196 <_strtod_l+0x446>
 800a47c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a47e:	9805      	ldr	r0, [sp, #20]
 800a480:	f001 ffcc 	bl	800c41c <_Bfree>
 800a484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a486:	931a      	str	r3, [sp, #104]	@ 0x68
 800a488:	2d00      	cmp	r5, #0
 800a48a:	dc1d      	bgt.n	800a4c8 <_strtod_l+0x778>
 800a48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd23      	ble.n	800a4da <_strtod_l+0x78a>
 800a492:	4649      	mov	r1, r9
 800a494:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a496:	9805      	ldr	r0, [sp, #20]
 800a498:	f002 f976 	bl	800c788 <__pow5mult>
 800a49c:	4681      	mov	r9, r0
 800a49e:	b9e0      	cbnz	r0, 800a4da <_strtod_l+0x78a>
 800a4a0:	f04f 0900 	mov.w	r9, #0
 800a4a4:	e677      	b.n	800a196 <_strtod_l+0x446>
 800a4a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a4aa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a4ae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a4b2:	35e2      	adds	r5, #226	@ 0xe2
 800a4b4:	fa01 f305 	lsl.w	r3, r1, r5
 800a4b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a4bc:	e7ba      	b.n	800a434 <_strtod_l+0x6e4>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4c6:	e7b5      	b.n	800a434 <_strtod_l+0x6e4>
 800a4c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4ca:	9805      	ldr	r0, [sp, #20]
 800a4cc:	462a      	mov	r2, r5
 800a4ce:	f002 f9b5 	bl	800c83c <__lshift>
 800a4d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d1d9      	bne.n	800a48c <_strtod_l+0x73c>
 800a4d8:	e65d      	b.n	800a196 <_strtod_l+0x446>
 800a4da:	2e00      	cmp	r6, #0
 800a4dc:	dd07      	ble.n	800a4ee <_strtod_l+0x79e>
 800a4de:	4649      	mov	r1, r9
 800a4e0:	9805      	ldr	r0, [sp, #20]
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	f002 f9aa 	bl	800c83c <__lshift>
 800a4e8:	4681      	mov	r9, r0
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d0d8      	beq.n	800a4a0 <_strtod_l+0x750>
 800a4ee:	2f00      	cmp	r7, #0
 800a4f0:	dd08      	ble.n	800a504 <_strtod_l+0x7b4>
 800a4f2:	4641      	mov	r1, r8
 800a4f4:	9805      	ldr	r0, [sp, #20]
 800a4f6:	463a      	mov	r2, r7
 800a4f8:	f002 f9a0 	bl	800c83c <__lshift>
 800a4fc:	4680      	mov	r8, r0
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f43f ae49 	beq.w	800a196 <_strtod_l+0x446>
 800a504:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a506:	9805      	ldr	r0, [sp, #20]
 800a508:	464a      	mov	r2, r9
 800a50a:	f002 fa1f 	bl	800c94c <__mdiff>
 800a50e:	4604      	mov	r4, r0
 800a510:	2800      	cmp	r0, #0
 800a512:	f43f ae40 	beq.w	800a196 <_strtod_l+0x446>
 800a516:	68c3      	ldr	r3, [r0, #12]
 800a518:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a51a:	2300      	movs	r3, #0
 800a51c:	60c3      	str	r3, [r0, #12]
 800a51e:	4641      	mov	r1, r8
 800a520:	f002 f9f8 	bl	800c914 <__mcmp>
 800a524:	2800      	cmp	r0, #0
 800a526:	da45      	bge.n	800a5b4 <_strtod_l+0x864>
 800a528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a52a:	ea53 030a 	orrs.w	r3, r3, sl
 800a52e:	d16b      	bne.n	800a608 <_strtod_l+0x8b8>
 800a530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a534:	2b00      	cmp	r3, #0
 800a536:	d167      	bne.n	800a608 <_strtod_l+0x8b8>
 800a538:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a53c:	0d1b      	lsrs	r3, r3, #20
 800a53e:	051b      	lsls	r3, r3, #20
 800a540:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a544:	d960      	bls.n	800a608 <_strtod_l+0x8b8>
 800a546:	6963      	ldr	r3, [r4, #20]
 800a548:	b913      	cbnz	r3, 800a550 <_strtod_l+0x800>
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	dd5b      	ble.n	800a608 <_strtod_l+0x8b8>
 800a550:	4621      	mov	r1, r4
 800a552:	2201      	movs	r2, #1
 800a554:	9805      	ldr	r0, [sp, #20]
 800a556:	f002 f971 	bl	800c83c <__lshift>
 800a55a:	4641      	mov	r1, r8
 800a55c:	4604      	mov	r4, r0
 800a55e:	f002 f9d9 	bl	800c914 <__mcmp>
 800a562:	2800      	cmp	r0, #0
 800a564:	dd50      	ble.n	800a608 <_strtod_l+0x8b8>
 800a566:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a56a:	9a08      	ldr	r2, [sp, #32]
 800a56c:	0d1b      	lsrs	r3, r3, #20
 800a56e:	051b      	lsls	r3, r3, #20
 800a570:	2a00      	cmp	r2, #0
 800a572:	d06a      	beq.n	800a64a <_strtod_l+0x8fa>
 800a574:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a578:	d867      	bhi.n	800a64a <_strtod_l+0x8fa>
 800a57a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a57e:	f67f ae9d 	bls.w	800a2bc <_strtod_l+0x56c>
 800a582:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ac <_strtod_l+0x85c>)
 800a584:	4650      	mov	r0, sl
 800a586:	4659      	mov	r1, fp
 800a588:	2200      	movs	r2, #0
 800a58a:	f7f6 f855 	bl	8000638 <__aeabi_dmul>
 800a58e:	4b08      	ldr	r3, [pc, #32]	@ (800a5b0 <_strtod_l+0x860>)
 800a590:	400b      	ands	r3, r1
 800a592:	4682      	mov	sl, r0
 800a594:	468b      	mov	fp, r1
 800a596:	2b00      	cmp	r3, #0
 800a598:	f47f ae08 	bne.w	800a1ac <_strtod_l+0x45c>
 800a59c:	9a05      	ldr	r2, [sp, #20]
 800a59e:	2322      	movs	r3, #34	@ 0x22
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	e603      	b.n	800a1ac <_strtod_l+0x45c>
 800a5a4:	0800d4f0 	.word	0x0800d4f0
 800a5a8:	fffffc02 	.word	0xfffffc02
 800a5ac:	39500000 	.word	0x39500000
 800a5b0:	7ff00000 	.word	0x7ff00000
 800a5b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a5b8:	d165      	bne.n	800a686 <_strtod_l+0x936>
 800a5ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a5bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5c0:	b35a      	cbz	r2, 800a61a <_strtod_l+0x8ca>
 800a5c2:	4a9f      	ldr	r2, [pc, #636]	@ (800a840 <_strtod_l+0xaf0>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d12b      	bne.n	800a620 <_strtod_l+0x8d0>
 800a5c8:	9b08      	ldr	r3, [sp, #32]
 800a5ca:	4651      	mov	r1, sl
 800a5cc:	b303      	cbz	r3, 800a610 <_strtod_l+0x8c0>
 800a5ce:	4b9d      	ldr	r3, [pc, #628]	@ (800a844 <_strtod_l+0xaf4>)
 800a5d0:	465a      	mov	r2, fp
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a5d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5dc:	d81b      	bhi.n	800a616 <_strtod_l+0x8c6>
 800a5de:	0d1b      	lsrs	r3, r3, #20
 800a5e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e8:	4299      	cmp	r1, r3
 800a5ea:	d119      	bne.n	800a620 <_strtod_l+0x8d0>
 800a5ec:	4b96      	ldr	r3, [pc, #600]	@ (800a848 <_strtod_l+0xaf8>)
 800a5ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d102      	bne.n	800a5fa <_strtod_l+0x8aa>
 800a5f4:	3101      	adds	r1, #1
 800a5f6:	f43f adce 	beq.w	800a196 <_strtod_l+0x446>
 800a5fa:	4b92      	ldr	r3, [pc, #584]	@ (800a844 <_strtod_l+0xaf4>)
 800a5fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5fe:	401a      	ands	r2, r3
 800a600:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a604:	f04f 0a00 	mov.w	sl, #0
 800a608:	9b08      	ldr	r3, [sp, #32]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1b9      	bne.n	800a582 <_strtod_l+0x832>
 800a60e:	e5cd      	b.n	800a1ac <_strtod_l+0x45c>
 800a610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a614:	e7e8      	b.n	800a5e8 <_strtod_l+0x898>
 800a616:	4613      	mov	r3, r2
 800a618:	e7e6      	b.n	800a5e8 <_strtod_l+0x898>
 800a61a:	ea53 030a 	orrs.w	r3, r3, sl
 800a61e:	d0a2      	beq.n	800a566 <_strtod_l+0x816>
 800a620:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a622:	b1db      	cbz	r3, 800a65c <_strtod_l+0x90c>
 800a624:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a626:	4213      	tst	r3, r2
 800a628:	d0ee      	beq.n	800a608 <_strtod_l+0x8b8>
 800a62a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a62c:	9a08      	ldr	r2, [sp, #32]
 800a62e:	4650      	mov	r0, sl
 800a630:	4659      	mov	r1, fp
 800a632:	b1bb      	cbz	r3, 800a664 <_strtod_l+0x914>
 800a634:	f7ff fb6c 	bl	8009d10 <sulp>
 800a638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a63c:	ec53 2b10 	vmov	r2, r3, d0
 800a640:	f7f5 fe44 	bl	80002cc <__adddf3>
 800a644:	4682      	mov	sl, r0
 800a646:	468b      	mov	fp, r1
 800a648:	e7de      	b.n	800a608 <_strtod_l+0x8b8>
 800a64a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a64e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a652:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a656:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a65a:	e7d5      	b.n	800a608 <_strtod_l+0x8b8>
 800a65c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a65e:	ea13 0f0a 	tst.w	r3, sl
 800a662:	e7e1      	b.n	800a628 <_strtod_l+0x8d8>
 800a664:	f7ff fb54 	bl	8009d10 <sulp>
 800a668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a66c:	ec53 2b10 	vmov	r2, r3, d0
 800a670:	f7f5 fe2a 	bl	80002c8 <__aeabi_dsub>
 800a674:	2200      	movs	r2, #0
 800a676:	2300      	movs	r3, #0
 800a678:	4682      	mov	sl, r0
 800a67a:	468b      	mov	fp, r1
 800a67c:	f7f6 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 800a680:	2800      	cmp	r0, #0
 800a682:	d0c1      	beq.n	800a608 <_strtod_l+0x8b8>
 800a684:	e61a      	b.n	800a2bc <_strtod_l+0x56c>
 800a686:	4641      	mov	r1, r8
 800a688:	4620      	mov	r0, r4
 800a68a:	f002 fabb 	bl	800cc04 <__ratio>
 800a68e:	ec57 6b10 	vmov	r6, r7, d0
 800a692:	2200      	movs	r2, #0
 800a694:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a698:	4630      	mov	r0, r6
 800a69a:	4639      	mov	r1, r7
 800a69c:	f7f6 fa48 	bl	8000b30 <__aeabi_dcmple>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d06f      	beq.n	800a784 <_strtod_l+0xa34>
 800a6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d17a      	bne.n	800a7a0 <_strtod_l+0xa50>
 800a6aa:	f1ba 0f00 	cmp.w	sl, #0
 800a6ae:	d158      	bne.n	800a762 <_strtod_l+0xa12>
 800a6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d15a      	bne.n	800a770 <_strtod_l+0xa20>
 800a6ba:	4b64      	ldr	r3, [pc, #400]	@ (800a84c <_strtod_l+0xafc>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4630      	mov	r0, r6
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	f7f6 fa2b 	bl	8000b1c <__aeabi_dcmplt>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d159      	bne.n	800a77e <_strtod_l+0xa2e>
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4b60      	ldr	r3, [pc, #384]	@ (800a850 <_strtod_l+0xb00>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f7f5 ffb1 	bl	8000638 <__aeabi_dmul>
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	460f      	mov	r7, r1
 800a6da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a6de:	9606      	str	r6, [sp, #24]
 800a6e0:	9307      	str	r3, [sp, #28]
 800a6e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6e6:	4d57      	ldr	r5, [pc, #348]	@ (800a844 <_strtod_l+0xaf4>)
 800a6e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ee:	401d      	ands	r5, r3
 800a6f0:	4b58      	ldr	r3, [pc, #352]	@ (800a854 <_strtod_l+0xb04>)
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	f040 80b2 	bne.w	800a85c <_strtod_l+0xb0c>
 800a6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a6fe:	ec4b ab10 	vmov	d0, sl, fp
 800a702:	f002 f9b7 	bl	800ca74 <__ulp>
 800a706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a70a:	ec51 0b10 	vmov	r0, r1, d0
 800a70e:	f7f5 ff93 	bl	8000638 <__aeabi_dmul>
 800a712:	4652      	mov	r2, sl
 800a714:	465b      	mov	r3, fp
 800a716:	f7f5 fdd9 	bl	80002cc <__adddf3>
 800a71a:	460b      	mov	r3, r1
 800a71c:	4949      	ldr	r1, [pc, #292]	@ (800a844 <_strtod_l+0xaf4>)
 800a71e:	4a4e      	ldr	r2, [pc, #312]	@ (800a858 <_strtod_l+0xb08>)
 800a720:	4019      	ands	r1, r3
 800a722:	4291      	cmp	r1, r2
 800a724:	4682      	mov	sl, r0
 800a726:	d942      	bls.n	800a7ae <_strtod_l+0xa5e>
 800a728:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a72a:	4b47      	ldr	r3, [pc, #284]	@ (800a848 <_strtod_l+0xaf8>)
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d103      	bne.n	800a738 <_strtod_l+0x9e8>
 800a730:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a732:	3301      	adds	r3, #1
 800a734:	f43f ad2f 	beq.w	800a196 <_strtod_l+0x446>
 800a738:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a848 <_strtod_l+0xaf8>
 800a73c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a740:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a742:	9805      	ldr	r0, [sp, #20]
 800a744:	f001 fe6a 	bl	800c41c <_Bfree>
 800a748:	9805      	ldr	r0, [sp, #20]
 800a74a:	4649      	mov	r1, r9
 800a74c:	f001 fe66 	bl	800c41c <_Bfree>
 800a750:	9805      	ldr	r0, [sp, #20]
 800a752:	4641      	mov	r1, r8
 800a754:	f001 fe62 	bl	800c41c <_Bfree>
 800a758:	9805      	ldr	r0, [sp, #20]
 800a75a:	4621      	mov	r1, r4
 800a75c:	f001 fe5e 	bl	800c41c <_Bfree>
 800a760:	e619      	b.n	800a396 <_strtod_l+0x646>
 800a762:	f1ba 0f01 	cmp.w	sl, #1
 800a766:	d103      	bne.n	800a770 <_strtod_l+0xa20>
 800a768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f43f ada6 	beq.w	800a2bc <_strtod_l+0x56c>
 800a770:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a820 <_strtod_l+0xad0>
 800a774:	4f35      	ldr	r7, [pc, #212]	@ (800a84c <_strtod_l+0xafc>)
 800a776:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a77a:	2600      	movs	r6, #0
 800a77c:	e7b1      	b.n	800a6e2 <_strtod_l+0x992>
 800a77e:	4f34      	ldr	r7, [pc, #208]	@ (800a850 <_strtod_l+0xb00>)
 800a780:	2600      	movs	r6, #0
 800a782:	e7aa      	b.n	800a6da <_strtod_l+0x98a>
 800a784:	4b32      	ldr	r3, [pc, #200]	@ (800a850 <_strtod_l+0xb00>)
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	2200      	movs	r2, #0
 800a78c:	f7f5 ff54 	bl	8000638 <__aeabi_dmul>
 800a790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a792:	4606      	mov	r6, r0
 800a794:	460f      	mov	r7, r1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d09f      	beq.n	800a6da <_strtod_l+0x98a>
 800a79a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a79e:	e7a0      	b.n	800a6e2 <_strtod_l+0x992>
 800a7a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a828 <_strtod_l+0xad8>
 800a7a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7a8:	ec57 6b17 	vmov	r6, r7, d7
 800a7ac:	e799      	b.n	800a6e2 <_strtod_l+0x992>
 800a7ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a7b2:	9b08      	ldr	r3, [sp, #32]
 800a7b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1c1      	bne.n	800a740 <_strtod_l+0x9f0>
 800a7bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7c0:	0d1b      	lsrs	r3, r3, #20
 800a7c2:	051b      	lsls	r3, r3, #20
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	d1bb      	bne.n	800a740 <_strtod_l+0x9f0>
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f7f6 fa94 	bl	8000cf8 <__aeabi_d2lz>
 800a7d0:	f7f5 ff04 	bl	80005dc <__aeabi_l2d>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f5 fd74 	bl	80002c8 <__aeabi_dsub>
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a7e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ee:	ea46 060a 	orr.w	r6, r6, sl
 800a7f2:	431e      	orrs	r6, r3
 800a7f4:	d06f      	beq.n	800a8d6 <_strtod_l+0xb86>
 800a7f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a830 <_strtod_l+0xae0>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f6 f98e 	bl	8000b1c <__aeabi_dcmplt>
 800a800:	2800      	cmp	r0, #0
 800a802:	f47f acd3 	bne.w	800a1ac <_strtod_l+0x45c>
 800a806:	a30c      	add	r3, pc, #48	@ (adr r3, 800a838 <_strtod_l+0xae8>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a810:	f7f6 f9a2 	bl	8000b58 <__aeabi_dcmpgt>
 800a814:	2800      	cmp	r0, #0
 800a816:	d093      	beq.n	800a740 <_strtod_l+0x9f0>
 800a818:	e4c8      	b.n	800a1ac <_strtod_l+0x45c>
 800a81a:	bf00      	nop
 800a81c:	f3af 8000 	nop.w
 800a820:	00000000 	.word	0x00000000
 800a824:	bff00000 	.word	0xbff00000
 800a828:	00000000 	.word	0x00000000
 800a82c:	3ff00000 	.word	0x3ff00000
 800a830:	94a03595 	.word	0x94a03595
 800a834:	3fdfffff 	.word	0x3fdfffff
 800a838:	35afe535 	.word	0x35afe535
 800a83c:	3fe00000 	.word	0x3fe00000
 800a840:	000fffff 	.word	0x000fffff
 800a844:	7ff00000 	.word	0x7ff00000
 800a848:	7fefffff 	.word	0x7fefffff
 800a84c:	3ff00000 	.word	0x3ff00000
 800a850:	3fe00000 	.word	0x3fe00000
 800a854:	7fe00000 	.word	0x7fe00000
 800a858:	7c9fffff 	.word	0x7c9fffff
 800a85c:	9b08      	ldr	r3, [sp, #32]
 800a85e:	b323      	cbz	r3, 800a8aa <_strtod_l+0xb5a>
 800a860:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a864:	d821      	bhi.n	800a8aa <_strtod_l+0xb5a>
 800a866:	a328      	add	r3, pc, #160	@ (adr r3, 800a908 <_strtod_l+0xbb8>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	4630      	mov	r0, r6
 800a86e:	4639      	mov	r1, r7
 800a870:	f7f6 f95e 	bl	8000b30 <__aeabi_dcmple>
 800a874:	b1a0      	cbz	r0, 800a8a0 <_strtod_l+0xb50>
 800a876:	4639      	mov	r1, r7
 800a878:	4630      	mov	r0, r6
 800a87a:	f7f6 f9b5 	bl	8000be8 <__aeabi_d2uiz>
 800a87e:	2801      	cmp	r0, #1
 800a880:	bf38      	it	cc
 800a882:	2001      	movcc	r0, #1
 800a884:	f7f5 fe5e 	bl	8000544 <__aeabi_ui2d>
 800a888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a88a:	4606      	mov	r6, r0
 800a88c:	460f      	mov	r7, r1
 800a88e:	b9fb      	cbnz	r3, 800a8d0 <_strtod_l+0xb80>
 800a890:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a894:	9014      	str	r0, [sp, #80]	@ 0x50
 800a896:	9315      	str	r3, [sp, #84]	@ 0x54
 800a898:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a89c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a8a6:	1b5b      	subs	r3, r3, r5
 800a8a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a8aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a8ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a8b2:	f002 f8df 	bl	800ca74 <__ulp>
 800a8b6:	4650      	mov	r0, sl
 800a8b8:	ec53 2b10 	vmov	r2, r3, d0
 800a8bc:	4659      	mov	r1, fp
 800a8be:	f7f5 febb 	bl	8000638 <__aeabi_dmul>
 800a8c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a8c6:	f7f5 fd01 	bl	80002cc <__adddf3>
 800a8ca:	4682      	mov	sl, r0
 800a8cc:	468b      	mov	fp, r1
 800a8ce:	e770      	b.n	800a7b2 <_strtod_l+0xa62>
 800a8d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a8d4:	e7e0      	b.n	800a898 <_strtod_l+0xb48>
 800a8d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a910 <_strtod_l+0xbc0>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f6 f91e 	bl	8000b1c <__aeabi_dcmplt>
 800a8e0:	e798      	b.n	800a814 <_strtod_l+0xac4>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a8e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	f7ff ba6d 	b.w	8009dca <_strtod_l+0x7a>
 800a8f0:	2a65      	cmp	r2, #101	@ 0x65
 800a8f2:	f43f ab68 	beq.w	8009fc6 <_strtod_l+0x276>
 800a8f6:	2a45      	cmp	r2, #69	@ 0x45
 800a8f8:	f43f ab65 	beq.w	8009fc6 <_strtod_l+0x276>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f7ff bba0 	b.w	800a042 <_strtod_l+0x2f2>
 800a902:	bf00      	nop
 800a904:	f3af 8000 	nop.w
 800a908:	ffc00000 	.word	0xffc00000
 800a90c:	41dfffff 	.word	0x41dfffff
 800a910:	94a03595 	.word	0x94a03595
 800a914:	3fcfffff 	.word	0x3fcfffff

0800a918 <strtod>:
 800a918:	460a      	mov	r2, r1
 800a91a:	4601      	mov	r1, r0
 800a91c:	4802      	ldr	r0, [pc, #8]	@ (800a928 <strtod+0x10>)
 800a91e:	4b03      	ldr	r3, [pc, #12]	@ (800a92c <strtod+0x14>)
 800a920:	6800      	ldr	r0, [r0, #0]
 800a922:	f7ff ba15 	b.w	8009d50 <_strtod_l>
 800a926:	bf00      	nop
 800a928:	20000188 	.word	0x20000188
 800a92c:	2000001c 	.word	0x2000001c

0800a930 <_fwalk_sglue>:
 800a930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a934:	4607      	mov	r7, r0
 800a936:	4688      	mov	r8, r1
 800a938:	4614      	mov	r4, r2
 800a93a:	2600      	movs	r6, #0
 800a93c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a940:	f1b9 0901 	subs.w	r9, r9, #1
 800a944:	d505      	bpl.n	800a952 <_fwalk_sglue+0x22>
 800a946:	6824      	ldr	r4, [r4, #0]
 800a948:	2c00      	cmp	r4, #0
 800a94a:	d1f7      	bne.n	800a93c <_fwalk_sglue+0xc>
 800a94c:	4630      	mov	r0, r6
 800a94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a952:	89ab      	ldrh	r3, [r5, #12]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d907      	bls.n	800a968 <_fwalk_sglue+0x38>
 800a958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a95c:	3301      	adds	r3, #1
 800a95e:	d003      	beq.n	800a968 <_fwalk_sglue+0x38>
 800a960:	4629      	mov	r1, r5
 800a962:	4638      	mov	r0, r7
 800a964:	47c0      	blx	r8
 800a966:	4306      	orrs	r6, r0
 800a968:	3568      	adds	r5, #104	@ 0x68
 800a96a:	e7e9      	b.n	800a940 <_fwalk_sglue+0x10>

0800a96c <iprintf>:
 800a96c:	b40f      	push	{r0, r1, r2, r3}
 800a96e:	b507      	push	{r0, r1, r2, lr}
 800a970:	4906      	ldr	r1, [pc, #24]	@ (800a98c <iprintf+0x20>)
 800a972:	ab04      	add	r3, sp, #16
 800a974:	6808      	ldr	r0, [r1, #0]
 800a976:	f853 2b04 	ldr.w	r2, [r3], #4
 800a97a:	6881      	ldr	r1, [r0, #8]
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	f001 fa81 	bl	800be84 <_vfiprintf_r>
 800a982:	b003      	add	sp, #12
 800a984:	f85d eb04 	ldr.w	lr, [sp], #4
 800a988:	b004      	add	sp, #16
 800a98a:	4770      	bx	lr
 800a98c:	20000188 	.word	0x20000188

0800a990 <_puts_r>:
 800a990:	6a03      	ldr	r3, [r0, #32]
 800a992:	b570      	push	{r4, r5, r6, lr}
 800a994:	6884      	ldr	r4, [r0, #8]
 800a996:	4605      	mov	r5, r0
 800a998:	460e      	mov	r6, r1
 800a99a:	b90b      	cbnz	r3, 800a9a0 <_puts_r+0x10>
 800a99c:	f7ff f9a0 	bl	8009ce0 <__sinit>
 800a9a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9a2:	07db      	lsls	r3, r3, #31
 800a9a4:	d405      	bmi.n	800a9b2 <_puts_r+0x22>
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	0598      	lsls	r0, r3, #22
 800a9aa:	d402      	bmi.n	800a9b2 <_puts_r+0x22>
 800a9ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ae:	f000 f892 	bl	800aad6 <__retarget_lock_acquire_recursive>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	0719      	lsls	r1, r3, #28
 800a9b6:	d502      	bpl.n	800a9be <_puts_r+0x2e>
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d135      	bne.n	800aa2a <_puts_r+0x9a>
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f002 fa17 	bl	800cdf4 <__swsetup_r>
 800a9c6:	b380      	cbz	r0, 800aa2a <_puts_r+0x9a>
 800a9c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a9cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ce:	07da      	lsls	r2, r3, #31
 800a9d0:	d405      	bmi.n	800a9de <_puts_r+0x4e>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	059b      	lsls	r3, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_puts_r+0x4e>
 800a9d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9da:	f000 f87d 	bl	800aad8 <__retarget_lock_release_recursive>
 800a9de:	4628      	mov	r0, r5
 800a9e0:	bd70      	pop	{r4, r5, r6, pc}
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	da04      	bge.n	800a9f0 <_puts_r+0x60>
 800a9e6:	69a2      	ldr	r2, [r4, #24]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	dc17      	bgt.n	800aa1c <_puts_r+0x8c>
 800a9ec:	290a      	cmp	r1, #10
 800a9ee:	d015      	beq.n	800aa1c <_puts_r+0x8c>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	6022      	str	r2, [r4, #0]
 800a9f6:	7019      	strb	r1, [r3, #0]
 800a9f8:	68a3      	ldr	r3, [r4, #8]
 800a9fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	60a3      	str	r3, [r4, #8]
 800aa02:	2900      	cmp	r1, #0
 800aa04:	d1ed      	bne.n	800a9e2 <_puts_r+0x52>
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	da11      	bge.n	800aa2e <_puts_r+0x9e>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	210a      	movs	r1, #10
 800aa0e:	4628      	mov	r0, r5
 800aa10:	f002 f9b1 	bl	800cd76 <__swbuf_r>
 800aa14:	3001      	adds	r0, #1
 800aa16:	d0d7      	beq.n	800a9c8 <_puts_r+0x38>
 800aa18:	250a      	movs	r5, #10
 800aa1a:	e7d7      	b.n	800a9cc <_puts_r+0x3c>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f002 f9a9 	bl	800cd76 <__swbuf_r>
 800aa24:	3001      	adds	r0, #1
 800aa26:	d1e7      	bne.n	800a9f8 <_puts_r+0x68>
 800aa28:	e7ce      	b.n	800a9c8 <_puts_r+0x38>
 800aa2a:	3e01      	subs	r6, #1
 800aa2c:	e7e4      	b.n	800a9f8 <_puts_r+0x68>
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	6022      	str	r2, [r4, #0]
 800aa34:	220a      	movs	r2, #10
 800aa36:	701a      	strb	r2, [r3, #0]
 800aa38:	e7ee      	b.n	800aa18 <_puts_r+0x88>
	...

0800aa3c <puts>:
 800aa3c:	4b02      	ldr	r3, [pc, #8]	@ (800aa48 <puts+0xc>)
 800aa3e:	4601      	mov	r1, r0
 800aa40:	6818      	ldr	r0, [r3, #0]
 800aa42:	f7ff bfa5 	b.w	800a990 <_puts_r>
 800aa46:	bf00      	nop
 800aa48:	20000188 	.word	0x20000188

0800aa4c <memset>:
 800aa4c:	4402      	add	r2, r0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d100      	bne.n	800aa56 <memset+0xa>
 800aa54:	4770      	bx	lr
 800aa56:	f803 1b01 	strb.w	r1, [r3], #1
 800aa5a:	e7f9      	b.n	800aa50 <memset+0x4>

0800aa5c <strncmp>:
 800aa5c:	b510      	push	{r4, lr}
 800aa5e:	b16a      	cbz	r2, 800aa7c <strncmp+0x20>
 800aa60:	3901      	subs	r1, #1
 800aa62:	1884      	adds	r4, r0, r2
 800aa64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d103      	bne.n	800aa78 <strncmp+0x1c>
 800aa70:	42a0      	cmp	r0, r4
 800aa72:	d001      	beq.n	800aa78 <strncmp+0x1c>
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	d1f5      	bne.n	800aa64 <strncmp+0x8>
 800aa78:	1ad0      	subs	r0, r2, r3
 800aa7a:	bd10      	pop	{r4, pc}
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	e7fc      	b.n	800aa7a <strncmp+0x1e>

0800aa80 <__errno>:
 800aa80:	4b01      	ldr	r3, [pc, #4]	@ (800aa88 <__errno+0x8>)
 800aa82:	6818      	ldr	r0, [r3, #0]
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	20000188 	.word	0x20000188

0800aa8c <__libc_init_array>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	4d0d      	ldr	r5, [pc, #52]	@ (800aac4 <__libc_init_array+0x38>)
 800aa90:	4c0d      	ldr	r4, [pc, #52]	@ (800aac8 <__libc_init_array+0x3c>)
 800aa92:	1b64      	subs	r4, r4, r5
 800aa94:	10a4      	asrs	r4, r4, #2
 800aa96:	2600      	movs	r6, #0
 800aa98:	42a6      	cmp	r6, r4
 800aa9a:	d109      	bne.n	800aab0 <__libc_init_array+0x24>
 800aa9c:	4d0b      	ldr	r5, [pc, #44]	@ (800aacc <__libc_init_array+0x40>)
 800aa9e:	4c0c      	ldr	r4, [pc, #48]	@ (800aad0 <__libc_init_array+0x44>)
 800aaa0:	f002 fbc0 	bl	800d224 <_init>
 800aaa4:	1b64      	subs	r4, r4, r5
 800aaa6:	10a4      	asrs	r4, r4, #2
 800aaa8:	2600      	movs	r6, #0
 800aaaa:	42a6      	cmp	r6, r4
 800aaac:	d105      	bne.n	800aaba <__libc_init_array+0x2e>
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
 800aab0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab4:	4798      	blx	r3
 800aab6:	3601      	adds	r6, #1
 800aab8:	e7ee      	b.n	800aa98 <__libc_init_array+0xc>
 800aaba:	f855 3b04 	ldr.w	r3, [r5], #4
 800aabe:	4798      	blx	r3
 800aac0:	3601      	adds	r6, #1
 800aac2:	e7f2      	b.n	800aaaa <__libc_init_array+0x1e>
 800aac4:	0800d720 	.word	0x0800d720
 800aac8:	0800d720 	.word	0x0800d720
 800aacc:	0800d720 	.word	0x0800d720
 800aad0:	0800d724 	.word	0x0800d724

0800aad4 <__retarget_lock_init_recursive>:
 800aad4:	4770      	bx	lr

0800aad6 <__retarget_lock_acquire_recursive>:
 800aad6:	4770      	bx	lr

0800aad8 <__retarget_lock_release_recursive>:
 800aad8:	4770      	bx	lr
	...

0800aadc <_localeconv_r>:
 800aadc:	4800      	ldr	r0, [pc, #0]	@ (800aae0 <_localeconv_r+0x4>)
 800aade:	4770      	bx	lr
 800aae0:	2000010c 	.word	0x2000010c

0800aae4 <memcpy>:
 800aae4:	440a      	add	r2, r1
 800aae6:	4291      	cmp	r1, r2
 800aae8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800aaec:	d100      	bne.n	800aaf0 <memcpy+0xc>
 800aaee:	4770      	bx	lr
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aafa:	4291      	cmp	r1, r2
 800aafc:	d1f9      	bne.n	800aaf2 <memcpy+0xe>
 800aafe:	bd10      	pop	{r4, pc}

0800ab00 <nan>:
 800ab00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab08 <nan+0x8>
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	00000000 	.word	0x00000000
 800ab0c:	7ff80000 	.word	0x7ff80000

0800ab10 <quorem>:
 800ab10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	6903      	ldr	r3, [r0, #16]
 800ab16:	690c      	ldr	r4, [r1, #16]
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	db7e      	blt.n	800ac1c <quorem+0x10c>
 800ab1e:	3c01      	subs	r4, #1
 800ab20:	f101 0814 	add.w	r8, r1, #20
 800ab24:	00a3      	lsls	r3, r4, #2
 800ab26:	f100 0514 	add.w	r5, r0, #20
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab30:	9301      	str	r3, [sp, #4]
 800ab32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab42:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab46:	d32e      	bcc.n	800aba6 <quorem+0x96>
 800ab48:	f04f 0a00 	mov.w	sl, #0
 800ab4c:	46c4      	mov	ip, r8
 800ab4e:	46ae      	mov	lr, r5
 800ab50:	46d3      	mov	fp, sl
 800ab52:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ab56:	b298      	uxth	r0, r3
 800ab58:	fb06 a000 	mla	r0, r6, r0, sl
 800ab5c:	0c02      	lsrs	r2, r0, #16
 800ab5e:	0c1b      	lsrs	r3, r3, #16
 800ab60:	fb06 2303 	mla	r3, r6, r3, r2
 800ab64:	f8de 2000 	ldr.w	r2, [lr]
 800ab68:	b280      	uxth	r0, r0
 800ab6a:	b292      	uxth	r2, r2
 800ab6c:	1a12      	subs	r2, r2, r0
 800ab6e:	445a      	add	r2, fp
 800ab70:	f8de 0000 	ldr.w	r0, [lr]
 800ab74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ab7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ab82:	b292      	uxth	r2, r2
 800ab84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ab88:	45e1      	cmp	r9, ip
 800ab8a:	f84e 2b04 	str.w	r2, [lr], #4
 800ab8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ab92:	d2de      	bcs.n	800ab52 <quorem+0x42>
 800ab94:	9b00      	ldr	r3, [sp, #0]
 800ab96:	58eb      	ldr	r3, [r5, r3]
 800ab98:	b92b      	cbnz	r3, 800aba6 <quorem+0x96>
 800ab9a:	9b01      	ldr	r3, [sp, #4]
 800ab9c:	3b04      	subs	r3, #4
 800ab9e:	429d      	cmp	r5, r3
 800aba0:	461a      	mov	r2, r3
 800aba2:	d32f      	bcc.n	800ac04 <quorem+0xf4>
 800aba4:	613c      	str	r4, [r7, #16]
 800aba6:	4638      	mov	r0, r7
 800aba8:	f001 feb4 	bl	800c914 <__mcmp>
 800abac:	2800      	cmp	r0, #0
 800abae:	db25      	blt.n	800abfc <quorem+0xec>
 800abb0:	4629      	mov	r1, r5
 800abb2:	2000      	movs	r0, #0
 800abb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800abb8:	f8d1 c000 	ldr.w	ip, [r1]
 800abbc:	fa1f fe82 	uxth.w	lr, r2
 800abc0:	fa1f f38c 	uxth.w	r3, ip
 800abc4:	eba3 030e 	sub.w	r3, r3, lr
 800abc8:	4403      	add	r3, r0
 800abca:	0c12      	lsrs	r2, r2, #16
 800abcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800abd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abda:	45c1      	cmp	r9, r8
 800abdc:	f841 3b04 	str.w	r3, [r1], #4
 800abe0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800abe4:	d2e6      	bcs.n	800abb4 <quorem+0xa4>
 800abe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abee:	b922      	cbnz	r2, 800abfa <quorem+0xea>
 800abf0:	3b04      	subs	r3, #4
 800abf2:	429d      	cmp	r5, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	d30b      	bcc.n	800ac10 <quorem+0x100>
 800abf8:	613c      	str	r4, [r7, #16]
 800abfa:	3601      	adds	r6, #1
 800abfc:	4630      	mov	r0, r6
 800abfe:	b003      	add	sp, #12
 800ac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac04:	6812      	ldr	r2, [r2, #0]
 800ac06:	3b04      	subs	r3, #4
 800ac08:	2a00      	cmp	r2, #0
 800ac0a:	d1cb      	bne.n	800aba4 <quorem+0x94>
 800ac0c:	3c01      	subs	r4, #1
 800ac0e:	e7c6      	b.n	800ab9e <quorem+0x8e>
 800ac10:	6812      	ldr	r2, [r2, #0]
 800ac12:	3b04      	subs	r3, #4
 800ac14:	2a00      	cmp	r2, #0
 800ac16:	d1ef      	bne.n	800abf8 <quorem+0xe8>
 800ac18:	3c01      	subs	r4, #1
 800ac1a:	e7ea      	b.n	800abf2 <quorem+0xe2>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e7ee      	b.n	800abfe <quorem+0xee>

0800ac20 <_dtoa_r>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	69c7      	ldr	r7, [r0, #28]
 800ac26:	b097      	sub	sp, #92	@ 0x5c
 800ac28:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ac2c:	ec55 4b10 	vmov	r4, r5, d0
 800ac30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ac32:	9107      	str	r1, [sp, #28]
 800ac34:	4681      	mov	r9, r0
 800ac36:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac38:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac3a:	b97f      	cbnz	r7, 800ac5c <_dtoa_r+0x3c>
 800ac3c:	2010      	movs	r0, #16
 800ac3e:	f001 fa39 	bl	800c0b4 <malloc>
 800ac42:	4602      	mov	r2, r0
 800ac44:	f8c9 001c 	str.w	r0, [r9, #28]
 800ac48:	b920      	cbnz	r0, 800ac54 <_dtoa_r+0x34>
 800ac4a:	4ba9      	ldr	r3, [pc, #676]	@ (800aef0 <_dtoa_r+0x2d0>)
 800ac4c:	21ef      	movs	r1, #239	@ 0xef
 800ac4e:	48a9      	ldr	r0, [pc, #676]	@ (800aef4 <_dtoa_r+0x2d4>)
 800ac50:	f002 fa0e 	bl	800d070 <__assert_func>
 800ac54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ac58:	6007      	str	r7, [r0, #0]
 800ac5a:	60c7      	str	r7, [r0, #12]
 800ac5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ac60:	6819      	ldr	r1, [r3, #0]
 800ac62:	b159      	cbz	r1, 800ac7c <_dtoa_r+0x5c>
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	604a      	str	r2, [r1, #4]
 800ac68:	2301      	movs	r3, #1
 800ac6a:	4093      	lsls	r3, r2
 800ac6c:	608b      	str	r3, [r1, #8]
 800ac6e:	4648      	mov	r0, r9
 800ac70:	f001 fbd4 	bl	800c41c <_Bfree>
 800ac74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	1e2b      	subs	r3, r5, #0
 800ac7e:	bfb9      	ittee	lt
 800ac80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ac84:	9305      	strlt	r3, [sp, #20]
 800ac86:	2300      	movge	r3, #0
 800ac88:	6033      	strge	r3, [r6, #0]
 800ac8a:	9f05      	ldr	r7, [sp, #20]
 800ac8c:	4b9a      	ldr	r3, [pc, #616]	@ (800aef8 <_dtoa_r+0x2d8>)
 800ac8e:	bfbc      	itt	lt
 800ac90:	2201      	movlt	r2, #1
 800ac92:	6032      	strlt	r2, [r6, #0]
 800ac94:	43bb      	bics	r3, r7
 800ac96:	d112      	bne.n	800acbe <_dtoa_r+0x9e>
 800ac98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ac9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aca4:	4323      	orrs	r3, r4
 800aca6:	f000 855a 	beq.w	800b75e <_dtoa_r+0xb3e>
 800acaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800acac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800af0c <_dtoa_r+0x2ec>
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 855c 	beq.w	800b76e <_dtoa_r+0xb4e>
 800acb6:	f10a 0303 	add.w	r3, sl, #3
 800acba:	f000 bd56 	b.w	800b76a <_dtoa_r+0xb4a>
 800acbe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800acc2:	2200      	movs	r2, #0
 800acc4:	ec51 0b17 	vmov	r0, r1, d7
 800acc8:	2300      	movs	r3, #0
 800acca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800acce:	f7f5 ff1b 	bl	8000b08 <__aeabi_dcmpeq>
 800acd2:	4680      	mov	r8, r0
 800acd4:	b158      	cbz	r0, 800acee <_dtoa_r+0xce>
 800acd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800acd8:	2301      	movs	r3, #1
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800acde:	b113      	cbz	r3, 800ace6 <_dtoa_r+0xc6>
 800ace0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ace2:	4b86      	ldr	r3, [pc, #536]	@ (800aefc <_dtoa_r+0x2dc>)
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800af10 <_dtoa_r+0x2f0>
 800acea:	f000 bd40 	b.w	800b76e <_dtoa_r+0xb4e>
 800acee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800acf2:	aa14      	add	r2, sp, #80	@ 0x50
 800acf4:	a915      	add	r1, sp, #84	@ 0x54
 800acf6:	4648      	mov	r0, r9
 800acf8:	f001 ff2c 	bl	800cb54 <__d2b>
 800acfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad00:	9002      	str	r0, [sp, #8]
 800ad02:	2e00      	cmp	r6, #0
 800ad04:	d078      	beq.n	800adf8 <_dtoa_r+0x1d8>
 800ad06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad08:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ad0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ad18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ad1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ad20:	4619      	mov	r1, r3
 800ad22:	2200      	movs	r2, #0
 800ad24:	4b76      	ldr	r3, [pc, #472]	@ (800af00 <_dtoa_r+0x2e0>)
 800ad26:	f7f5 facf 	bl	80002c8 <__aeabi_dsub>
 800ad2a:	a36b      	add	r3, pc, #428	@ (adr r3, 800aed8 <_dtoa_r+0x2b8>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 fc82 	bl	8000638 <__aeabi_dmul>
 800ad34:	a36a      	add	r3, pc, #424	@ (adr r3, 800aee0 <_dtoa_r+0x2c0>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f7f5 fac7 	bl	80002cc <__adddf3>
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4630      	mov	r0, r6
 800ad42:	460d      	mov	r5, r1
 800ad44:	f7f5 fc0e 	bl	8000564 <__aeabi_i2d>
 800ad48:	a367      	add	r3, pc, #412	@ (adr r3, 800aee8 <_dtoa_r+0x2c8>)
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	f7f5 fc73 	bl	8000638 <__aeabi_dmul>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4620      	mov	r0, r4
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7f5 fab7 	bl	80002cc <__adddf3>
 800ad5e:	4604      	mov	r4, r0
 800ad60:	460d      	mov	r5, r1
 800ad62:	f7f5 ff19 	bl	8000b98 <__aeabi_d2iz>
 800ad66:	2200      	movs	r2, #0
 800ad68:	4607      	mov	r7, r0
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f7f5 fed4 	bl	8000b1c <__aeabi_dcmplt>
 800ad74:	b140      	cbz	r0, 800ad88 <_dtoa_r+0x168>
 800ad76:	4638      	mov	r0, r7
 800ad78:	f7f5 fbf4 	bl	8000564 <__aeabi_i2d>
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	462b      	mov	r3, r5
 800ad80:	f7f5 fec2 	bl	8000b08 <__aeabi_dcmpeq>
 800ad84:	b900      	cbnz	r0, 800ad88 <_dtoa_r+0x168>
 800ad86:	3f01      	subs	r7, #1
 800ad88:	2f16      	cmp	r7, #22
 800ad8a:	d852      	bhi.n	800ae32 <_dtoa_r+0x212>
 800ad8c:	4b5d      	ldr	r3, [pc, #372]	@ (800af04 <_dtoa_r+0x2e4>)
 800ad8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad9a:	f7f5 febf 	bl	8000b1c <__aeabi_dcmplt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d049      	beq.n	800ae36 <_dtoa_r+0x216>
 800ada2:	3f01      	subs	r7, #1
 800ada4:	2300      	movs	r3, #0
 800ada6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ada8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adaa:	1b9b      	subs	r3, r3, r6
 800adac:	1e5a      	subs	r2, r3, #1
 800adae:	bf45      	ittet	mi
 800adb0:	f1c3 0301 	rsbmi	r3, r3, #1
 800adb4:	9300      	strmi	r3, [sp, #0]
 800adb6:	2300      	movpl	r3, #0
 800adb8:	2300      	movmi	r3, #0
 800adba:	9206      	str	r2, [sp, #24]
 800adbc:	bf54      	ite	pl
 800adbe:	9300      	strpl	r3, [sp, #0]
 800adc0:	9306      	strmi	r3, [sp, #24]
 800adc2:	2f00      	cmp	r7, #0
 800adc4:	db39      	blt.n	800ae3a <_dtoa_r+0x21a>
 800adc6:	9b06      	ldr	r3, [sp, #24]
 800adc8:	970d      	str	r7, [sp, #52]	@ 0x34
 800adca:	443b      	add	r3, r7
 800adcc:	9306      	str	r3, [sp, #24]
 800adce:	2300      	movs	r3, #0
 800add0:	9308      	str	r3, [sp, #32]
 800add2:	9b07      	ldr	r3, [sp, #28]
 800add4:	2b09      	cmp	r3, #9
 800add6:	d863      	bhi.n	800aea0 <_dtoa_r+0x280>
 800add8:	2b05      	cmp	r3, #5
 800adda:	bfc4      	itt	gt
 800addc:	3b04      	subgt	r3, #4
 800adde:	9307      	strgt	r3, [sp, #28]
 800ade0:	9b07      	ldr	r3, [sp, #28]
 800ade2:	f1a3 0302 	sub.w	r3, r3, #2
 800ade6:	bfcc      	ite	gt
 800ade8:	2400      	movgt	r4, #0
 800adea:	2401      	movle	r4, #1
 800adec:	2b03      	cmp	r3, #3
 800adee:	d863      	bhi.n	800aeb8 <_dtoa_r+0x298>
 800adf0:	e8df f003 	tbb	[pc, r3]
 800adf4:	2b375452 	.word	0x2b375452
 800adf8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800adfc:	441e      	add	r6, r3
 800adfe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae02:	2b20      	cmp	r3, #32
 800ae04:	bfc1      	itttt	gt
 800ae06:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae0a:	409f      	lslgt	r7, r3
 800ae0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae10:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ae14:	bfd6      	itet	le
 800ae16:	f1c3 0320 	rsble	r3, r3, #32
 800ae1a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ae1e:	fa04 f003 	lslle.w	r0, r4, r3
 800ae22:	f7f5 fb8f 	bl	8000544 <__aeabi_ui2d>
 800ae26:	2201      	movs	r2, #1
 800ae28:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ae2c:	3e01      	subs	r6, #1
 800ae2e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ae30:	e776      	b.n	800ad20 <_dtoa_r+0x100>
 800ae32:	2301      	movs	r3, #1
 800ae34:	e7b7      	b.n	800ada6 <_dtoa_r+0x186>
 800ae36:	9010      	str	r0, [sp, #64]	@ 0x40
 800ae38:	e7b6      	b.n	800ada8 <_dtoa_r+0x188>
 800ae3a:	9b00      	ldr	r3, [sp, #0]
 800ae3c:	1bdb      	subs	r3, r3, r7
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	427b      	negs	r3, r7
 800ae42:	9308      	str	r3, [sp, #32]
 800ae44:	2300      	movs	r3, #0
 800ae46:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae48:	e7c3      	b.n	800add2 <_dtoa_r+0x1b2>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae50:	eb07 0b03 	add.w	fp, r7, r3
 800ae54:	f10b 0301 	add.w	r3, fp, #1
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	9303      	str	r3, [sp, #12]
 800ae5c:	bfb8      	it	lt
 800ae5e:	2301      	movlt	r3, #1
 800ae60:	e006      	b.n	800ae70 <_dtoa_r+0x250>
 800ae62:	2301      	movs	r3, #1
 800ae64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	dd28      	ble.n	800aebe <_dtoa_r+0x29e>
 800ae6c:	469b      	mov	fp, r3
 800ae6e:	9303      	str	r3, [sp, #12]
 800ae70:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ae74:	2100      	movs	r1, #0
 800ae76:	2204      	movs	r2, #4
 800ae78:	f102 0514 	add.w	r5, r2, #20
 800ae7c:	429d      	cmp	r5, r3
 800ae7e:	d926      	bls.n	800aece <_dtoa_r+0x2ae>
 800ae80:	6041      	str	r1, [r0, #4]
 800ae82:	4648      	mov	r0, r9
 800ae84:	f001 fa8a 	bl	800c39c <_Balloc>
 800ae88:	4682      	mov	sl, r0
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d142      	bne.n	800af14 <_dtoa_r+0x2f4>
 800ae8e:	4b1e      	ldr	r3, [pc, #120]	@ (800af08 <_dtoa_r+0x2e8>)
 800ae90:	4602      	mov	r2, r0
 800ae92:	f240 11af 	movw	r1, #431	@ 0x1af
 800ae96:	e6da      	b.n	800ac4e <_dtoa_r+0x2e>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	e7e3      	b.n	800ae64 <_dtoa_r+0x244>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e7d5      	b.n	800ae4c <_dtoa_r+0x22c>
 800aea0:	2401      	movs	r4, #1
 800aea2:	2300      	movs	r3, #0
 800aea4:	9307      	str	r3, [sp, #28]
 800aea6:	9409      	str	r4, [sp, #36]	@ 0x24
 800aea8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8cd b00c 	str.w	fp, [sp, #12]
 800aeb2:	2312      	movs	r3, #18
 800aeb4:	920c      	str	r2, [sp, #48]	@ 0x30
 800aeb6:	e7db      	b.n	800ae70 <_dtoa_r+0x250>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	9309      	str	r3, [sp, #36]	@ 0x24
 800aebc:	e7f4      	b.n	800aea8 <_dtoa_r+0x288>
 800aebe:	f04f 0b01 	mov.w	fp, #1
 800aec2:	f8cd b00c 	str.w	fp, [sp, #12]
 800aec6:	465b      	mov	r3, fp
 800aec8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800aecc:	e7d0      	b.n	800ae70 <_dtoa_r+0x250>
 800aece:	3101      	adds	r1, #1
 800aed0:	0052      	lsls	r2, r2, #1
 800aed2:	e7d1      	b.n	800ae78 <_dtoa_r+0x258>
 800aed4:	f3af 8000 	nop.w
 800aed8:	636f4361 	.word	0x636f4361
 800aedc:	3fd287a7 	.word	0x3fd287a7
 800aee0:	8b60c8b3 	.word	0x8b60c8b3
 800aee4:	3fc68a28 	.word	0x3fc68a28
 800aee8:	509f79fb 	.word	0x509f79fb
 800aeec:	3fd34413 	.word	0x3fd34413
 800aef0:	0800d33f 	.word	0x0800d33f
 800aef4:	0800d356 	.word	0x0800d356
 800aef8:	7ff00000 	.word	0x7ff00000
 800aefc:	0800d305 	.word	0x0800d305
 800af00:	3ff80000 	.word	0x3ff80000
 800af04:	0800d650 	.word	0x0800d650
 800af08:	0800d3ae 	.word	0x0800d3ae
 800af0c:	0800d33b 	.word	0x0800d33b
 800af10:	0800d304 	.word	0x0800d304
 800af14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800af18:	6018      	str	r0, [r3, #0]
 800af1a:	9b03      	ldr	r3, [sp, #12]
 800af1c:	2b0e      	cmp	r3, #14
 800af1e:	f200 80a1 	bhi.w	800b064 <_dtoa_r+0x444>
 800af22:	2c00      	cmp	r4, #0
 800af24:	f000 809e 	beq.w	800b064 <_dtoa_r+0x444>
 800af28:	2f00      	cmp	r7, #0
 800af2a:	dd33      	ble.n	800af94 <_dtoa_r+0x374>
 800af2c:	4b9c      	ldr	r3, [pc, #624]	@ (800b1a0 <_dtoa_r+0x580>)
 800af2e:	f007 020f 	and.w	r2, r7, #15
 800af32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af36:	ed93 7b00 	vldr	d7, [r3]
 800af3a:	05f8      	lsls	r0, r7, #23
 800af3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800af40:	ea4f 1427 	mov.w	r4, r7, asr #4
 800af44:	d516      	bpl.n	800af74 <_dtoa_r+0x354>
 800af46:	4b97      	ldr	r3, [pc, #604]	@ (800b1a4 <_dtoa_r+0x584>)
 800af48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af50:	f7f5 fc9c 	bl	800088c <__aeabi_ddiv>
 800af54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af58:	f004 040f 	and.w	r4, r4, #15
 800af5c:	2603      	movs	r6, #3
 800af5e:	4d91      	ldr	r5, [pc, #580]	@ (800b1a4 <_dtoa_r+0x584>)
 800af60:	b954      	cbnz	r4, 800af78 <_dtoa_r+0x358>
 800af62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af6a:	f7f5 fc8f 	bl	800088c <__aeabi_ddiv>
 800af6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af72:	e028      	b.n	800afc6 <_dtoa_r+0x3a6>
 800af74:	2602      	movs	r6, #2
 800af76:	e7f2      	b.n	800af5e <_dtoa_r+0x33e>
 800af78:	07e1      	lsls	r1, r4, #31
 800af7a:	d508      	bpl.n	800af8e <_dtoa_r+0x36e>
 800af7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800af80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af84:	f7f5 fb58 	bl	8000638 <__aeabi_dmul>
 800af88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af8c:	3601      	adds	r6, #1
 800af8e:	1064      	asrs	r4, r4, #1
 800af90:	3508      	adds	r5, #8
 800af92:	e7e5      	b.n	800af60 <_dtoa_r+0x340>
 800af94:	f000 80af 	beq.w	800b0f6 <_dtoa_r+0x4d6>
 800af98:	427c      	negs	r4, r7
 800af9a:	4b81      	ldr	r3, [pc, #516]	@ (800b1a0 <_dtoa_r+0x580>)
 800af9c:	4d81      	ldr	r5, [pc, #516]	@ (800b1a4 <_dtoa_r+0x584>)
 800af9e:	f004 020f 	and.w	r2, r4, #15
 800afa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800afae:	f7f5 fb43 	bl	8000638 <__aeabi_dmul>
 800afb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afb6:	1124      	asrs	r4, r4, #4
 800afb8:	2300      	movs	r3, #0
 800afba:	2602      	movs	r6, #2
 800afbc:	2c00      	cmp	r4, #0
 800afbe:	f040 808f 	bne.w	800b0e0 <_dtoa_r+0x4c0>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1d3      	bne.n	800af6e <_dtoa_r+0x34e>
 800afc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800afc8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 8094 	beq.w	800b0fa <_dtoa_r+0x4da>
 800afd2:	4b75      	ldr	r3, [pc, #468]	@ (800b1a8 <_dtoa_r+0x588>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	4620      	mov	r0, r4
 800afd8:	4629      	mov	r1, r5
 800afda:	f7f5 fd9f 	bl	8000b1c <__aeabi_dcmplt>
 800afde:	2800      	cmp	r0, #0
 800afe0:	f000 808b 	beq.w	800b0fa <_dtoa_r+0x4da>
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 8087 	beq.w	800b0fa <_dtoa_r+0x4da>
 800afec:	f1bb 0f00 	cmp.w	fp, #0
 800aff0:	dd34      	ble.n	800b05c <_dtoa_r+0x43c>
 800aff2:	4620      	mov	r0, r4
 800aff4:	4b6d      	ldr	r3, [pc, #436]	@ (800b1ac <_dtoa_r+0x58c>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	4629      	mov	r1, r5
 800affa:	f7f5 fb1d 	bl	8000638 <__aeabi_dmul>
 800affe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b002:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b006:	3601      	adds	r6, #1
 800b008:	465c      	mov	r4, fp
 800b00a:	4630      	mov	r0, r6
 800b00c:	f7f5 faaa 	bl	8000564 <__aeabi_i2d>
 800b010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b014:	f7f5 fb10 	bl	8000638 <__aeabi_dmul>
 800b018:	4b65      	ldr	r3, [pc, #404]	@ (800b1b0 <_dtoa_r+0x590>)
 800b01a:	2200      	movs	r2, #0
 800b01c:	f7f5 f956 	bl	80002cc <__adddf3>
 800b020:	4605      	mov	r5, r0
 800b022:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b026:	2c00      	cmp	r4, #0
 800b028:	d16a      	bne.n	800b100 <_dtoa_r+0x4e0>
 800b02a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b02e:	4b61      	ldr	r3, [pc, #388]	@ (800b1b4 <_dtoa_r+0x594>)
 800b030:	2200      	movs	r2, #0
 800b032:	f7f5 f949 	bl	80002c8 <__aeabi_dsub>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b03e:	462a      	mov	r2, r5
 800b040:	4633      	mov	r3, r6
 800b042:	f7f5 fd89 	bl	8000b58 <__aeabi_dcmpgt>
 800b046:	2800      	cmp	r0, #0
 800b048:	f040 8298 	bne.w	800b57c <_dtoa_r+0x95c>
 800b04c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b050:	462a      	mov	r2, r5
 800b052:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b056:	f7f5 fd61 	bl	8000b1c <__aeabi_dcmplt>
 800b05a:	bb38      	cbnz	r0, 800b0ac <_dtoa_r+0x48c>
 800b05c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b060:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b064:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b066:	2b00      	cmp	r3, #0
 800b068:	f2c0 8157 	blt.w	800b31a <_dtoa_r+0x6fa>
 800b06c:	2f0e      	cmp	r7, #14
 800b06e:	f300 8154 	bgt.w	800b31a <_dtoa_r+0x6fa>
 800b072:	4b4b      	ldr	r3, [pc, #300]	@ (800b1a0 <_dtoa_r+0x580>)
 800b074:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b078:	ed93 7b00 	vldr	d7, [r3]
 800b07c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b07e:	2b00      	cmp	r3, #0
 800b080:	ed8d 7b00 	vstr	d7, [sp]
 800b084:	f280 80e5 	bge.w	800b252 <_dtoa_r+0x632>
 800b088:	9b03      	ldr	r3, [sp, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f300 80e1 	bgt.w	800b252 <_dtoa_r+0x632>
 800b090:	d10c      	bne.n	800b0ac <_dtoa_r+0x48c>
 800b092:	4b48      	ldr	r3, [pc, #288]	@ (800b1b4 <_dtoa_r+0x594>)
 800b094:	2200      	movs	r2, #0
 800b096:	ec51 0b17 	vmov	r0, r1, d7
 800b09a:	f7f5 facd 	bl	8000638 <__aeabi_dmul>
 800b09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0a2:	f7f5 fd4f 	bl	8000b44 <__aeabi_dcmpge>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f000 8266 	beq.w	800b578 <_dtoa_r+0x958>
 800b0ac:	2400      	movs	r4, #0
 800b0ae:	4625      	mov	r5, r4
 800b0b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0b2:	4656      	mov	r6, sl
 800b0b4:	ea6f 0803 	mvn.w	r8, r3
 800b0b8:	2700      	movs	r7, #0
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f001 f9ad 	bl	800c41c <_Bfree>
 800b0c2:	2d00      	cmp	r5, #0
 800b0c4:	f000 80bd 	beq.w	800b242 <_dtoa_r+0x622>
 800b0c8:	b12f      	cbz	r7, 800b0d6 <_dtoa_r+0x4b6>
 800b0ca:	42af      	cmp	r7, r5
 800b0cc:	d003      	beq.n	800b0d6 <_dtoa_r+0x4b6>
 800b0ce:	4639      	mov	r1, r7
 800b0d0:	4648      	mov	r0, r9
 800b0d2:	f001 f9a3 	bl	800c41c <_Bfree>
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	4648      	mov	r0, r9
 800b0da:	f001 f99f 	bl	800c41c <_Bfree>
 800b0de:	e0b0      	b.n	800b242 <_dtoa_r+0x622>
 800b0e0:	07e2      	lsls	r2, r4, #31
 800b0e2:	d505      	bpl.n	800b0f0 <_dtoa_r+0x4d0>
 800b0e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0e8:	f7f5 faa6 	bl	8000638 <__aeabi_dmul>
 800b0ec:	3601      	adds	r6, #1
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	1064      	asrs	r4, r4, #1
 800b0f2:	3508      	adds	r5, #8
 800b0f4:	e762      	b.n	800afbc <_dtoa_r+0x39c>
 800b0f6:	2602      	movs	r6, #2
 800b0f8:	e765      	b.n	800afc6 <_dtoa_r+0x3a6>
 800b0fa:	9c03      	ldr	r4, [sp, #12]
 800b0fc:	46b8      	mov	r8, r7
 800b0fe:	e784      	b.n	800b00a <_dtoa_r+0x3ea>
 800b100:	4b27      	ldr	r3, [pc, #156]	@ (800b1a0 <_dtoa_r+0x580>)
 800b102:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b104:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b108:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b10c:	4454      	add	r4, sl
 800b10e:	2900      	cmp	r1, #0
 800b110:	d054      	beq.n	800b1bc <_dtoa_r+0x59c>
 800b112:	4929      	ldr	r1, [pc, #164]	@ (800b1b8 <_dtoa_r+0x598>)
 800b114:	2000      	movs	r0, #0
 800b116:	f7f5 fbb9 	bl	800088c <__aeabi_ddiv>
 800b11a:	4633      	mov	r3, r6
 800b11c:	462a      	mov	r2, r5
 800b11e:	f7f5 f8d3 	bl	80002c8 <__aeabi_dsub>
 800b122:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b126:	4656      	mov	r6, sl
 800b128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b12c:	f7f5 fd34 	bl	8000b98 <__aeabi_d2iz>
 800b130:	4605      	mov	r5, r0
 800b132:	f7f5 fa17 	bl	8000564 <__aeabi_i2d>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b13e:	f7f5 f8c3 	bl	80002c8 <__aeabi_dsub>
 800b142:	3530      	adds	r5, #48	@ 0x30
 800b144:	4602      	mov	r2, r0
 800b146:	460b      	mov	r3, r1
 800b148:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b14c:	f806 5b01 	strb.w	r5, [r6], #1
 800b150:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b154:	f7f5 fce2 	bl	8000b1c <__aeabi_dcmplt>
 800b158:	2800      	cmp	r0, #0
 800b15a:	d172      	bne.n	800b242 <_dtoa_r+0x622>
 800b15c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b160:	4911      	ldr	r1, [pc, #68]	@ (800b1a8 <_dtoa_r+0x588>)
 800b162:	2000      	movs	r0, #0
 800b164:	f7f5 f8b0 	bl	80002c8 <__aeabi_dsub>
 800b168:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b16c:	f7f5 fcd6 	bl	8000b1c <__aeabi_dcmplt>
 800b170:	2800      	cmp	r0, #0
 800b172:	f040 80b4 	bne.w	800b2de <_dtoa_r+0x6be>
 800b176:	42a6      	cmp	r6, r4
 800b178:	f43f af70 	beq.w	800b05c <_dtoa_r+0x43c>
 800b17c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b180:	4b0a      	ldr	r3, [pc, #40]	@ (800b1ac <_dtoa_r+0x58c>)
 800b182:	2200      	movs	r2, #0
 800b184:	f7f5 fa58 	bl	8000638 <__aeabi_dmul>
 800b188:	4b08      	ldr	r3, [pc, #32]	@ (800b1ac <_dtoa_r+0x58c>)
 800b18a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b18e:	2200      	movs	r2, #0
 800b190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b194:	f7f5 fa50 	bl	8000638 <__aeabi_dmul>
 800b198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b19c:	e7c4      	b.n	800b128 <_dtoa_r+0x508>
 800b19e:	bf00      	nop
 800b1a0:	0800d650 	.word	0x0800d650
 800b1a4:	0800d628 	.word	0x0800d628
 800b1a8:	3ff00000 	.word	0x3ff00000
 800b1ac:	40240000 	.word	0x40240000
 800b1b0:	401c0000 	.word	0x401c0000
 800b1b4:	40140000 	.word	0x40140000
 800b1b8:	3fe00000 	.word	0x3fe00000
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f7f5 fa3a 	bl	8000638 <__aeabi_dmul>
 800b1c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b1ca:	4656      	mov	r6, sl
 800b1cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1d0:	f7f5 fce2 	bl	8000b98 <__aeabi_d2iz>
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	f7f5 f9c5 	bl	8000564 <__aeabi_i2d>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	460b      	mov	r3, r1
 800b1de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1e2:	f7f5 f871 	bl	80002c8 <__aeabi_dsub>
 800b1e6:	3530      	adds	r5, #48	@ 0x30
 800b1e8:	f806 5b01 	strb.w	r5, [r6], #1
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	42a6      	cmp	r6, r4
 800b1f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1f6:	f04f 0200 	mov.w	r2, #0
 800b1fa:	d124      	bne.n	800b246 <_dtoa_r+0x626>
 800b1fc:	4baf      	ldr	r3, [pc, #700]	@ (800b4bc <_dtoa_r+0x89c>)
 800b1fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b202:	f7f5 f863 	bl	80002cc <__adddf3>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b20e:	f7f5 fca3 	bl	8000b58 <__aeabi_dcmpgt>
 800b212:	2800      	cmp	r0, #0
 800b214:	d163      	bne.n	800b2de <_dtoa_r+0x6be>
 800b216:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b21a:	49a8      	ldr	r1, [pc, #672]	@ (800b4bc <_dtoa_r+0x89c>)
 800b21c:	2000      	movs	r0, #0
 800b21e:	f7f5 f853 	bl	80002c8 <__aeabi_dsub>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b22a:	f7f5 fc77 	bl	8000b1c <__aeabi_dcmplt>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f43f af14 	beq.w	800b05c <_dtoa_r+0x43c>
 800b234:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b236:	1e73      	subs	r3, r6, #1
 800b238:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b23a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b23e:	2b30      	cmp	r3, #48	@ 0x30
 800b240:	d0f8      	beq.n	800b234 <_dtoa_r+0x614>
 800b242:	4647      	mov	r7, r8
 800b244:	e03b      	b.n	800b2be <_dtoa_r+0x69e>
 800b246:	4b9e      	ldr	r3, [pc, #632]	@ (800b4c0 <_dtoa_r+0x8a0>)
 800b248:	f7f5 f9f6 	bl	8000638 <__aeabi_dmul>
 800b24c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b250:	e7bc      	b.n	800b1cc <_dtoa_r+0x5ac>
 800b252:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b256:	4656      	mov	r6, sl
 800b258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b25c:	4620      	mov	r0, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f5 fb14 	bl	800088c <__aeabi_ddiv>
 800b264:	f7f5 fc98 	bl	8000b98 <__aeabi_d2iz>
 800b268:	4680      	mov	r8, r0
 800b26a:	f7f5 f97b 	bl	8000564 <__aeabi_i2d>
 800b26e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b272:	f7f5 f9e1 	bl	8000638 <__aeabi_dmul>
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	4620      	mov	r0, r4
 800b27c:	4629      	mov	r1, r5
 800b27e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b282:	f7f5 f821 	bl	80002c8 <__aeabi_dsub>
 800b286:	f806 4b01 	strb.w	r4, [r6], #1
 800b28a:	9d03      	ldr	r5, [sp, #12]
 800b28c:	eba6 040a 	sub.w	r4, r6, sl
 800b290:	42a5      	cmp	r5, r4
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	d133      	bne.n	800b300 <_dtoa_r+0x6e0>
 800b298:	f7f5 f818 	bl	80002cc <__adddf3>
 800b29c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	f7f5 fc58 	bl	8000b58 <__aeabi_dcmpgt>
 800b2a8:	b9c0      	cbnz	r0, 800b2dc <_dtoa_r+0x6bc>
 800b2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	f7f5 fc29 	bl	8000b08 <__aeabi_dcmpeq>
 800b2b6:	b110      	cbz	r0, 800b2be <_dtoa_r+0x69e>
 800b2b8:	f018 0f01 	tst.w	r8, #1
 800b2bc:	d10e      	bne.n	800b2dc <_dtoa_r+0x6bc>
 800b2be:	9902      	ldr	r1, [sp, #8]
 800b2c0:	4648      	mov	r0, r9
 800b2c2:	f001 f8ab 	bl	800c41c <_Bfree>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	7033      	strb	r3, [r6, #0]
 800b2ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2cc:	3701      	adds	r7, #1
 800b2ce:	601f      	str	r7, [r3, #0]
 800b2d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 824b 	beq.w	800b76e <_dtoa_r+0xb4e>
 800b2d8:	601e      	str	r6, [r3, #0]
 800b2da:	e248      	b.n	800b76e <_dtoa_r+0xb4e>
 800b2dc:	46b8      	mov	r8, r7
 800b2de:	4633      	mov	r3, r6
 800b2e0:	461e      	mov	r6, r3
 800b2e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2e6:	2a39      	cmp	r2, #57	@ 0x39
 800b2e8:	d106      	bne.n	800b2f8 <_dtoa_r+0x6d8>
 800b2ea:	459a      	cmp	sl, r3
 800b2ec:	d1f8      	bne.n	800b2e0 <_dtoa_r+0x6c0>
 800b2ee:	2230      	movs	r2, #48	@ 0x30
 800b2f0:	f108 0801 	add.w	r8, r8, #1
 800b2f4:	f88a 2000 	strb.w	r2, [sl]
 800b2f8:	781a      	ldrb	r2, [r3, #0]
 800b2fa:	3201      	adds	r2, #1
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	e7a0      	b.n	800b242 <_dtoa_r+0x622>
 800b300:	4b6f      	ldr	r3, [pc, #444]	@ (800b4c0 <_dtoa_r+0x8a0>)
 800b302:	2200      	movs	r2, #0
 800b304:	f7f5 f998 	bl	8000638 <__aeabi_dmul>
 800b308:	2200      	movs	r2, #0
 800b30a:	2300      	movs	r3, #0
 800b30c:	4604      	mov	r4, r0
 800b30e:	460d      	mov	r5, r1
 800b310:	f7f5 fbfa 	bl	8000b08 <__aeabi_dcmpeq>
 800b314:	2800      	cmp	r0, #0
 800b316:	d09f      	beq.n	800b258 <_dtoa_r+0x638>
 800b318:	e7d1      	b.n	800b2be <_dtoa_r+0x69e>
 800b31a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	f000 80ea 	beq.w	800b4f6 <_dtoa_r+0x8d6>
 800b322:	9a07      	ldr	r2, [sp, #28]
 800b324:	2a01      	cmp	r2, #1
 800b326:	f300 80cd 	bgt.w	800b4c4 <_dtoa_r+0x8a4>
 800b32a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b32c:	2a00      	cmp	r2, #0
 800b32e:	f000 80c1 	beq.w	800b4b4 <_dtoa_r+0x894>
 800b332:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b336:	9c08      	ldr	r4, [sp, #32]
 800b338:	9e00      	ldr	r6, [sp, #0]
 800b33a:	9a00      	ldr	r2, [sp, #0]
 800b33c:	441a      	add	r2, r3
 800b33e:	9200      	str	r2, [sp, #0]
 800b340:	9a06      	ldr	r2, [sp, #24]
 800b342:	2101      	movs	r1, #1
 800b344:	441a      	add	r2, r3
 800b346:	4648      	mov	r0, r9
 800b348:	9206      	str	r2, [sp, #24]
 800b34a:	f001 f965 	bl	800c618 <__i2b>
 800b34e:	4605      	mov	r5, r0
 800b350:	b166      	cbz	r6, 800b36c <_dtoa_r+0x74c>
 800b352:	9b06      	ldr	r3, [sp, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	dd09      	ble.n	800b36c <_dtoa_r+0x74c>
 800b358:	42b3      	cmp	r3, r6
 800b35a:	9a00      	ldr	r2, [sp, #0]
 800b35c:	bfa8      	it	ge
 800b35e:	4633      	movge	r3, r6
 800b360:	1ad2      	subs	r2, r2, r3
 800b362:	9200      	str	r2, [sp, #0]
 800b364:	9a06      	ldr	r2, [sp, #24]
 800b366:	1af6      	subs	r6, r6, r3
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	9306      	str	r3, [sp, #24]
 800b36c:	9b08      	ldr	r3, [sp, #32]
 800b36e:	b30b      	cbz	r3, 800b3b4 <_dtoa_r+0x794>
 800b370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 80c6 	beq.w	800b504 <_dtoa_r+0x8e4>
 800b378:	2c00      	cmp	r4, #0
 800b37a:	f000 80c0 	beq.w	800b4fe <_dtoa_r+0x8de>
 800b37e:	4629      	mov	r1, r5
 800b380:	4622      	mov	r2, r4
 800b382:	4648      	mov	r0, r9
 800b384:	f001 fa00 	bl	800c788 <__pow5mult>
 800b388:	9a02      	ldr	r2, [sp, #8]
 800b38a:	4601      	mov	r1, r0
 800b38c:	4605      	mov	r5, r0
 800b38e:	4648      	mov	r0, r9
 800b390:	f001 f958 	bl	800c644 <__multiply>
 800b394:	9902      	ldr	r1, [sp, #8]
 800b396:	4680      	mov	r8, r0
 800b398:	4648      	mov	r0, r9
 800b39a:	f001 f83f 	bl	800c41c <_Bfree>
 800b39e:	9b08      	ldr	r3, [sp, #32]
 800b3a0:	1b1b      	subs	r3, r3, r4
 800b3a2:	9308      	str	r3, [sp, #32]
 800b3a4:	f000 80b1 	beq.w	800b50a <_dtoa_r+0x8ea>
 800b3a8:	9a08      	ldr	r2, [sp, #32]
 800b3aa:	4641      	mov	r1, r8
 800b3ac:	4648      	mov	r0, r9
 800b3ae:	f001 f9eb 	bl	800c788 <__pow5mult>
 800b3b2:	9002      	str	r0, [sp, #8]
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	4648      	mov	r0, r9
 800b3b8:	f001 f92e 	bl	800c618 <__i2b>
 800b3bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3be:	4604      	mov	r4, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 81d8 	beq.w	800b776 <_dtoa_r+0xb56>
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	4601      	mov	r1, r0
 800b3ca:	4648      	mov	r0, r9
 800b3cc:	f001 f9dc 	bl	800c788 <__pow5mult>
 800b3d0:	9b07      	ldr	r3, [sp, #28]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	f300 809f 	bgt.w	800b518 <_dtoa_r+0x8f8>
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f040 8097 	bne.w	800b510 <_dtoa_r+0x8f0>
 800b3e2:	9b05      	ldr	r3, [sp, #20]
 800b3e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f040 8093 	bne.w	800b514 <_dtoa_r+0x8f4>
 800b3ee:	9b05      	ldr	r3, [sp, #20]
 800b3f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3f4:	0d1b      	lsrs	r3, r3, #20
 800b3f6:	051b      	lsls	r3, r3, #20
 800b3f8:	b133      	cbz	r3, 800b408 <_dtoa_r+0x7e8>
 800b3fa:	9b00      	ldr	r3, [sp, #0]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	9b06      	ldr	r3, [sp, #24]
 800b402:	3301      	adds	r3, #1
 800b404:	9306      	str	r3, [sp, #24]
 800b406:	2301      	movs	r3, #1
 800b408:	9308      	str	r3, [sp, #32]
 800b40a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 81b8 	beq.w	800b782 <_dtoa_r+0xb62>
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b418:	6918      	ldr	r0, [r3, #16]
 800b41a:	f001 f8b1 	bl	800c580 <__hi0bits>
 800b41e:	f1c0 0020 	rsb	r0, r0, #32
 800b422:	9b06      	ldr	r3, [sp, #24]
 800b424:	4418      	add	r0, r3
 800b426:	f010 001f 	ands.w	r0, r0, #31
 800b42a:	f000 8082 	beq.w	800b532 <_dtoa_r+0x912>
 800b42e:	f1c0 0320 	rsb	r3, r0, #32
 800b432:	2b04      	cmp	r3, #4
 800b434:	dd73      	ble.n	800b51e <_dtoa_r+0x8fe>
 800b436:	9b00      	ldr	r3, [sp, #0]
 800b438:	f1c0 001c 	rsb	r0, r0, #28
 800b43c:	4403      	add	r3, r0
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	9b06      	ldr	r3, [sp, #24]
 800b442:	4403      	add	r3, r0
 800b444:	4406      	add	r6, r0
 800b446:	9306      	str	r3, [sp, #24]
 800b448:	9b00      	ldr	r3, [sp, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dd05      	ble.n	800b45a <_dtoa_r+0x83a>
 800b44e:	9902      	ldr	r1, [sp, #8]
 800b450:	461a      	mov	r2, r3
 800b452:	4648      	mov	r0, r9
 800b454:	f001 f9f2 	bl	800c83c <__lshift>
 800b458:	9002      	str	r0, [sp, #8]
 800b45a:	9b06      	ldr	r3, [sp, #24]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dd05      	ble.n	800b46c <_dtoa_r+0x84c>
 800b460:	4621      	mov	r1, r4
 800b462:	461a      	mov	r2, r3
 800b464:	4648      	mov	r0, r9
 800b466:	f001 f9e9 	bl	800c83c <__lshift>
 800b46a:	4604      	mov	r4, r0
 800b46c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d061      	beq.n	800b536 <_dtoa_r+0x916>
 800b472:	9802      	ldr	r0, [sp, #8]
 800b474:	4621      	mov	r1, r4
 800b476:	f001 fa4d 	bl	800c914 <__mcmp>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	da5b      	bge.n	800b536 <_dtoa_r+0x916>
 800b47e:	2300      	movs	r3, #0
 800b480:	9902      	ldr	r1, [sp, #8]
 800b482:	220a      	movs	r2, #10
 800b484:	4648      	mov	r0, r9
 800b486:	f000 ffeb 	bl	800c460 <__multadd>
 800b48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b48c:	9002      	str	r0, [sp, #8]
 800b48e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 8177 	beq.w	800b786 <_dtoa_r+0xb66>
 800b498:	4629      	mov	r1, r5
 800b49a:	2300      	movs	r3, #0
 800b49c:	220a      	movs	r2, #10
 800b49e:	4648      	mov	r0, r9
 800b4a0:	f000 ffde 	bl	800c460 <__multadd>
 800b4a4:	f1bb 0f00 	cmp.w	fp, #0
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	dc6f      	bgt.n	800b58c <_dtoa_r+0x96c>
 800b4ac:	9b07      	ldr	r3, [sp, #28]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	dc49      	bgt.n	800b546 <_dtoa_r+0x926>
 800b4b2:	e06b      	b.n	800b58c <_dtoa_r+0x96c>
 800b4b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b4b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b4ba:	e73c      	b.n	800b336 <_dtoa_r+0x716>
 800b4bc:	3fe00000 	.word	0x3fe00000
 800b4c0:	40240000 	.word	0x40240000
 800b4c4:	9b03      	ldr	r3, [sp, #12]
 800b4c6:	1e5c      	subs	r4, r3, #1
 800b4c8:	9b08      	ldr	r3, [sp, #32]
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	db09      	blt.n	800b4e2 <_dtoa_r+0x8c2>
 800b4ce:	1b1c      	subs	r4, r3, r4
 800b4d0:	9b03      	ldr	r3, [sp, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f6bf af30 	bge.w	800b338 <_dtoa_r+0x718>
 800b4d8:	9b00      	ldr	r3, [sp, #0]
 800b4da:	9a03      	ldr	r2, [sp, #12]
 800b4dc:	1a9e      	subs	r6, r3, r2
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e72b      	b.n	800b33a <_dtoa_r+0x71a>
 800b4e2:	9b08      	ldr	r3, [sp, #32]
 800b4e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4e6:	9408      	str	r4, [sp, #32]
 800b4e8:	1ae3      	subs	r3, r4, r3
 800b4ea:	441a      	add	r2, r3
 800b4ec:	9e00      	ldr	r6, [sp, #0]
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b4f2:	2400      	movs	r4, #0
 800b4f4:	e721      	b.n	800b33a <_dtoa_r+0x71a>
 800b4f6:	9c08      	ldr	r4, [sp, #32]
 800b4f8:	9e00      	ldr	r6, [sp, #0]
 800b4fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b4fc:	e728      	b.n	800b350 <_dtoa_r+0x730>
 800b4fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b502:	e751      	b.n	800b3a8 <_dtoa_r+0x788>
 800b504:	9a08      	ldr	r2, [sp, #32]
 800b506:	9902      	ldr	r1, [sp, #8]
 800b508:	e750      	b.n	800b3ac <_dtoa_r+0x78c>
 800b50a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b50e:	e751      	b.n	800b3b4 <_dtoa_r+0x794>
 800b510:	2300      	movs	r3, #0
 800b512:	e779      	b.n	800b408 <_dtoa_r+0x7e8>
 800b514:	9b04      	ldr	r3, [sp, #16]
 800b516:	e777      	b.n	800b408 <_dtoa_r+0x7e8>
 800b518:	2300      	movs	r3, #0
 800b51a:	9308      	str	r3, [sp, #32]
 800b51c:	e779      	b.n	800b412 <_dtoa_r+0x7f2>
 800b51e:	d093      	beq.n	800b448 <_dtoa_r+0x828>
 800b520:	9a00      	ldr	r2, [sp, #0]
 800b522:	331c      	adds	r3, #28
 800b524:	441a      	add	r2, r3
 800b526:	9200      	str	r2, [sp, #0]
 800b528:	9a06      	ldr	r2, [sp, #24]
 800b52a:	441a      	add	r2, r3
 800b52c:	441e      	add	r6, r3
 800b52e:	9206      	str	r2, [sp, #24]
 800b530:	e78a      	b.n	800b448 <_dtoa_r+0x828>
 800b532:	4603      	mov	r3, r0
 800b534:	e7f4      	b.n	800b520 <_dtoa_r+0x900>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	46b8      	mov	r8, r7
 800b53c:	dc20      	bgt.n	800b580 <_dtoa_r+0x960>
 800b53e:	469b      	mov	fp, r3
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	2b02      	cmp	r3, #2
 800b544:	dd1e      	ble.n	800b584 <_dtoa_r+0x964>
 800b546:	f1bb 0f00 	cmp.w	fp, #0
 800b54a:	f47f adb1 	bne.w	800b0b0 <_dtoa_r+0x490>
 800b54e:	4621      	mov	r1, r4
 800b550:	465b      	mov	r3, fp
 800b552:	2205      	movs	r2, #5
 800b554:	4648      	mov	r0, r9
 800b556:	f000 ff83 	bl	800c460 <__multadd>
 800b55a:	4601      	mov	r1, r0
 800b55c:	4604      	mov	r4, r0
 800b55e:	9802      	ldr	r0, [sp, #8]
 800b560:	f001 f9d8 	bl	800c914 <__mcmp>
 800b564:	2800      	cmp	r0, #0
 800b566:	f77f ada3 	ble.w	800b0b0 <_dtoa_r+0x490>
 800b56a:	4656      	mov	r6, sl
 800b56c:	2331      	movs	r3, #49	@ 0x31
 800b56e:	f806 3b01 	strb.w	r3, [r6], #1
 800b572:	f108 0801 	add.w	r8, r8, #1
 800b576:	e59f      	b.n	800b0b8 <_dtoa_r+0x498>
 800b578:	9c03      	ldr	r4, [sp, #12]
 800b57a:	46b8      	mov	r8, r7
 800b57c:	4625      	mov	r5, r4
 800b57e:	e7f4      	b.n	800b56a <_dtoa_r+0x94a>
 800b580:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 8101 	beq.w	800b78e <_dtoa_r+0xb6e>
 800b58c:	2e00      	cmp	r6, #0
 800b58e:	dd05      	ble.n	800b59c <_dtoa_r+0x97c>
 800b590:	4629      	mov	r1, r5
 800b592:	4632      	mov	r2, r6
 800b594:	4648      	mov	r0, r9
 800b596:	f001 f951 	bl	800c83c <__lshift>
 800b59a:	4605      	mov	r5, r0
 800b59c:	9b08      	ldr	r3, [sp, #32]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d05c      	beq.n	800b65c <_dtoa_r+0xa3c>
 800b5a2:	6869      	ldr	r1, [r5, #4]
 800b5a4:	4648      	mov	r0, r9
 800b5a6:	f000 fef9 	bl	800c39c <_Balloc>
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	b928      	cbnz	r0, 800b5ba <_dtoa_r+0x99a>
 800b5ae:	4b82      	ldr	r3, [pc, #520]	@ (800b7b8 <_dtoa_r+0xb98>)
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b5b6:	f7ff bb4a 	b.w	800ac4e <_dtoa_r+0x2e>
 800b5ba:	692a      	ldr	r2, [r5, #16]
 800b5bc:	3202      	adds	r2, #2
 800b5be:	0092      	lsls	r2, r2, #2
 800b5c0:	f105 010c 	add.w	r1, r5, #12
 800b5c4:	300c      	adds	r0, #12
 800b5c6:	f7ff fa8d 	bl	800aae4 <memcpy>
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	4648      	mov	r0, r9
 800b5d0:	f001 f934 	bl	800c83c <__lshift>
 800b5d4:	f10a 0301 	add.w	r3, sl, #1
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	eb0a 030b 	add.w	r3, sl, fp
 800b5de:	9308      	str	r3, [sp, #32]
 800b5e0:	9b04      	ldr	r3, [sp, #16]
 800b5e2:	f003 0301 	and.w	r3, r3, #1
 800b5e6:	462f      	mov	r7, r5
 800b5e8:	9306      	str	r3, [sp, #24]
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	9b00      	ldr	r3, [sp, #0]
 800b5ee:	9802      	ldr	r0, [sp, #8]
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b5f6:	f7ff fa8b 	bl	800ab10 <quorem>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	3330      	adds	r3, #48	@ 0x30
 800b5fe:	9003      	str	r0, [sp, #12]
 800b600:	4639      	mov	r1, r7
 800b602:	9802      	ldr	r0, [sp, #8]
 800b604:	9309      	str	r3, [sp, #36]	@ 0x24
 800b606:	f001 f985 	bl	800c914 <__mcmp>
 800b60a:	462a      	mov	r2, r5
 800b60c:	9004      	str	r0, [sp, #16]
 800b60e:	4621      	mov	r1, r4
 800b610:	4648      	mov	r0, r9
 800b612:	f001 f99b 	bl	800c94c <__mdiff>
 800b616:	68c2      	ldr	r2, [r0, #12]
 800b618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61a:	4606      	mov	r6, r0
 800b61c:	bb02      	cbnz	r2, 800b660 <_dtoa_r+0xa40>
 800b61e:	4601      	mov	r1, r0
 800b620:	9802      	ldr	r0, [sp, #8]
 800b622:	f001 f977 	bl	800c914 <__mcmp>
 800b626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b628:	4602      	mov	r2, r0
 800b62a:	4631      	mov	r1, r6
 800b62c:	4648      	mov	r0, r9
 800b62e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b630:	9309      	str	r3, [sp, #36]	@ 0x24
 800b632:	f000 fef3 	bl	800c41c <_Bfree>
 800b636:	9b07      	ldr	r3, [sp, #28]
 800b638:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b63a:	9e00      	ldr	r6, [sp, #0]
 800b63c:	ea42 0103 	orr.w	r1, r2, r3
 800b640:	9b06      	ldr	r3, [sp, #24]
 800b642:	4319      	orrs	r1, r3
 800b644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b646:	d10d      	bne.n	800b664 <_dtoa_r+0xa44>
 800b648:	2b39      	cmp	r3, #57	@ 0x39
 800b64a:	d027      	beq.n	800b69c <_dtoa_r+0xa7c>
 800b64c:	9a04      	ldr	r2, [sp, #16]
 800b64e:	2a00      	cmp	r2, #0
 800b650:	dd01      	ble.n	800b656 <_dtoa_r+0xa36>
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	3331      	adds	r3, #49	@ 0x31
 800b656:	f88b 3000 	strb.w	r3, [fp]
 800b65a:	e52e      	b.n	800b0ba <_dtoa_r+0x49a>
 800b65c:	4628      	mov	r0, r5
 800b65e:	e7b9      	b.n	800b5d4 <_dtoa_r+0x9b4>
 800b660:	2201      	movs	r2, #1
 800b662:	e7e2      	b.n	800b62a <_dtoa_r+0xa0a>
 800b664:	9904      	ldr	r1, [sp, #16]
 800b666:	2900      	cmp	r1, #0
 800b668:	db04      	blt.n	800b674 <_dtoa_r+0xa54>
 800b66a:	9807      	ldr	r0, [sp, #28]
 800b66c:	4301      	orrs	r1, r0
 800b66e:	9806      	ldr	r0, [sp, #24]
 800b670:	4301      	orrs	r1, r0
 800b672:	d120      	bne.n	800b6b6 <_dtoa_r+0xa96>
 800b674:	2a00      	cmp	r2, #0
 800b676:	ddee      	ble.n	800b656 <_dtoa_r+0xa36>
 800b678:	9902      	ldr	r1, [sp, #8]
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	2201      	movs	r2, #1
 800b67e:	4648      	mov	r0, r9
 800b680:	f001 f8dc 	bl	800c83c <__lshift>
 800b684:	4621      	mov	r1, r4
 800b686:	9002      	str	r0, [sp, #8]
 800b688:	f001 f944 	bl	800c914 <__mcmp>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	9b00      	ldr	r3, [sp, #0]
 800b690:	dc02      	bgt.n	800b698 <_dtoa_r+0xa78>
 800b692:	d1e0      	bne.n	800b656 <_dtoa_r+0xa36>
 800b694:	07da      	lsls	r2, r3, #31
 800b696:	d5de      	bpl.n	800b656 <_dtoa_r+0xa36>
 800b698:	2b39      	cmp	r3, #57	@ 0x39
 800b69a:	d1da      	bne.n	800b652 <_dtoa_r+0xa32>
 800b69c:	2339      	movs	r3, #57	@ 0x39
 800b69e:	f88b 3000 	strb.w	r3, [fp]
 800b6a2:	4633      	mov	r3, r6
 800b6a4:	461e      	mov	r6, r3
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6ac:	2a39      	cmp	r2, #57	@ 0x39
 800b6ae:	d04e      	beq.n	800b74e <_dtoa_r+0xb2e>
 800b6b0:	3201      	adds	r2, #1
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	e501      	b.n	800b0ba <_dtoa_r+0x49a>
 800b6b6:	2a00      	cmp	r2, #0
 800b6b8:	dd03      	ble.n	800b6c2 <_dtoa_r+0xaa2>
 800b6ba:	2b39      	cmp	r3, #57	@ 0x39
 800b6bc:	d0ee      	beq.n	800b69c <_dtoa_r+0xa7c>
 800b6be:	3301      	adds	r3, #1
 800b6c0:	e7c9      	b.n	800b656 <_dtoa_r+0xa36>
 800b6c2:	9a00      	ldr	r2, [sp, #0]
 800b6c4:	9908      	ldr	r1, [sp, #32]
 800b6c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b6ca:	428a      	cmp	r2, r1
 800b6cc:	d028      	beq.n	800b720 <_dtoa_r+0xb00>
 800b6ce:	9902      	ldr	r1, [sp, #8]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	220a      	movs	r2, #10
 800b6d4:	4648      	mov	r0, r9
 800b6d6:	f000 fec3 	bl	800c460 <__multadd>
 800b6da:	42af      	cmp	r7, r5
 800b6dc:	9002      	str	r0, [sp, #8]
 800b6de:	f04f 0300 	mov.w	r3, #0
 800b6e2:	f04f 020a 	mov.w	r2, #10
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4648      	mov	r0, r9
 800b6ea:	d107      	bne.n	800b6fc <_dtoa_r+0xadc>
 800b6ec:	f000 feb8 	bl	800c460 <__multadd>
 800b6f0:	4607      	mov	r7, r0
 800b6f2:	4605      	mov	r5, r0
 800b6f4:	9b00      	ldr	r3, [sp, #0]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	e777      	b.n	800b5ec <_dtoa_r+0x9cc>
 800b6fc:	f000 feb0 	bl	800c460 <__multadd>
 800b700:	4629      	mov	r1, r5
 800b702:	4607      	mov	r7, r0
 800b704:	2300      	movs	r3, #0
 800b706:	220a      	movs	r2, #10
 800b708:	4648      	mov	r0, r9
 800b70a:	f000 fea9 	bl	800c460 <__multadd>
 800b70e:	4605      	mov	r5, r0
 800b710:	e7f0      	b.n	800b6f4 <_dtoa_r+0xad4>
 800b712:	f1bb 0f00 	cmp.w	fp, #0
 800b716:	bfcc      	ite	gt
 800b718:	465e      	movgt	r6, fp
 800b71a:	2601      	movle	r6, #1
 800b71c:	4456      	add	r6, sl
 800b71e:	2700      	movs	r7, #0
 800b720:	9902      	ldr	r1, [sp, #8]
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	2201      	movs	r2, #1
 800b726:	4648      	mov	r0, r9
 800b728:	f001 f888 	bl	800c83c <__lshift>
 800b72c:	4621      	mov	r1, r4
 800b72e:	9002      	str	r0, [sp, #8]
 800b730:	f001 f8f0 	bl	800c914 <__mcmp>
 800b734:	2800      	cmp	r0, #0
 800b736:	dcb4      	bgt.n	800b6a2 <_dtoa_r+0xa82>
 800b738:	d102      	bne.n	800b740 <_dtoa_r+0xb20>
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	07db      	lsls	r3, r3, #31
 800b73e:	d4b0      	bmi.n	800b6a2 <_dtoa_r+0xa82>
 800b740:	4633      	mov	r3, r6
 800b742:	461e      	mov	r6, r3
 800b744:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b748:	2a30      	cmp	r2, #48	@ 0x30
 800b74a:	d0fa      	beq.n	800b742 <_dtoa_r+0xb22>
 800b74c:	e4b5      	b.n	800b0ba <_dtoa_r+0x49a>
 800b74e:	459a      	cmp	sl, r3
 800b750:	d1a8      	bne.n	800b6a4 <_dtoa_r+0xa84>
 800b752:	2331      	movs	r3, #49	@ 0x31
 800b754:	f108 0801 	add.w	r8, r8, #1
 800b758:	f88a 3000 	strb.w	r3, [sl]
 800b75c:	e4ad      	b.n	800b0ba <_dtoa_r+0x49a>
 800b75e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b760:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b7bc <_dtoa_r+0xb9c>
 800b764:	b11b      	cbz	r3, 800b76e <_dtoa_r+0xb4e>
 800b766:	f10a 0308 	add.w	r3, sl, #8
 800b76a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	4650      	mov	r0, sl
 800b770:	b017      	add	sp, #92	@ 0x5c
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b776:	9b07      	ldr	r3, [sp, #28]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	f77f ae2e 	ble.w	800b3da <_dtoa_r+0x7ba>
 800b77e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b780:	9308      	str	r3, [sp, #32]
 800b782:	2001      	movs	r0, #1
 800b784:	e64d      	b.n	800b422 <_dtoa_r+0x802>
 800b786:	f1bb 0f00 	cmp.w	fp, #0
 800b78a:	f77f aed9 	ble.w	800b540 <_dtoa_r+0x920>
 800b78e:	4656      	mov	r6, sl
 800b790:	9802      	ldr	r0, [sp, #8]
 800b792:	4621      	mov	r1, r4
 800b794:	f7ff f9bc 	bl	800ab10 <quorem>
 800b798:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b79c:	f806 3b01 	strb.w	r3, [r6], #1
 800b7a0:	eba6 020a 	sub.w	r2, r6, sl
 800b7a4:	4593      	cmp	fp, r2
 800b7a6:	ddb4      	ble.n	800b712 <_dtoa_r+0xaf2>
 800b7a8:	9902      	ldr	r1, [sp, #8]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	220a      	movs	r2, #10
 800b7ae:	4648      	mov	r0, r9
 800b7b0:	f000 fe56 	bl	800c460 <__multadd>
 800b7b4:	9002      	str	r0, [sp, #8]
 800b7b6:	e7eb      	b.n	800b790 <_dtoa_r+0xb70>
 800b7b8:	0800d3ae 	.word	0x0800d3ae
 800b7bc:	0800d332 	.word	0x0800d332

0800b7c0 <rshift>:
 800b7c0:	6903      	ldr	r3, [r0, #16]
 800b7c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7ce:	f100 0414 	add.w	r4, r0, #20
 800b7d2:	dd45      	ble.n	800b860 <rshift+0xa0>
 800b7d4:	f011 011f 	ands.w	r1, r1, #31
 800b7d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7e0:	d10c      	bne.n	800b7fc <rshift+0x3c>
 800b7e2:	f100 0710 	add.w	r7, r0, #16
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	42b1      	cmp	r1, r6
 800b7ea:	d334      	bcc.n	800b856 <rshift+0x96>
 800b7ec:	1a9b      	subs	r3, r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	1eea      	subs	r2, r5, #3
 800b7f2:	4296      	cmp	r6, r2
 800b7f4:	bf38      	it	cc
 800b7f6:	2300      	movcc	r3, #0
 800b7f8:	4423      	add	r3, r4
 800b7fa:	e015      	b.n	800b828 <rshift+0x68>
 800b7fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b800:	f1c1 0820 	rsb	r8, r1, #32
 800b804:	40cf      	lsrs	r7, r1
 800b806:	f105 0e04 	add.w	lr, r5, #4
 800b80a:	46a1      	mov	r9, r4
 800b80c:	4576      	cmp	r6, lr
 800b80e:	46f4      	mov	ip, lr
 800b810:	d815      	bhi.n	800b83e <rshift+0x7e>
 800b812:	1a9a      	subs	r2, r3, r2
 800b814:	0092      	lsls	r2, r2, #2
 800b816:	3a04      	subs	r2, #4
 800b818:	3501      	adds	r5, #1
 800b81a:	42ae      	cmp	r6, r5
 800b81c:	bf38      	it	cc
 800b81e:	2200      	movcc	r2, #0
 800b820:	18a3      	adds	r3, r4, r2
 800b822:	50a7      	str	r7, [r4, r2]
 800b824:	b107      	cbz	r7, 800b828 <rshift+0x68>
 800b826:	3304      	adds	r3, #4
 800b828:	1b1a      	subs	r2, r3, r4
 800b82a:	42a3      	cmp	r3, r4
 800b82c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b830:	bf08      	it	eq
 800b832:	2300      	moveq	r3, #0
 800b834:	6102      	str	r2, [r0, #16]
 800b836:	bf08      	it	eq
 800b838:	6143      	streq	r3, [r0, #20]
 800b83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b83e:	f8dc c000 	ldr.w	ip, [ip]
 800b842:	fa0c fc08 	lsl.w	ip, ip, r8
 800b846:	ea4c 0707 	orr.w	r7, ip, r7
 800b84a:	f849 7b04 	str.w	r7, [r9], #4
 800b84e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b852:	40cf      	lsrs	r7, r1
 800b854:	e7da      	b.n	800b80c <rshift+0x4c>
 800b856:	f851 cb04 	ldr.w	ip, [r1], #4
 800b85a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b85e:	e7c3      	b.n	800b7e8 <rshift+0x28>
 800b860:	4623      	mov	r3, r4
 800b862:	e7e1      	b.n	800b828 <rshift+0x68>

0800b864 <__hexdig_fun>:
 800b864:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b868:	2b09      	cmp	r3, #9
 800b86a:	d802      	bhi.n	800b872 <__hexdig_fun+0xe>
 800b86c:	3820      	subs	r0, #32
 800b86e:	b2c0      	uxtb	r0, r0
 800b870:	4770      	bx	lr
 800b872:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b876:	2b05      	cmp	r3, #5
 800b878:	d801      	bhi.n	800b87e <__hexdig_fun+0x1a>
 800b87a:	3847      	subs	r0, #71	@ 0x47
 800b87c:	e7f7      	b.n	800b86e <__hexdig_fun+0xa>
 800b87e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b882:	2b05      	cmp	r3, #5
 800b884:	d801      	bhi.n	800b88a <__hexdig_fun+0x26>
 800b886:	3827      	subs	r0, #39	@ 0x27
 800b888:	e7f1      	b.n	800b86e <__hexdig_fun+0xa>
 800b88a:	2000      	movs	r0, #0
 800b88c:	4770      	bx	lr
	...

0800b890 <__gethex>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	b085      	sub	sp, #20
 800b896:	468a      	mov	sl, r1
 800b898:	9302      	str	r3, [sp, #8]
 800b89a:	680b      	ldr	r3, [r1, #0]
 800b89c:	9001      	str	r0, [sp, #4]
 800b89e:	4690      	mov	r8, r2
 800b8a0:	1c9c      	adds	r4, r3, #2
 800b8a2:	46a1      	mov	r9, r4
 800b8a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b8a8:	2830      	cmp	r0, #48	@ 0x30
 800b8aa:	d0fa      	beq.n	800b8a2 <__gethex+0x12>
 800b8ac:	eba9 0303 	sub.w	r3, r9, r3
 800b8b0:	f1a3 0b02 	sub.w	fp, r3, #2
 800b8b4:	f7ff ffd6 	bl	800b864 <__hexdig_fun>
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d168      	bne.n	800b990 <__gethex+0x100>
 800b8be:	49a0      	ldr	r1, [pc, #640]	@ (800bb40 <__gethex+0x2b0>)
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	4648      	mov	r0, r9
 800b8c4:	f7ff f8ca 	bl	800aa5c <strncmp>
 800b8c8:	4607      	mov	r7, r0
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d167      	bne.n	800b99e <__gethex+0x10e>
 800b8ce:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b8d2:	4626      	mov	r6, r4
 800b8d4:	f7ff ffc6 	bl	800b864 <__hexdig_fun>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d062      	beq.n	800b9a2 <__gethex+0x112>
 800b8dc:	4623      	mov	r3, r4
 800b8de:	7818      	ldrb	r0, [r3, #0]
 800b8e0:	2830      	cmp	r0, #48	@ 0x30
 800b8e2:	4699      	mov	r9, r3
 800b8e4:	f103 0301 	add.w	r3, r3, #1
 800b8e8:	d0f9      	beq.n	800b8de <__gethex+0x4e>
 800b8ea:	f7ff ffbb 	bl	800b864 <__hexdig_fun>
 800b8ee:	fab0 f580 	clz	r5, r0
 800b8f2:	096d      	lsrs	r5, r5, #5
 800b8f4:	f04f 0b01 	mov.w	fp, #1
 800b8f8:	464a      	mov	r2, r9
 800b8fa:	4616      	mov	r6, r2
 800b8fc:	3201      	adds	r2, #1
 800b8fe:	7830      	ldrb	r0, [r6, #0]
 800b900:	f7ff ffb0 	bl	800b864 <__hexdig_fun>
 800b904:	2800      	cmp	r0, #0
 800b906:	d1f8      	bne.n	800b8fa <__gethex+0x6a>
 800b908:	498d      	ldr	r1, [pc, #564]	@ (800bb40 <__gethex+0x2b0>)
 800b90a:	2201      	movs	r2, #1
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7ff f8a5 	bl	800aa5c <strncmp>
 800b912:	2800      	cmp	r0, #0
 800b914:	d13f      	bne.n	800b996 <__gethex+0x106>
 800b916:	b944      	cbnz	r4, 800b92a <__gethex+0x9a>
 800b918:	1c74      	adds	r4, r6, #1
 800b91a:	4622      	mov	r2, r4
 800b91c:	4616      	mov	r6, r2
 800b91e:	3201      	adds	r2, #1
 800b920:	7830      	ldrb	r0, [r6, #0]
 800b922:	f7ff ff9f 	bl	800b864 <__hexdig_fun>
 800b926:	2800      	cmp	r0, #0
 800b928:	d1f8      	bne.n	800b91c <__gethex+0x8c>
 800b92a:	1ba4      	subs	r4, r4, r6
 800b92c:	00a7      	lsls	r7, r4, #2
 800b92e:	7833      	ldrb	r3, [r6, #0]
 800b930:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b934:	2b50      	cmp	r3, #80	@ 0x50
 800b936:	d13e      	bne.n	800b9b6 <__gethex+0x126>
 800b938:	7873      	ldrb	r3, [r6, #1]
 800b93a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b93c:	d033      	beq.n	800b9a6 <__gethex+0x116>
 800b93e:	2b2d      	cmp	r3, #45	@ 0x2d
 800b940:	d034      	beq.n	800b9ac <__gethex+0x11c>
 800b942:	1c71      	adds	r1, r6, #1
 800b944:	2400      	movs	r4, #0
 800b946:	7808      	ldrb	r0, [r1, #0]
 800b948:	f7ff ff8c 	bl	800b864 <__hexdig_fun>
 800b94c:	1e43      	subs	r3, r0, #1
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b18      	cmp	r3, #24
 800b952:	d830      	bhi.n	800b9b6 <__gethex+0x126>
 800b954:	f1a0 0210 	sub.w	r2, r0, #16
 800b958:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b95c:	f7ff ff82 	bl	800b864 <__hexdig_fun>
 800b960:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b964:	fa5f fc8c 	uxtb.w	ip, ip
 800b968:	f1bc 0f18 	cmp.w	ip, #24
 800b96c:	f04f 030a 	mov.w	r3, #10
 800b970:	d91e      	bls.n	800b9b0 <__gethex+0x120>
 800b972:	b104      	cbz	r4, 800b976 <__gethex+0xe6>
 800b974:	4252      	negs	r2, r2
 800b976:	4417      	add	r7, r2
 800b978:	f8ca 1000 	str.w	r1, [sl]
 800b97c:	b1ed      	cbz	r5, 800b9ba <__gethex+0x12a>
 800b97e:	f1bb 0f00 	cmp.w	fp, #0
 800b982:	bf0c      	ite	eq
 800b984:	2506      	moveq	r5, #6
 800b986:	2500      	movne	r5, #0
 800b988:	4628      	mov	r0, r5
 800b98a:	b005      	add	sp, #20
 800b98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b990:	2500      	movs	r5, #0
 800b992:	462c      	mov	r4, r5
 800b994:	e7b0      	b.n	800b8f8 <__gethex+0x68>
 800b996:	2c00      	cmp	r4, #0
 800b998:	d1c7      	bne.n	800b92a <__gethex+0x9a>
 800b99a:	4627      	mov	r7, r4
 800b99c:	e7c7      	b.n	800b92e <__gethex+0x9e>
 800b99e:	464e      	mov	r6, r9
 800b9a0:	462f      	mov	r7, r5
 800b9a2:	2501      	movs	r5, #1
 800b9a4:	e7c3      	b.n	800b92e <__gethex+0x9e>
 800b9a6:	2400      	movs	r4, #0
 800b9a8:	1cb1      	adds	r1, r6, #2
 800b9aa:	e7cc      	b.n	800b946 <__gethex+0xb6>
 800b9ac:	2401      	movs	r4, #1
 800b9ae:	e7fb      	b.n	800b9a8 <__gethex+0x118>
 800b9b0:	fb03 0002 	mla	r0, r3, r2, r0
 800b9b4:	e7ce      	b.n	800b954 <__gethex+0xc4>
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	e7de      	b.n	800b978 <__gethex+0xe8>
 800b9ba:	eba6 0309 	sub.w	r3, r6, r9
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	2b07      	cmp	r3, #7
 800b9c4:	dc0a      	bgt.n	800b9dc <__gethex+0x14c>
 800b9c6:	9801      	ldr	r0, [sp, #4]
 800b9c8:	f000 fce8 	bl	800c39c <_Balloc>
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	b940      	cbnz	r0, 800b9e2 <__gethex+0x152>
 800b9d0:	4b5c      	ldr	r3, [pc, #368]	@ (800bb44 <__gethex+0x2b4>)
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	21e4      	movs	r1, #228	@ 0xe4
 800b9d6:	485c      	ldr	r0, [pc, #368]	@ (800bb48 <__gethex+0x2b8>)
 800b9d8:	f001 fb4a 	bl	800d070 <__assert_func>
 800b9dc:	3101      	adds	r1, #1
 800b9de:	105b      	asrs	r3, r3, #1
 800b9e0:	e7ef      	b.n	800b9c2 <__gethex+0x132>
 800b9e2:	f100 0a14 	add.w	sl, r0, #20
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	4655      	mov	r5, sl
 800b9ea:	469b      	mov	fp, r3
 800b9ec:	45b1      	cmp	r9, r6
 800b9ee:	d337      	bcc.n	800ba60 <__gethex+0x1d0>
 800b9f0:	f845 bb04 	str.w	fp, [r5], #4
 800b9f4:	eba5 050a 	sub.w	r5, r5, sl
 800b9f8:	10ad      	asrs	r5, r5, #2
 800b9fa:	6125      	str	r5, [r4, #16]
 800b9fc:	4658      	mov	r0, fp
 800b9fe:	f000 fdbf 	bl	800c580 <__hi0bits>
 800ba02:	016d      	lsls	r5, r5, #5
 800ba04:	f8d8 6000 	ldr.w	r6, [r8]
 800ba08:	1a2d      	subs	r5, r5, r0
 800ba0a:	42b5      	cmp	r5, r6
 800ba0c:	dd54      	ble.n	800bab8 <__gethex+0x228>
 800ba0e:	1bad      	subs	r5, r5, r6
 800ba10:	4629      	mov	r1, r5
 800ba12:	4620      	mov	r0, r4
 800ba14:	f001 f94b 	bl	800ccae <__any_on>
 800ba18:	4681      	mov	r9, r0
 800ba1a:	b178      	cbz	r0, 800ba3c <__gethex+0x1ac>
 800ba1c:	1e6b      	subs	r3, r5, #1
 800ba1e:	1159      	asrs	r1, r3, #5
 800ba20:	f003 021f 	and.w	r2, r3, #31
 800ba24:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ba28:	f04f 0901 	mov.w	r9, #1
 800ba2c:	fa09 f202 	lsl.w	r2, r9, r2
 800ba30:	420a      	tst	r2, r1
 800ba32:	d003      	beq.n	800ba3c <__gethex+0x1ac>
 800ba34:	454b      	cmp	r3, r9
 800ba36:	dc36      	bgt.n	800baa6 <__gethex+0x216>
 800ba38:	f04f 0902 	mov.w	r9, #2
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f7ff febe 	bl	800b7c0 <rshift>
 800ba44:	442f      	add	r7, r5
 800ba46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba4a:	42bb      	cmp	r3, r7
 800ba4c:	da42      	bge.n	800bad4 <__gethex+0x244>
 800ba4e:	9801      	ldr	r0, [sp, #4]
 800ba50:	4621      	mov	r1, r4
 800ba52:	f000 fce3 	bl	800c41c <_Bfree>
 800ba56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba58:	2300      	movs	r3, #0
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	25a3      	movs	r5, #163	@ 0xa3
 800ba5e:	e793      	b.n	800b988 <__gethex+0xf8>
 800ba60:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ba64:	2a2e      	cmp	r2, #46	@ 0x2e
 800ba66:	d012      	beq.n	800ba8e <__gethex+0x1fe>
 800ba68:	2b20      	cmp	r3, #32
 800ba6a:	d104      	bne.n	800ba76 <__gethex+0x1e6>
 800ba6c:	f845 bb04 	str.w	fp, [r5], #4
 800ba70:	f04f 0b00 	mov.w	fp, #0
 800ba74:	465b      	mov	r3, fp
 800ba76:	7830      	ldrb	r0, [r6, #0]
 800ba78:	9303      	str	r3, [sp, #12]
 800ba7a:	f7ff fef3 	bl	800b864 <__hexdig_fun>
 800ba7e:	9b03      	ldr	r3, [sp, #12]
 800ba80:	f000 000f 	and.w	r0, r0, #15
 800ba84:	4098      	lsls	r0, r3
 800ba86:	ea4b 0b00 	orr.w	fp, fp, r0
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	e7ae      	b.n	800b9ec <__gethex+0x15c>
 800ba8e:	45b1      	cmp	r9, r6
 800ba90:	d8ea      	bhi.n	800ba68 <__gethex+0x1d8>
 800ba92:	492b      	ldr	r1, [pc, #172]	@ (800bb40 <__gethex+0x2b0>)
 800ba94:	9303      	str	r3, [sp, #12]
 800ba96:	2201      	movs	r2, #1
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f7fe ffdf 	bl	800aa5c <strncmp>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d1e1      	bne.n	800ba68 <__gethex+0x1d8>
 800baa4:	e7a2      	b.n	800b9ec <__gethex+0x15c>
 800baa6:	1ea9      	subs	r1, r5, #2
 800baa8:	4620      	mov	r0, r4
 800baaa:	f001 f900 	bl	800ccae <__any_on>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d0c2      	beq.n	800ba38 <__gethex+0x1a8>
 800bab2:	f04f 0903 	mov.w	r9, #3
 800bab6:	e7c1      	b.n	800ba3c <__gethex+0x1ac>
 800bab8:	da09      	bge.n	800bace <__gethex+0x23e>
 800baba:	1b75      	subs	r5, r6, r5
 800babc:	4621      	mov	r1, r4
 800babe:	9801      	ldr	r0, [sp, #4]
 800bac0:	462a      	mov	r2, r5
 800bac2:	f000 febb 	bl	800c83c <__lshift>
 800bac6:	1b7f      	subs	r7, r7, r5
 800bac8:	4604      	mov	r4, r0
 800baca:	f100 0a14 	add.w	sl, r0, #20
 800bace:	f04f 0900 	mov.w	r9, #0
 800bad2:	e7b8      	b.n	800ba46 <__gethex+0x1b6>
 800bad4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bad8:	42bd      	cmp	r5, r7
 800bada:	dd6f      	ble.n	800bbbc <__gethex+0x32c>
 800badc:	1bed      	subs	r5, r5, r7
 800bade:	42ae      	cmp	r6, r5
 800bae0:	dc34      	bgt.n	800bb4c <__gethex+0x2bc>
 800bae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d022      	beq.n	800bb30 <__gethex+0x2a0>
 800baea:	2b03      	cmp	r3, #3
 800baec:	d024      	beq.n	800bb38 <__gethex+0x2a8>
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d115      	bne.n	800bb1e <__gethex+0x28e>
 800baf2:	42ae      	cmp	r6, r5
 800baf4:	d113      	bne.n	800bb1e <__gethex+0x28e>
 800baf6:	2e01      	cmp	r6, #1
 800baf8:	d10b      	bne.n	800bb12 <__gethex+0x282>
 800bafa:	9a02      	ldr	r2, [sp, #8]
 800bafc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb00:	6013      	str	r3, [r2, #0]
 800bb02:	2301      	movs	r3, #1
 800bb04:	6123      	str	r3, [r4, #16]
 800bb06:	f8ca 3000 	str.w	r3, [sl]
 800bb0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb0c:	2562      	movs	r5, #98	@ 0x62
 800bb0e:	601c      	str	r4, [r3, #0]
 800bb10:	e73a      	b.n	800b988 <__gethex+0xf8>
 800bb12:	1e71      	subs	r1, r6, #1
 800bb14:	4620      	mov	r0, r4
 800bb16:	f001 f8ca 	bl	800ccae <__any_on>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d1ed      	bne.n	800bafa <__gethex+0x26a>
 800bb1e:	9801      	ldr	r0, [sp, #4]
 800bb20:	4621      	mov	r1, r4
 800bb22:	f000 fc7b 	bl	800c41c <_Bfree>
 800bb26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb28:	2300      	movs	r3, #0
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	2550      	movs	r5, #80	@ 0x50
 800bb2e:	e72b      	b.n	800b988 <__gethex+0xf8>
 800bb30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1f3      	bne.n	800bb1e <__gethex+0x28e>
 800bb36:	e7e0      	b.n	800bafa <__gethex+0x26a>
 800bb38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1dd      	bne.n	800bafa <__gethex+0x26a>
 800bb3e:	e7ee      	b.n	800bb1e <__gethex+0x28e>
 800bb40:	0800d328 	.word	0x0800d328
 800bb44:	0800d3ae 	.word	0x0800d3ae
 800bb48:	0800d3bf 	.word	0x0800d3bf
 800bb4c:	1e6f      	subs	r7, r5, #1
 800bb4e:	f1b9 0f00 	cmp.w	r9, #0
 800bb52:	d130      	bne.n	800bbb6 <__gethex+0x326>
 800bb54:	b127      	cbz	r7, 800bb60 <__gethex+0x2d0>
 800bb56:	4639      	mov	r1, r7
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f001 f8a8 	bl	800ccae <__any_on>
 800bb5e:	4681      	mov	r9, r0
 800bb60:	117a      	asrs	r2, r7, #5
 800bb62:	2301      	movs	r3, #1
 800bb64:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bb68:	f007 071f 	and.w	r7, r7, #31
 800bb6c:	40bb      	lsls	r3, r7
 800bb6e:	4213      	tst	r3, r2
 800bb70:	4629      	mov	r1, r5
 800bb72:	4620      	mov	r0, r4
 800bb74:	bf18      	it	ne
 800bb76:	f049 0902 	orrne.w	r9, r9, #2
 800bb7a:	f7ff fe21 	bl	800b7c0 <rshift>
 800bb7e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bb82:	1b76      	subs	r6, r6, r5
 800bb84:	2502      	movs	r5, #2
 800bb86:	f1b9 0f00 	cmp.w	r9, #0
 800bb8a:	d047      	beq.n	800bc1c <__gethex+0x38c>
 800bb8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d015      	beq.n	800bbc0 <__gethex+0x330>
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	d017      	beq.n	800bbc8 <__gethex+0x338>
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d109      	bne.n	800bbb0 <__gethex+0x320>
 800bb9c:	f019 0f02 	tst.w	r9, #2
 800bba0:	d006      	beq.n	800bbb0 <__gethex+0x320>
 800bba2:	f8da 3000 	ldr.w	r3, [sl]
 800bba6:	ea49 0903 	orr.w	r9, r9, r3
 800bbaa:	f019 0f01 	tst.w	r9, #1
 800bbae:	d10e      	bne.n	800bbce <__gethex+0x33e>
 800bbb0:	f045 0510 	orr.w	r5, r5, #16
 800bbb4:	e032      	b.n	800bc1c <__gethex+0x38c>
 800bbb6:	f04f 0901 	mov.w	r9, #1
 800bbba:	e7d1      	b.n	800bb60 <__gethex+0x2d0>
 800bbbc:	2501      	movs	r5, #1
 800bbbe:	e7e2      	b.n	800bb86 <__gethex+0x2f6>
 800bbc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbc2:	f1c3 0301 	rsb	r3, r3, #1
 800bbc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0f0      	beq.n	800bbb0 <__gethex+0x320>
 800bbce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bbd2:	f104 0314 	add.w	r3, r4, #20
 800bbd6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bbda:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bbde:	f04f 0c00 	mov.w	ip, #0
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800bbec:	d01b      	beq.n	800bc26 <__gethex+0x396>
 800bbee:	3201      	adds	r2, #1
 800bbf0:	6002      	str	r2, [r0, #0]
 800bbf2:	2d02      	cmp	r5, #2
 800bbf4:	f104 0314 	add.w	r3, r4, #20
 800bbf8:	d13c      	bne.n	800bc74 <__gethex+0x3e4>
 800bbfa:	f8d8 2000 	ldr.w	r2, [r8]
 800bbfe:	3a01      	subs	r2, #1
 800bc00:	42b2      	cmp	r2, r6
 800bc02:	d109      	bne.n	800bc18 <__gethex+0x388>
 800bc04:	1171      	asrs	r1, r6, #5
 800bc06:	2201      	movs	r2, #1
 800bc08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc0c:	f006 061f 	and.w	r6, r6, #31
 800bc10:	fa02 f606 	lsl.w	r6, r2, r6
 800bc14:	421e      	tst	r6, r3
 800bc16:	d13a      	bne.n	800bc8e <__gethex+0x3fe>
 800bc18:	f045 0520 	orr.w	r5, r5, #32
 800bc1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc1e:	601c      	str	r4, [r3, #0]
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	601f      	str	r7, [r3, #0]
 800bc24:	e6b0      	b.n	800b988 <__gethex+0xf8>
 800bc26:	4299      	cmp	r1, r3
 800bc28:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc2c:	d8d9      	bhi.n	800bbe2 <__gethex+0x352>
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	459b      	cmp	fp, r3
 800bc32:	db17      	blt.n	800bc64 <__gethex+0x3d4>
 800bc34:	6861      	ldr	r1, [r4, #4]
 800bc36:	9801      	ldr	r0, [sp, #4]
 800bc38:	3101      	adds	r1, #1
 800bc3a:	f000 fbaf 	bl	800c39c <_Balloc>
 800bc3e:	4681      	mov	r9, r0
 800bc40:	b918      	cbnz	r0, 800bc4a <__gethex+0x3ba>
 800bc42:	4b1a      	ldr	r3, [pc, #104]	@ (800bcac <__gethex+0x41c>)
 800bc44:	4602      	mov	r2, r0
 800bc46:	2184      	movs	r1, #132	@ 0x84
 800bc48:	e6c5      	b.n	800b9d6 <__gethex+0x146>
 800bc4a:	6922      	ldr	r2, [r4, #16]
 800bc4c:	3202      	adds	r2, #2
 800bc4e:	f104 010c 	add.w	r1, r4, #12
 800bc52:	0092      	lsls	r2, r2, #2
 800bc54:	300c      	adds	r0, #12
 800bc56:	f7fe ff45 	bl	800aae4 <memcpy>
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	9801      	ldr	r0, [sp, #4]
 800bc5e:	f000 fbdd 	bl	800c41c <_Bfree>
 800bc62:	464c      	mov	r4, r9
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc6c:	6122      	str	r2, [r4, #16]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	615a      	str	r2, [r3, #20]
 800bc72:	e7be      	b.n	800bbf2 <__gethex+0x362>
 800bc74:	6922      	ldr	r2, [r4, #16]
 800bc76:	455a      	cmp	r2, fp
 800bc78:	dd0b      	ble.n	800bc92 <__gethex+0x402>
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f7ff fd9f 	bl	800b7c0 <rshift>
 800bc82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc86:	3701      	adds	r7, #1
 800bc88:	42bb      	cmp	r3, r7
 800bc8a:	f6ff aee0 	blt.w	800ba4e <__gethex+0x1be>
 800bc8e:	2501      	movs	r5, #1
 800bc90:	e7c2      	b.n	800bc18 <__gethex+0x388>
 800bc92:	f016 061f 	ands.w	r6, r6, #31
 800bc96:	d0fa      	beq.n	800bc8e <__gethex+0x3fe>
 800bc98:	4453      	add	r3, sl
 800bc9a:	f1c6 0620 	rsb	r6, r6, #32
 800bc9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bca2:	f000 fc6d 	bl	800c580 <__hi0bits>
 800bca6:	42b0      	cmp	r0, r6
 800bca8:	dbe7      	blt.n	800bc7a <__gethex+0x3ea>
 800bcaa:	e7f0      	b.n	800bc8e <__gethex+0x3fe>
 800bcac:	0800d3ae 	.word	0x0800d3ae

0800bcb0 <L_shift>:
 800bcb0:	f1c2 0208 	rsb	r2, r2, #8
 800bcb4:	0092      	lsls	r2, r2, #2
 800bcb6:	b570      	push	{r4, r5, r6, lr}
 800bcb8:	f1c2 0620 	rsb	r6, r2, #32
 800bcbc:	6843      	ldr	r3, [r0, #4]
 800bcbe:	6804      	ldr	r4, [r0, #0]
 800bcc0:	fa03 f506 	lsl.w	r5, r3, r6
 800bcc4:	432c      	orrs	r4, r5
 800bcc6:	40d3      	lsrs	r3, r2
 800bcc8:	6004      	str	r4, [r0, #0]
 800bcca:	f840 3f04 	str.w	r3, [r0, #4]!
 800bcce:	4288      	cmp	r0, r1
 800bcd0:	d3f4      	bcc.n	800bcbc <L_shift+0xc>
 800bcd2:	bd70      	pop	{r4, r5, r6, pc}

0800bcd4 <__match>:
 800bcd4:	b530      	push	{r4, r5, lr}
 800bcd6:	6803      	ldr	r3, [r0, #0]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcde:	b914      	cbnz	r4, 800bce6 <__match+0x12>
 800bce0:	6003      	str	r3, [r0, #0]
 800bce2:	2001      	movs	r0, #1
 800bce4:	bd30      	pop	{r4, r5, pc}
 800bce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bcee:	2d19      	cmp	r5, #25
 800bcf0:	bf98      	it	ls
 800bcf2:	3220      	addls	r2, #32
 800bcf4:	42a2      	cmp	r2, r4
 800bcf6:	d0f0      	beq.n	800bcda <__match+0x6>
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	e7f3      	b.n	800bce4 <__match+0x10>

0800bcfc <__hexnan>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	680b      	ldr	r3, [r1, #0]
 800bd02:	6801      	ldr	r1, [r0, #0]
 800bd04:	115e      	asrs	r6, r3, #5
 800bd06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd0a:	f013 031f 	ands.w	r3, r3, #31
 800bd0e:	b087      	sub	sp, #28
 800bd10:	bf18      	it	ne
 800bd12:	3604      	addne	r6, #4
 800bd14:	2500      	movs	r5, #0
 800bd16:	1f37      	subs	r7, r6, #4
 800bd18:	4682      	mov	sl, r0
 800bd1a:	4690      	mov	r8, r2
 800bd1c:	9301      	str	r3, [sp, #4]
 800bd1e:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd22:	46b9      	mov	r9, r7
 800bd24:	463c      	mov	r4, r7
 800bd26:	9502      	str	r5, [sp, #8]
 800bd28:	46ab      	mov	fp, r5
 800bd2a:	784a      	ldrb	r2, [r1, #1]
 800bd2c:	1c4b      	adds	r3, r1, #1
 800bd2e:	9303      	str	r3, [sp, #12]
 800bd30:	b342      	cbz	r2, 800bd84 <__hexnan+0x88>
 800bd32:	4610      	mov	r0, r2
 800bd34:	9105      	str	r1, [sp, #20]
 800bd36:	9204      	str	r2, [sp, #16]
 800bd38:	f7ff fd94 	bl	800b864 <__hexdig_fun>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d151      	bne.n	800bde4 <__hexnan+0xe8>
 800bd40:	9a04      	ldr	r2, [sp, #16]
 800bd42:	9905      	ldr	r1, [sp, #20]
 800bd44:	2a20      	cmp	r2, #32
 800bd46:	d818      	bhi.n	800bd7a <__hexnan+0x7e>
 800bd48:	9b02      	ldr	r3, [sp, #8]
 800bd4a:	459b      	cmp	fp, r3
 800bd4c:	dd13      	ble.n	800bd76 <__hexnan+0x7a>
 800bd4e:	454c      	cmp	r4, r9
 800bd50:	d206      	bcs.n	800bd60 <__hexnan+0x64>
 800bd52:	2d07      	cmp	r5, #7
 800bd54:	dc04      	bgt.n	800bd60 <__hexnan+0x64>
 800bd56:	462a      	mov	r2, r5
 800bd58:	4649      	mov	r1, r9
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f7ff ffa8 	bl	800bcb0 <L_shift>
 800bd60:	4544      	cmp	r4, r8
 800bd62:	d952      	bls.n	800be0a <__hexnan+0x10e>
 800bd64:	2300      	movs	r3, #0
 800bd66:	f1a4 0904 	sub.w	r9, r4, #4
 800bd6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd6e:	f8cd b008 	str.w	fp, [sp, #8]
 800bd72:	464c      	mov	r4, r9
 800bd74:	461d      	mov	r5, r3
 800bd76:	9903      	ldr	r1, [sp, #12]
 800bd78:	e7d7      	b.n	800bd2a <__hexnan+0x2e>
 800bd7a:	2a29      	cmp	r2, #41	@ 0x29
 800bd7c:	d157      	bne.n	800be2e <__hexnan+0x132>
 800bd7e:	3102      	adds	r1, #2
 800bd80:	f8ca 1000 	str.w	r1, [sl]
 800bd84:	f1bb 0f00 	cmp.w	fp, #0
 800bd88:	d051      	beq.n	800be2e <__hexnan+0x132>
 800bd8a:	454c      	cmp	r4, r9
 800bd8c:	d206      	bcs.n	800bd9c <__hexnan+0xa0>
 800bd8e:	2d07      	cmp	r5, #7
 800bd90:	dc04      	bgt.n	800bd9c <__hexnan+0xa0>
 800bd92:	462a      	mov	r2, r5
 800bd94:	4649      	mov	r1, r9
 800bd96:	4620      	mov	r0, r4
 800bd98:	f7ff ff8a 	bl	800bcb0 <L_shift>
 800bd9c:	4544      	cmp	r4, r8
 800bd9e:	d936      	bls.n	800be0e <__hexnan+0x112>
 800bda0:	f1a8 0204 	sub.w	r2, r8, #4
 800bda4:	4623      	mov	r3, r4
 800bda6:	f853 1b04 	ldr.w	r1, [r3], #4
 800bdaa:	f842 1f04 	str.w	r1, [r2, #4]!
 800bdae:	429f      	cmp	r7, r3
 800bdb0:	d2f9      	bcs.n	800bda6 <__hexnan+0xaa>
 800bdb2:	1b3b      	subs	r3, r7, r4
 800bdb4:	f023 0303 	bic.w	r3, r3, #3
 800bdb8:	3304      	adds	r3, #4
 800bdba:	3401      	adds	r4, #1
 800bdbc:	3e03      	subs	r6, #3
 800bdbe:	42b4      	cmp	r4, r6
 800bdc0:	bf88      	it	hi
 800bdc2:	2304      	movhi	r3, #4
 800bdc4:	4443      	add	r3, r8
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f843 2b04 	str.w	r2, [r3], #4
 800bdcc:	429f      	cmp	r7, r3
 800bdce:	d2fb      	bcs.n	800bdc8 <__hexnan+0xcc>
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	b91b      	cbnz	r3, 800bddc <__hexnan+0xe0>
 800bdd4:	4547      	cmp	r7, r8
 800bdd6:	d128      	bne.n	800be2a <__hexnan+0x12e>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	2005      	movs	r0, #5
 800bdde:	b007      	add	sp, #28
 800bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde4:	3501      	adds	r5, #1
 800bde6:	2d08      	cmp	r5, #8
 800bde8:	f10b 0b01 	add.w	fp, fp, #1
 800bdec:	dd06      	ble.n	800bdfc <__hexnan+0x100>
 800bdee:	4544      	cmp	r4, r8
 800bdf0:	d9c1      	bls.n	800bd76 <__hexnan+0x7a>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdf8:	2501      	movs	r5, #1
 800bdfa:	3c04      	subs	r4, #4
 800bdfc:	6822      	ldr	r2, [r4, #0]
 800bdfe:	f000 000f 	and.w	r0, r0, #15
 800be02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800be06:	6020      	str	r0, [r4, #0]
 800be08:	e7b5      	b.n	800bd76 <__hexnan+0x7a>
 800be0a:	2508      	movs	r5, #8
 800be0c:	e7b3      	b.n	800bd76 <__hexnan+0x7a>
 800be0e:	9b01      	ldr	r3, [sp, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d0dd      	beq.n	800bdd0 <__hexnan+0xd4>
 800be14:	f1c3 0320 	rsb	r3, r3, #32
 800be18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be1c:	40da      	lsrs	r2, r3
 800be1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800be22:	4013      	ands	r3, r2
 800be24:	f846 3c04 	str.w	r3, [r6, #-4]
 800be28:	e7d2      	b.n	800bdd0 <__hexnan+0xd4>
 800be2a:	3f04      	subs	r7, #4
 800be2c:	e7d0      	b.n	800bdd0 <__hexnan+0xd4>
 800be2e:	2004      	movs	r0, #4
 800be30:	e7d5      	b.n	800bdde <__hexnan+0xe2>

0800be32 <__sfputc_r>:
 800be32:	6893      	ldr	r3, [r2, #8]
 800be34:	3b01      	subs	r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	b410      	push	{r4}
 800be3a:	6093      	str	r3, [r2, #8]
 800be3c:	da08      	bge.n	800be50 <__sfputc_r+0x1e>
 800be3e:	6994      	ldr	r4, [r2, #24]
 800be40:	42a3      	cmp	r3, r4
 800be42:	db01      	blt.n	800be48 <__sfputc_r+0x16>
 800be44:	290a      	cmp	r1, #10
 800be46:	d103      	bne.n	800be50 <__sfputc_r+0x1e>
 800be48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be4c:	f000 bf93 	b.w	800cd76 <__swbuf_r>
 800be50:	6813      	ldr	r3, [r2, #0]
 800be52:	1c58      	adds	r0, r3, #1
 800be54:	6010      	str	r0, [r2, #0]
 800be56:	7019      	strb	r1, [r3, #0]
 800be58:	4608      	mov	r0, r1
 800be5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <__sfputs_r>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	4606      	mov	r6, r0
 800be64:	460f      	mov	r7, r1
 800be66:	4614      	mov	r4, r2
 800be68:	18d5      	adds	r5, r2, r3
 800be6a:	42ac      	cmp	r4, r5
 800be6c:	d101      	bne.n	800be72 <__sfputs_r+0x12>
 800be6e:	2000      	movs	r0, #0
 800be70:	e007      	b.n	800be82 <__sfputs_r+0x22>
 800be72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be76:	463a      	mov	r2, r7
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff ffda 	bl	800be32 <__sfputc_r>
 800be7e:	1c43      	adds	r3, r0, #1
 800be80:	d1f3      	bne.n	800be6a <__sfputs_r+0xa>
 800be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be84 <_vfiprintf_r>:
 800be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be88:	460d      	mov	r5, r1
 800be8a:	b09d      	sub	sp, #116	@ 0x74
 800be8c:	4614      	mov	r4, r2
 800be8e:	4698      	mov	r8, r3
 800be90:	4606      	mov	r6, r0
 800be92:	b118      	cbz	r0, 800be9c <_vfiprintf_r+0x18>
 800be94:	6a03      	ldr	r3, [r0, #32]
 800be96:	b90b      	cbnz	r3, 800be9c <_vfiprintf_r+0x18>
 800be98:	f7fd ff22 	bl	8009ce0 <__sinit>
 800be9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be9e:	07d9      	lsls	r1, r3, #31
 800bea0:	d405      	bmi.n	800beae <_vfiprintf_r+0x2a>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	059a      	lsls	r2, r3, #22
 800bea6:	d402      	bmi.n	800beae <_vfiprintf_r+0x2a>
 800bea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beaa:	f7fe fe14 	bl	800aad6 <__retarget_lock_acquire_recursive>
 800beae:	89ab      	ldrh	r3, [r5, #12]
 800beb0:	071b      	lsls	r3, r3, #28
 800beb2:	d501      	bpl.n	800beb8 <_vfiprintf_r+0x34>
 800beb4:	692b      	ldr	r3, [r5, #16]
 800beb6:	b99b      	cbnz	r3, 800bee0 <_vfiprintf_r+0x5c>
 800beb8:	4629      	mov	r1, r5
 800beba:	4630      	mov	r0, r6
 800bebc:	f000 ff9a 	bl	800cdf4 <__swsetup_r>
 800bec0:	b170      	cbz	r0, 800bee0 <_vfiprintf_r+0x5c>
 800bec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bec4:	07dc      	lsls	r4, r3, #31
 800bec6:	d504      	bpl.n	800bed2 <_vfiprintf_r+0x4e>
 800bec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800becc:	b01d      	add	sp, #116	@ 0x74
 800bece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	0598      	lsls	r0, r3, #22
 800bed6:	d4f7      	bmi.n	800bec8 <_vfiprintf_r+0x44>
 800bed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beda:	f7fe fdfd 	bl	800aad8 <__retarget_lock_release_recursive>
 800bede:	e7f3      	b.n	800bec8 <_vfiprintf_r+0x44>
 800bee0:	2300      	movs	r3, #0
 800bee2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bee4:	2320      	movs	r3, #32
 800bee6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800beea:	f8cd 800c 	str.w	r8, [sp, #12]
 800beee:	2330      	movs	r3, #48	@ 0x30
 800bef0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c0a0 <_vfiprintf_r+0x21c>
 800bef4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bef8:	f04f 0901 	mov.w	r9, #1
 800befc:	4623      	mov	r3, r4
 800befe:	469a      	mov	sl, r3
 800bf00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf04:	b10a      	cbz	r2, 800bf0a <_vfiprintf_r+0x86>
 800bf06:	2a25      	cmp	r2, #37	@ 0x25
 800bf08:	d1f9      	bne.n	800befe <_vfiprintf_r+0x7a>
 800bf0a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf0e:	d00b      	beq.n	800bf28 <_vfiprintf_r+0xa4>
 800bf10:	465b      	mov	r3, fp
 800bf12:	4622      	mov	r2, r4
 800bf14:	4629      	mov	r1, r5
 800bf16:	4630      	mov	r0, r6
 800bf18:	f7ff ffa2 	bl	800be60 <__sfputs_r>
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	f000 80a7 	beq.w	800c070 <_vfiprintf_r+0x1ec>
 800bf22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf24:	445a      	add	r2, fp
 800bf26:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf28:	f89a 3000 	ldrb.w	r3, [sl]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 809f 	beq.w	800c070 <_vfiprintf_r+0x1ec>
 800bf32:	2300      	movs	r3, #0
 800bf34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf3c:	f10a 0a01 	add.w	sl, sl, #1
 800bf40:	9304      	str	r3, [sp, #16]
 800bf42:	9307      	str	r3, [sp, #28]
 800bf44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf48:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf4a:	4654      	mov	r4, sl
 800bf4c:	2205      	movs	r2, #5
 800bf4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf52:	4853      	ldr	r0, [pc, #332]	@ (800c0a0 <_vfiprintf_r+0x21c>)
 800bf54:	f7f4 f95c 	bl	8000210 <memchr>
 800bf58:	9a04      	ldr	r2, [sp, #16]
 800bf5a:	b9d8      	cbnz	r0, 800bf94 <_vfiprintf_r+0x110>
 800bf5c:	06d1      	lsls	r1, r2, #27
 800bf5e:	bf44      	itt	mi
 800bf60:	2320      	movmi	r3, #32
 800bf62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf66:	0713      	lsls	r3, r2, #28
 800bf68:	bf44      	itt	mi
 800bf6a:	232b      	movmi	r3, #43	@ 0x2b
 800bf6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf70:	f89a 3000 	ldrb.w	r3, [sl]
 800bf74:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf76:	d015      	beq.n	800bfa4 <_vfiprintf_r+0x120>
 800bf78:	9a07      	ldr	r2, [sp, #28]
 800bf7a:	4654      	mov	r4, sl
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	f04f 0c0a 	mov.w	ip, #10
 800bf82:	4621      	mov	r1, r4
 800bf84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf88:	3b30      	subs	r3, #48	@ 0x30
 800bf8a:	2b09      	cmp	r3, #9
 800bf8c:	d94b      	bls.n	800c026 <_vfiprintf_r+0x1a2>
 800bf8e:	b1b0      	cbz	r0, 800bfbe <_vfiprintf_r+0x13a>
 800bf90:	9207      	str	r2, [sp, #28]
 800bf92:	e014      	b.n	800bfbe <_vfiprintf_r+0x13a>
 800bf94:	eba0 0308 	sub.w	r3, r0, r8
 800bf98:	fa09 f303 	lsl.w	r3, r9, r3
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	9304      	str	r3, [sp, #16]
 800bfa0:	46a2      	mov	sl, r4
 800bfa2:	e7d2      	b.n	800bf4a <_vfiprintf_r+0xc6>
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	1d19      	adds	r1, r3, #4
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	9103      	str	r1, [sp, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	bfbb      	ittet	lt
 800bfb0:	425b      	neglt	r3, r3
 800bfb2:	f042 0202 	orrlt.w	r2, r2, #2
 800bfb6:	9307      	strge	r3, [sp, #28]
 800bfb8:	9307      	strlt	r3, [sp, #28]
 800bfba:	bfb8      	it	lt
 800bfbc:	9204      	strlt	r2, [sp, #16]
 800bfbe:	7823      	ldrb	r3, [r4, #0]
 800bfc0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfc2:	d10a      	bne.n	800bfda <_vfiprintf_r+0x156>
 800bfc4:	7863      	ldrb	r3, [r4, #1]
 800bfc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc8:	d132      	bne.n	800c030 <_vfiprintf_r+0x1ac>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	1d1a      	adds	r2, r3, #4
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	9203      	str	r2, [sp, #12]
 800bfd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfd6:	3402      	adds	r4, #2
 800bfd8:	9305      	str	r3, [sp, #20]
 800bfda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c0b0 <_vfiprintf_r+0x22c>
 800bfde:	7821      	ldrb	r1, [r4, #0]
 800bfe0:	2203      	movs	r2, #3
 800bfe2:	4650      	mov	r0, sl
 800bfe4:	f7f4 f914 	bl	8000210 <memchr>
 800bfe8:	b138      	cbz	r0, 800bffa <_vfiprintf_r+0x176>
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	eba0 000a 	sub.w	r0, r0, sl
 800bff0:	2240      	movs	r2, #64	@ 0x40
 800bff2:	4082      	lsls	r2, r0
 800bff4:	4313      	orrs	r3, r2
 800bff6:	3401      	adds	r4, #1
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffe:	4829      	ldr	r0, [pc, #164]	@ (800c0a4 <_vfiprintf_r+0x220>)
 800c000:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c004:	2206      	movs	r2, #6
 800c006:	f7f4 f903 	bl	8000210 <memchr>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d03f      	beq.n	800c08e <_vfiprintf_r+0x20a>
 800c00e:	4b26      	ldr	r3, [pc, #152]	@ (800c0a8 <_vfiprintf_r+0x224>)
 800c010:	bb1b      	cbnz	r3, 800c05a <_vfiprintf_r+0x1d6>
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	3307      	adds	r3, #7
 800c016:	f023 0307 	bic.w	r3, r3, #7
 800c01a:	3308      	adds	r3, #8
 800c01c:	9303      	str	r3, [sp, #12]
 800c01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c020:	443b      	add	r3, r7
 800c022:	9309      	str	r3, [sp, #36]	@ 0x24
 800c024:	e76a      	b.n	800befc <_vfiprintf_r+0x78>
 800c026:	fb0c 3202 	mla	r2, ip, r2, r3
 800c02a:	460c      	mov	r4, r1
 800c02c:	2001      	movs	r0, #1
 800c02e:	e7a8      	b.n	800bf82 <_vfiprintf_r+0xfe>
 800c030:	2300      	movs	r3, #0
 800c032:	3401      	adds	r4, #1
 800c034:	9305      	str	r3, [sp, #20]
 800c036:	4619      	mov	r1, r3
 800c038:	f04f 0c0a 	mov.w	ip, #10
 800c03c:	4620      	mov	r0, r4
 800c03e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c042:	3a30      	subs	r2, #48	@ 0x30
 800c044:	2a09      	cmp	r2, #9
 800c046:	d903      	bls.n	800c050 <_vfiprintf_r+0x1cc>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0c6      	beq.n	800bfda <_vfiprintf_r+0x156>
 800c04c:	9105      	str	r1, [sp, #20]
 800c04e:	e7c4      	b.n	800bfda <_vfiprintf_r+0x156>
 800c050:	fb0c 2101 	mla	r1, ip, r1, r2
 800c054:	4604      	mov	r4, r0
 800c056:	2301      	movs	r3, #1
 800c058:	e7f0      	b.n	800c03c <_vfiprintf_r+0x1b8>
 800c05a:	ab03      	add	r3, sp, #12
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	462a      	mov	r2, r5
 800c060:	4b12      	ldr	r3, [pc, #72]	@ (800c0ac <_vfiprintf_r+0x228>)
 800c062:	a904      	add	r1, sp, #16
 800c064:	4630      	mov	r0, r6
 800c066:	f7fd f9f9 	bl	800945c <_printf_float>
 800c06a:	4607      	mov	r7, r0
 800c06c:	1c78      	adds	r0, r7, #1
 800c06e:	d1d6      	bne.n	800c01e <_vfiprintf_r+0x19a>
 800c070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c072:	07d9      	lsls	r1, r3, #31
 800c074:	d405      	bmi.n	800c082 <_vfiprintf_r+0x1fe>
 800c076:	89ab      	ldrh	r3, [r5, #12]
 800c078:	059a      	lsls	r2, r3, #22
 800c07a:	d402      	bmi.n	800c082 <_vfiprintf_r+0x1fe>
 800c07c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c07e:	f7fe fd2b 	bl	800aad8 <__retarget_lock_release_recursive>
 800c082:	89ab      	ldrh	r3, [r5, #12]
 800c084:	065b      	lsls	r3, r3, #25
 800c086:	f53f af1f 	bmi.w	800bec8 <_vfiprintf_r+0x44>
 800c08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c08c:	e71e      	b.n	800becc <_vfiprintf_r+0x48>
 800c08e:	ab03      	add	r3, sp, #12
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	462a      	mov	r2, r5
 800c094:	4b05      	ldr	r3, [pc, #20]	@ (800c0ac <_vfiprintf_r+0x228>)
 800c096:	a904      	add	r1, sp, #16
 800c098:	4630      	mov	r0, r6
 800c09a:	f7fd fc77 	bl	800998c <_printf_i>
 800c09e:	e7e4      	b.n	800c06a <_vfiprintf_r+0x1e6>
 800c0a0:	0800d41f 	.word	0x0800d41f
 800c0a4:	0800d429 	.word	0x0800d429
 800c0a8:	0800945d 	.word	0x0800945d
 800c0ac:	0800be61 	.word	0x0800be61
 800c0b0:	0800d425 	.word	0x0800d425

0800c0b4 <malloc>:
 800c0b4:	4b02      	ldr	r3, [pc, #8]	@ (800c0c0 <malloc+0xc>)
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	6818      	ldr	r0, [r3, #0]
 800c0ba:	f000 b825 	b.w	800c108 <_malloc_r>
 800c0be:	bf00      	nop
 800c0c0:	20000188 	.word	0x20000188

0800c0c4 <sbrk_aligned>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	4e0f      	ldr	r6, [pc, #60]	@ (800c104 <sbrk_aligned+0x40>)
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	6831      	ldr	r1, [r6, #0]
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	b911      	cbnz	r1, 800c0d6 <sbrk_aligned+0x12>
 800c0d0:	f000 ff8a 	bl	800cfe8 <_sbrk_r>
 800c0d4:	6030      	str	r0, [r6, #0]
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4628      	mov	r0, r5
 800c0da:	f000 ff85 	bl	800cfe8 <_sbrk_r>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d103      	bne.n	800c0ea <sbrk_aligned+0x26>
 800c0e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ea:	1cc4      	adds	r4, r0, #3
 800c0ec:	f024 0403 	bic.w	r4, r4, #3
 800c0f0:	42a0      	cmp	r0, r4
 800c0f2:	d0f8      	beq.n	800c0e6 <sbrk_aligned+0x22>
 800c0f4:	1a21      	subs	r1, r4, r0
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	f000 ff76 	bl	800cfe8 <_sbrk_r>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d1f2      	bne.n	800c0e6 <sbrk_aligned+0x22>
 800c100:	e7ef      	b.n	800c0e2 <sbrk_aligned+0x1e>
 800c102:	bf00      	nop
 800c104:	20004e3c 	.word	0x20004e3c

0800c108 <_malloc_r>:
 800c108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c10c:	1ccd      	adds	r5, r1, #3
 800c10e:	f025 0503 	bic.w	r5, r5, #3
 800c112:	3508      	adds	r5, #8
 800c114:	2d0c      	cmp	r5, #12
 800c116:	bf38      	it	cc
 800c118:	250c      	movcc	r5, #12
 800c11a:	2d00      	cmp	r5, #0
 800c11c:	4606      	mov	r6, r0
 800c11e:	db01      	blt.n	800c124 <_malloc_r+0x1c>
 800c120:	42a9      	cmp	r1, r5
 800c122:	d904      	bls.n	800c12e <_malloc_r+0x26>
 800c124:	230c      	movs	r3, #12
 800c126:	6033      	str	r3, [r6, #0]
 800c128:	2000      	movs	r0, #0
 800c12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c204 <_malloc_r+0xfc>
 800c132:	f000 f927 	bl	800c384 <__malloc_lock>
 800c136:	f8d8 3000 	ldr.w	r3, [r8]
 800c13a:	461c      	mov	r4, r3
 800c13c:	bb44      	cbnz	r4, 800c190 <_malloc_r+0x88>
 800c13e:	4629      	mov	r1, r5
 800c140:	4630      	mov	r0, r6
 800c142:	f7ff ffbf 	bl	800c0c4 <sbrk_aligned>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	4604      	mov	r4, r0
 800c14a:	d158      	bne.n	800c1fe <_malloc_r+0xf6>
 800c14c:	f8d8 4000 	ldr.w	r4, [r8]
 800c150:	4627      	mov	r7, r4
 800c152:	2f00      	cmp	r7, #0
 800c154:	d143      	bne.n	800c1de <_malloc_r+0xd6>
 800c156:	2c00      	cmp	r4, #0
 800c158:	d04b      	beq.n	800c1f2 <_malloc_r+0xea>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	4639      	mov	r1, r7
 800c15e:	4630      	mov	r0, r6
 800c160:	eb04 0903 	add.w	r9, r4, r3
 800c164:	f000 ff40 	bl	800cfe8 <_sbrk_r>
 800c168:	4581      	cmp	r9, r0
 800c16a:	d142      	bne.n	800c1f2 <_malloc_r+0xea>
 800c16c:	6821      	ldr	r1, [r4, #0]
 800c16e:	1a6d      	subs	r5, r5, r1
 800c170:	4629      	mov	r1, r5
 800c172:	4630      	mov	r0, r6
 800c174:	f7ff ffa6 	bl	800c0c4 <sbrk_aligned>
 800c178:	3001      	adds	r0, #1
 800c17a:	d03a      	beq.n	800c1f2 <_malloc_r+0xea>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	442b      	add	r3, r5
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	f8d8 3000 	ldr.w	r3, [r8]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	bb62      	cbnz	r2, 800c1e4 <_malloc_r+0xdc>
 800c18a:	f8c8 7000 	str.w	r7, [r8]
 800c18e:	e00f      	b.n	800c1b0 <_malloc_r+0xa8>
 800c190:	6822      	ldr	r2, [r4, #0]
 800c192:	1b52      	subs	r2, r2, r5
 800c194:	d420      	bmi.n	800c1d8 <_malloc_r+0xd0>
 800c196:	2a0b      	cmp	r2, #11
 800c198:	d917      	bls.n	800c1ca <_malloc_r+0xc2>
 800c19a:	1961      	adds	r1, r4, r5
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	6025      	str	r5, [r4, #0]
 800c1a0:	bf18      	it	ne
 800c1a2:	6059      	strne	r1, [r3, #4]
 800c1a4:	6863      	ldr	r3, [r4, #4]
 800c1a6:	bf08      	it	eq
 800c1a8:	f8c8 1000 	streq.w	r1, [r8]
 800c1ac:	5162      	str	r2, [r4, r5]
 800c1ae:	604b      	str	r3, [r1, #4]
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f000 f8ed 	bl	800c390 <__malloc_unlock>
 800c1b6:	f104 000b 	add.w	r0, r4, #11
 800c1ba:	1d23      	adds	r3, r4, #4
 800c1bc:	f020 0007 	bic.w	r0, r0, #7
 800c1c0:	1ac2      	subs	r2, r0, r3
 800c1c2:	bf1c      	itt	ne
 800c1c4:	1a1b      	subne	r3, r3, r0
 800c1c6:	50a3      	strne	r3, [r4, r2]
 800c1c8:	e7af      	b.n	800c12a <_malloc_r+0x22>
 800c1ca:	6862      	ldr	r2, [r4, #4]
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	bf0c      	ite	eq
 800c1d0:	f8c8 2000 	streq.w	r2, [r8]
 800c1d4:	605a      	strne	r2, [r3, #4]
 800c1d6:	e7eb      	b.n	800c1b0 <_malloc_r+0xa8>
 800c1d8:	4623      	mov	r3, r4
 800c1da:	6864      	ldr	r4, [r4, #4]
 800c1dc:	e7ae      	b.n	800c13c <_malloc_r+0x34>
 800c1de:	463c      	mov	r4, r7
 800c1e0:	687f      	ldr	r7, [r7, #4]
 800c1e2:	e7b6      	b.n	800c152 <_malloc_r+0x4a>
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	42a3      	cmp	r3, r4
 800c1ea:	d1fb      	bne.n	800c1e4 <_malloc_r+0xdc>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	6053      	str	r3, [r2, #4]
 800c1f0:	e7de      	b.n	800c1b0 <_malloc_r+0xa8>
 800c1f2:	230c      	movs	r3, #12
 800c1f4:	6033      	str	r3, [r6, #0]
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f000 f8ca 	bl	800c390 <__malloc_unlock>
 800c1fc:	e794      	b.n	800c128 <_malloc_r+0x20>
 800c1fe:	6005      	str	r5, [r0, #0]
 800c200:	e7d6      	b.n	800c1b0 <_malloc_r+0xa8>
 800c202:	bf00      	nop
 800c204:	20004e40 	.word	0x20004e40

0800c208 <__ascii_mbtowc>:
 800c208:	b082      	sub	sp, #8
 800c20a:	b901      	cbnz	r1, 800c20e <__ascii_mbtowc+0x6>
 800c20c:	a901      	add	r1, sp, #4
 800c20e:	b142      	cbz	r2, 800c222 <__ascii_mbtowc+0x1a>
 800c210:	b14b      	cbz	r3, 800c226 <__ascii_mbtowc+0x1e>
 800c212:	7813      	ldrb	r3, [r2, #0]
 800c214:	600b      	str	r3, [r1, #0]
 800c216:	7812      	ldrb	r2, [r2, #0]
 800c218:	1e10      	subs	r0, r2, #0
 800c21a:	bf18      	it	ne
 800c21c:	2001      	movne	r0, #1
 800c21e:	b002      	add	sp, #8
 800c220:	4770      	bx	lr
 800c222:	4610      	mov	r0, r2
 800c224:	e7fb      	b.n	800c21e <__ascii_mbtowc+0x16>
 800c226:	f06f 0001 	mvn.w	r0, #1
 800c22a:	e7f8      	b.n	800c21e <__ascii_mbtowc+0x16>

0800c22c <__sflush_r>:
 800c22c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c234:	0716      	lsls	r6, r2, #28
 800c236:	4605      	mov	r5, r0
 800c238:	460c      	mov	r4, r1
 800c23a:	d454      	bmi.n	800c2e6 <__sflush_r+0xba>
 800c23c:	684b      	ldr	r3, [r1, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dc02      	bgt.n	800c248 <__sflush_r+0x1c>
 800c242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c244:	2b00      	cmp	r3, #0
 800c246:	dd48      	ble.n	800c2da <__sflush_r+0xae>
 800c248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c24a:	2e00      	cmp	r6, #0
 800c24c:	d045      	beq.n	800c2da <__sflush_r+0xae>
 800c24e:	2300      	movs	r3, #0
 800c250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c254:	682f      	ldr	r7, [r5, #0]
 800c256:	6a21      	ldr	r1, [r4, #32]
 800c258:	602b      	str	r3, [r5, #0]
 800c25a:	d030      	beq.n	800c2be <__sflush_r+0x92>
 800c25c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	0759      	lsls	r1, r3, #29
 800c262:	d505      	bpl.n	800c270 <__sflush_r+0x44>
 800c264:	6863      	ldr	r3, [r4, #4]
 800c266:	1ad2      	subs	r2, r2, r3
 800c268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c26a:	b10b      	cbz	r3, 800c270 <__sflush_r+0x44>
 800c26c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c26e:	1ad2      	subs	r2, r2, r3
 800c270:	2300      	movs	r3, #0
 800c272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c274:	6a21      	ldr	r1, [r4, #32]
 800c276:	4628      	mov	r0, r5
 800c278:	47b0      	blx	r6
 800c27a:	1c43      	adds	r3, r0, #1
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	d106      	bne.n	800c28e <__sflush_r+0x62>
 800c280:	6829      	ldr	r1, [r5, #0]
 800c282:	291d      	cmp	r1, #29
 800c284:	d82b      	bhi.n	800c2de <__sflush_r+0xb2>
 800c286:	4a2a      	ldr	r2, [pc, #168]	@ (800c330 <__sflush_r+0x104>)
 800c288:	40ca      	lsrs	r2, r1
 800c28a:	07d6      	lsls	r6, r2, #31
 800c28c:	d527      	bpl.n	800c2de <__sflush_r+0xb2>
 800c28e:	2200      	movs	r2, #0
 800c290:	6062      	str	r2, [r4, #4]
 800c292:	04d9      	lsls	r1, r3, #19
 800c294:	6922      	ldr	r2, [r4, #16]
 800c296:	6022      	str	r2, [r4, #0]
 800c298:	d504      	bpl.n	800c2a4 <__sflush_r+0x78>
 800c29a:	1c42      	adds	r2, r0, #1
 800c29c:	d101      	bne.n	800c2a2 <__sflush_r+0x76>
 800c29e:	682b      	ldr	r3, [r5, #0]
 800c2a0:	b903      	cbnz	r3, 800c2a4 <__sflush_r+0x78>
 800c2a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2a6:	602f      	str	r7, [r5, #0]
 800c2a8:	b1b9      	cbz	r1, 800c2da <__sflush_r+0xae>
 800c2aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2ae:	4299      	cmp	r1, r3
 800c2b0:	d002      	beq.n	800c2b8 <__sflush_r+0x8c>
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f000 ff0e 	bl	800d0d4 <_free_r>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2bc:	e00d      	b.n	800c2da <__sflush_r+0xae>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	47b0      	blx	r6
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	1c50      	adds	r0, r2, #1
 800c2c8:	d1c9      	bne.n	800c25e <__sflush_r+0x32>
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0c6      	beq.n	800c25e <__sflush_r+0x32>
 800c2d0:	2b1d      	cmp	r3, #29
 800c2d2:	d001      	beq.n	800c2d8 <__sflush_r+0xac>
 800c2d4:	2b16      	cmp	r3, #22
 800c2d6:	d11e      	bne.n	800c316 <__sflush_r+0xea>
 800c2d8:	602f      	str	r7, [r5, #0]
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e022      	b.n	800c324 <__sflush_r+0xf8>
 800c2de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2e2:	b21b      	sxth	r3, r3
 800c2e4:	e01b      	b.n	800c31e <__sflush_r+0xf2>
 800c2e6:	690f      	ldr	r7, [r1, #16]
 800c2e8:	2f00      	cmp	r7, #0
 800c2ea:	d0f6      	beq.n	800c2da <__sflush_r+0xae>
 800c2ec:	0793      	lsls	r3, r2, #30
 800c2ee:	680e      	ldr	r6, [r1, #0]
 800c2f0:	bf08      	it	eq
 800c2f2:	694b      	ldreq	r3, [r1, #20]
 800c2f4:	600f      	str	r7, [r1, #0]
 800c2f6:	bf18      	it	ne
 800c2f8:	2300      	movne	r3, #0
 800c2fa:	eba6 0807 	sub.w	r8, r6, r7
 800c2fe:	608b      	str	r3, [r1, #8]
 800c300:	f1b8 0f00 	cmp.w	r8, #0
 800c304:	dde9      	ble.n	800c2da <__sflush_r+0xae>
 800c306:	6a21      	ldr	r1, [r4, #32]
 800c308:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c30a:	4643      	mov	r3, r8
 800c30c:	463a      	mov	r2, r7
 800c30e:	4628      	mov	r0, r5
 800c310:	47b0      	blx	r6
 800c312:	2800      	cmp	r0, #0
 800c314:	dc08      	bgt.n	800c328 <__sflush_r+0xfc>
 800c316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c31e:	81a3      	strh	r3, [r4, #12]
 800c320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c328:	4407      	add	r7, r0
 800c32a:	eba8 0800 	sub.w	r8, r8, r0
 800c32e:	e7e7      	b.n	800c300 <__sflush_r+0xd4>
 800c330:	20400001 	.word	0x20400001

0800c334 <_fflush_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	690b      	ldr	r3, [r1, #16]
 800c338:	4605      	mov	r5, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	b913      	cbnz	r3, 800c344 <_fflush_r+0x10>
 800c33e:	2500      	movs	r5, #0
 800c340:	4628      	mov	r0, r5
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	b118      	cbz	r0, 800c34e <_fflush_r+0x1a>
 800c346:	6a03      	ldr	r3, [r0, #32]
 800c348:	b90b      	cbnz	r3, 800c34e <_fflush_r+0x1a>
 800c34a:	f7fd fcc9 	bl	8009ce0 <__sinit>
 800c34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0f3      	beq.n	800c33e <_fflush_r+0xa>
 800c356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c358:	07d0      	lsls	r0, r2, #31
 800c35a:	d404      	bmi.n	800c366 <_fflush_r+0x32>
 800c35c:	0599      	lsls	r1, r3, #22
 800c35e:	d402      	bmi.n	800c366 <_fflush_r+0x32>
 800c360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c362:	f7fe fbb8 	bl	800aad6 <__retarget_lock_acquire_recursive>
 800c366:	4628      	mov	r0, r5
 800c368:	4621      	mov	r1, r4
 800c36a:	f7ff ff5f 	bl	800c22c <__sflush_r>
 800c36e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c370:	07da      	lsls	r2, r3, #31
 800c372:	4605      	mov	r5, r0
 800c374:	d4e4      	bmi.n	800c340 <_fflush_r+0xc>
 800c376:	89a3      	ldrh	r3, [r4, #12]
 800c378:	059b      	lsls	r3, r3, #22
 800c37a:	d4e1      	bmi.n	800c340 <_fflush_r+0xc>
 800c37c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c37e:	f7fe fbab 	bl	800aad8 <__retarget_lock_release_recursive>
 800c382:	e7dd      	b.n	800c340 <_fflush_r+0xc>

0800c384 <__malloc_lock>:
 800c384:	4801      	ldr	r0, [pc, #4]	@ (800c38c <__malloc_lock+0x8>)
 800c386:	f7fe bba6 	b.w	800aad6 <__retarget_lock_acquire_recursive>
 800c38a:	bf00      	nop
 800c38c:	20004e38 	.word	0x20004e38

0800c390 <__malloc_unlock>:
 800c390:	4801      	ldr	r0, [pc, #4]	@ (800c398 <__malloc_unlock+0x8>)
 800c392:	f7fe bba1 	b.w	800aad8 <__retarget_lock_release_recursive>
 800c396:	bf00      	nop
 800c398:	20004e38 	.word	0x20004e38

0800c39c <_Balloc>:
 800c39c:	b570      	push	{r4, r5, r6, lr}
 800c39e:	69c6      	ldr	r6, [r0, #28]
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	b976      	cbnz	r6, 800c3c4 <_Balloc+0x28>
 800c3a6:	2010      	movs	r0, #16
 800c3a8:	f7ff fe84 	bl	800c0b4 <malloc>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	61e0      	str	r0, [r4, #28]
 800c3b0:	b920      	cbnz	r0, 800c3bc <_Balloc+0x20>
 800c3b2:	4b18      	ldr	r3, [pc, #96]	@ (800c414 <_Balloc+0x78>)
 800c3b4:	4818      	ldr	r0, [pc, #96]	@ (800c418 <_Balloc+0x7c>)
 800c3b6:	216b      	movs	r1, #107	@ 0x6b
 800c3b8:	f000 fe5a 	bl	800d070 <__assert_func>
 800c3bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3c0:	6006      	str	r6, [r0, #0]
 800c3c2:	60c6      	str	r6, [r0, #12]
 800c3c4:	69e6      	ldr	r6, [r4, #28]
 800c3c6:	68f3      	ldr	r3, [r6, #12]
 800c3c8:	b183      	cbz	r3, 800c3ec <_Balloc+0x50>
 800c3ca:	69e3      	ldr	r3, [r4, #28]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3d2:	b9b8      	cbnz	r0, 800c404 <_Balloc+0x68>
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	fa01 f605 	lsl.w	r6, r1, r5
 800c3da:	1d72      	adds	r2, r6, #5
 800c3dc:	0092      	lsls	r2, r2, #2
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 fe64 	bl	800d0ac <_calloc_r>
 800c3e4:	b160      	cbz	r0, 800c400 <_Balloc+0x64>
 800c3e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3ea:	e00e      	b.n	800c40a <_Balloc+0x6e>
 800c3ec:	2221      	movs	r2, #33	@ 0x21
 800c3ee:	2104      	movs	r1, #4
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f000 fe5b 	bl	800d0ac <_calloc_r>
 800c3f6:	69e3      	ldr	r3, [r4, #28]
 800c3f8:	60f0      	str	r0, [r6, #12]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1e4      	bne.n	800c3ca <_Balloc+0x2e>
 800c400:	2000      	movs	r0, #0
 800c402:	bd70      	pop	{r4, r5, r6, pc}
 800c404:	6802      	ldr	r2, [r0, #0]
 800c406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c40a:	2300      	movs	r3, #0
 800c40c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c410:	e7f7      	b.n	800c402 <_Balloc+0x66>
 800c412:	bf00      	nop
 800c414:	0800d33f 	.word	0x0800d33f
 800c418:	0800d430 	.word	0x0800d430

0800c41c <_Bfree>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	69c6      	ldr	r6, [r0, #28]
 800c420:	4605      	mov	r5, r0
 800c422:	460c      	mov	r4, r1
 800c424:	b976      	cbnz	r6, 800c444 <_Bfree+0x28>
 800c426:	2010      	movs	r0, #16
 800c428:	f7ff fe44 	bl	800c0b4 <malloc>
 800c42c:	4602      	mov	r2, r0
 800c42e:	61e8      	str	r0, [r5, #28]
 800c430:	b920      	cbnz	r0, 800c43c <_Bfree+0x20>
 800c432:	4b09      	ldr	r3, [pc, #36]	@ (800c458 <_Bfree+0x3c>)
 800c434:	4809      	ldr	r0, [pc, #36]	@ (800c45c <_Bfree+0x40>)
 800c436:	218f      	movs	r1, #143	@ 0x8f
 800c438:	f000 fe1a 	bl	800d070 <__assert_func>
 800c43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c440:	6006      	str	r6, [r0, #0]
 800c442:	60c6      	str	r6, [r0, #12]
 800c444:	b13c      	cbz	r4, 800c456 <_Bfree+0x3a>
 800c446:	69eb      	ldr	r3, [r5, #28]
 800c448:	6862      	ldr	r2, [r4, #4]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c450:	6021      	str	r1, [r4, #0]
 800c452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c456:	bd70      	pop	{r4, r5, r6, pc}
 800c458:	0800d33f 	.word	0x0800d33f
 800c45c:	0800d430 	.word	0x0800d430

0800c460 <__multadd>:
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	690d      	ldr	r5, [r1, #16]
 800c466:	4607      	mov	r7, r0
 800c468:	460c      	mov	r4, r1
 800c46a:	461e      	mov	r6, r3
 800c46c:	f101 0c14 	add.w	ip, r1, #20
 800c470:	2000      	movs	r0, #0
 800c472:	f8dc 3000 	ldr.w	r3, [ip]
 800c476:	b299      	uxth	r1, r3
 800c478:	fb02 6101 	mla	r1, r2, r1, r6
 800c47c:	0c1e      	lsrs	r6, r3, #16
 800c47e:	0c0b      	lsrs	r3, r1, #16
 800c480:	fb02 3306 	mla	r3, r2, r6, r3
 800c484:	b289      	uxth	r1, r1
 800c486:	3001      	adds	r0, #1
 800c488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c48c:	4285      	cmp	r5, r0
 800c48e:	f84c 1b04 	str.w	r1, [ip], #4
 800c492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c496:	dcec      	bgt.n	800c472 <__multadd+0x12>
 800c498:	b30e      	cbz	r6, 800c4de <__multadd+0x7e>
 800c49a:	68a3      	ldr	r3, [r4, #8]
 800c49c:	42ab      	cmp	r3, r5
 800c49e:	dc19      	bgt.n	800c4d4 <__multadd+0x74>
 800c4a0:	6861      	ldr	r1, [r4, #4]
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	3101      	adds	r1, #1
 800c4a6:	f7ff ff79 	bl	800c39c <_Balloc>
 800c4aa:	4680      	mov	r8, r0
 800c4ac:	b928      	cbnz	r0, 800c4ba <__multadd+0x5a>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e4 <__multadd+0x84>)
 800c4b2:	480d      	ldr	r0, [pc, #52]	@ (800c4e8 <__multadd+0x88>)
 800c4b4:	21ba      	movs	r1, #186	@ 0xba
 800c4b6:	f000 fddb 	bl	800d070 <__assert_func>
 800c4ba:	6922      	ldr	r2, [r4, #16]
 800c4bc:	3202      	adds	r2, #2
 800c4be:	f104 010c 	add.w	r1, r4, #12
 800c4c2:	0092      	lsls	r2, r2, #2
 800c4c4:	300c      	adds	r0, #12
 800c4c6:	f7fe fb0d 	bl	800aae4 <memcpy>
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	4638      	mov	r0, r7
 800c4ce:	f7ff ffa5 	bl	800c41c <_Bfree>
 800c4d2:	4644      	mov	r4, r8
 800c4d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4d8:	3501      	adds	r5, #1
 800c4da:	615e      	str	r6, [r3, #20]
 800c4dc:	6125      	str	r5, [r4, #16]
 800c4de:	4620      	mov	r0, r4
 800c4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e4:	0800d3ae 	.word	0x0800d3ae
 800c4e8:	0800d430 	.word	0x0800d430

0800c4ec <__s2b>:
 800c4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	4615      	mov	r5, r2
 800c4f4:	461f      	mov	r7, r3
 800c4f6:	2209      	movs	r2, #9
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c500:	2100      	movs	r1, #0
 800c502:	2201      	movs	r2, #1
 800c504:	429a      	cmp	r2, r3
 800c506:	db09      	blt.n	800c51c <__s2b+0x30>
 800c508:	4630      	mov	r0, r6
 800c50a:	f7ff ff47 	bl	800c39c <_Balloc>
 800c50e:	b940      	cbnz	r0, 800c522 <__s2b+0x36>
 800c510:	4602      	mov	r2, r0
 800c512:	4b19      	ldr	r3, [pc, #100]	@ (800c578 <__s2b+0x8c>)
 800c514:	4819      	ldr	r0, [pc, #100]	@ (800c57c <__s2b+0x90>)
 800c516:	21d3      	movs	r1, #211	@ 0xd3
 800c518:	f000 fdaa 	bl	800d070 <__assert_func>
 800c51c:	0052      	lsls	r2, r2, #1
 800c51e:	3101      	adds	r1, #1
 800c520:	e7f0      	b.n	800c504 <__s2b+0x18>
 800c522:	9b08      	ldr	r3, [sp, #32]
 800c524:	6143      	str	r3, [r0, #20]
 800c526:	2d09      	cmp	r5, #9
 800c528:	f04f 0301 	mov.w	r3, #1
 800c52c:	6103      	str	r3, [r0, #16]
 800c52e:	dd16      	ble.n	800c55e <__s2b+0x72>
 800c530:	f104 0909 	add.w	r9, r4, #9
 800c534:	46c8      	mov	r8, r9
 800c536:	442c      	add	r4, r5
 800c538:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c53c:	4601      	mov	r1, r0
 800c53e:	3b30      	subs	r3, #48	@ 0x30
 800c540:	220a      	movs	r2, #10
 800c542:	4630      	mov	r0, r6
 800c544:	f7ff ff8c 	bl	800c460 <__multadd>
 800c548:	45a0      	cmp	r8, r4
 800c54a:	d1f5      	bne.n	800c538 <__s2b+0x4c>
 800c54c:	f1a5 0408 	sub.w	r4, r5, #8
 800c550:	444c      	add	r4, r9
 800c552:	1b2d      	subs	r5, r5, r4
 800c554:	1963      	adds	r3, r4, r5
 800c556:	42bb      	cmp	r3, r7
 800c558:	db04      	blt.n	800c564 <__s2b+0x78>
 800c55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55e:	340a      	adds	r4, #10
 800c560:	2509      	movs	r5, #9
 800c562:	e7f6      	b.n	800c552 <__s2b+0x66>
 800c564:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c568:	4601      	mov	r1, r0
 800c56a:	3b30      	subs	r3, #48	@ 0x30
 800c56c:	220a      	movs	r2, #10
 800c56e:	4630      	mov	r0, r6
 800c570:	f7ff ff76 	bl	800c460 <__multadd>
 800c574:	e7ee      	b.n	800c554 <__s2b+0x68>
 800c576:	bf00      	nop
 800c578:	0800d3ae 	.word	0x0800d3ae
 800c57c:	0800d430 	.word	0x0800d430

0800c580 <__hi0bits>:
 800c580:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c584:	4603      	mov	r3, r0
 800c586:	bf36      	itet	cc
 800c588:	0403      	lslcc	r3, r0, #16
 800c58a:	2000      	movcs	r0, #0
 800c58c:	2010      	movcc	r0, #16
 800c58e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c592:	bf3c      	itt	cc
 800c594:	021b      	lslcc	r3, r3, #8
 800c596:	3008      	addcc	r0, #8
 800c598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c59c:	bf3c      	itt	cc
 800c59e:	011b      	lslcc	r3, r3, #4
 800c5a0:	3004      	addcc	r0, #4
 800c5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5a6:	bf3c      	itt	cc
 800c5a8:	009b      	lslcc	r3, r3, #2
 800c5aa:	3002      	addcc	r0, #2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	db05      	blt.n	800c5bc <__hi0bits+0x3c>
 800c5b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5b4:	f100 0001 	add.w	r0, r0, #1
 800c5b8:	bf08      	it	eq
 800c5ba:	2020      	moveq	r0, #32
 800c5bc:	4770      	bx	lr

0800c5be <__lo0bits>:
 800c5be:	6803      	ldr	r3, [r0, #0]
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	f013 0007 	ands.w	r0, r3, #7
 800c5c6:	d00b      	beq.n	800c5e0 <__lo0bits+0x22>
 800c5c8:	07d9      	lsls	r1, r3, #31
 800c5ca:	d421      	bmi.n	800c610 <__lo0bits+0x52>
 800c5cc:	0798      	lsls	r0, r3, #30
 800c5ce:	bf49      	itett	mi
 800c5d0:	085b      	lsrmi	r3, r3, #1
 800c5d2:	089b      	lsrpl	r3, r3, #2
 800c5d4:	2001      	movmi	r0, #1
 800c5d6:	6013      	strmi	r3, [r2, #0]
 800c5d8:	bf5c      	itt	pl
 800c5da:	6013      	strpl	r3, [r2, #0]
 800c5dc:	2002      	movpl	r0, #2
 800c5de:	4770      	bx	lr
 800c5e0:	b299      	uxth	r1, r3
 800c5e2:	b909      	cbnz	r1, 800c5e8 <__lo0bits+0x2a>
 800c5e4:	0c1b      	lsrs	r3, r3, #16
 800c5e6:	2010      	movs	r0, #16
 800c5e8:	b2d9      	uxtb	r1, r3
 800c5ea:	b909      	cbnz	r1, 800c5f0 <__lo0bits+0x32>
 800c5ec:	3008      	adds	r0, #8
 800c5ee:	0a1b      	lsrs	r3, r3, #8
 800c5f0:	0719      	lsls	r1, r3, #28
 800c5f2:	bf04      	itt	eq
 800c5f4:	091b      	lsreq	r3, r3, #4
 800c5f6:	3004      	addeq	r0, #4
 800c5f8:	0799      	lsls	r1, r3, #30
 800c5fa:	bf04      	itt	eq
 800c5fc:	089b      	lsreq	r3, r3, #2
 800c5fe:	3002      	addeq	r0, #2
 800c600:	07d9      	lsls	r1, r3, #31
 800c602:	d403      	bmi.n	800c60c <__lo0bits+0x4e>
 800c604:	085b      	lsrs	r3, r3, #1
 800c606:	f100 0001 	add.w	r0, r0, #1
 800c60a:	d003      	beq.n	800c614 <__lo0bits+0x56>
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	4770      	bx	lr
 800c610:	2000      	movs	r0, #0
 800c612:	4770      	bx	lr
 800c614:	2020      	movs	r0, #32
 800c616:	4770      	bx	lr

0800c618 <__i2b>:
 800c618:	b510      	push	{r4, lr}
 800c61a:	460c      	mov	r4, r1
 800c61c:	2101      	movs	r1, #1
 800c61e:	f7ff febd 	bl	800c39c <_Balloc>
 800c622:	4602      	mov	r2, r0
 800c624:	b928      	cbnz	r0, 800c632 <__i2b+0x1a>
 800c626:	4b05      	ldr	r3, [pc, #20]	@ (800c63c <__i2b+0x24>)
 800c628:	4805      	ldr	r0, [pc, #20]	@ (800c640 <__i2b+0x28>)
 800c62a:	f240 1145 	movw	r1, #325	@ 0x145
 800c62e:	f000 fd1f 	bl	800d070 <__assert_func>
 800c632:	2301      	movs	r3, #1
 800c634:	6144      	str	r4, [r0, #20]
 800c636:	6103      	str	r3, [r0, #16]
 800c638:	bd10      	pop	{r4, pc}
 800c63a:	bf00      	nop
 800c63c:	0800d3ae 	.word	0x0800d3ae
 800c640:	0800d430 	.word	0x0800d430

0800c644 <__multiply>:
 800c644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	4617      	mov	r7, r2
 800c64a:	690a      	ldr	r2, [r1, #16]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	429a      	cmp	r2, r3
 800c650:	bfa8      	it	ge
 800c652:	463b      	movge	r3, r7
 800c654:	4689      	mov	r9, r1
 800c656:	bfa4      	itt	ge
 800c658:	460f      	movge	r7, r1
 800c65a:	4699      	movge	r9, r3
 800c65c:	693d      	ldr	r5, [r7, #16]
 800c65e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	6879      	ldr	r1, [r7, #4]
 800c666:	eb05 060a 	add.w	r6, r5, sl
 800c66a:	42b3      	cmp	r3, r6
 800c66c:	b085      	sub	sp, #20
 800c66e:	bfb8      	it	lt
 800c670:	3101      	addlt	r1, #1
 800c672:	f7ff fe93 	bl	800c39c <_Balloc>
 800c676:	b930      	cbnz	r0, 800c686 <__multiply+0x42>
 800c678:	4602      	mov	r2, r0
 800c67a:	4b41      	ldr	r3, [pc, #260]	@ (800c780 <__multiply+0x13c>)
 800c67c:	4841      	ldr	r0, [pc, #260]	@ (800c784 <__multiply+0x140>)
 800c67e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c682:	f000 fcf5 	bl	800d070 <__assert_func>
 800c686:	f100 0414 	add.w	r4, r0, #20
 800c68a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c68e:	4623      	mov	r3, r4
 800c690:	2200      	movs	r2, #0
 800c692:	4573      	cmp	r3, lr
 800c694:	d320      	bcc.n	800c6d8 <__multiply+0x94>
 800c696:	f107 0814 	add.w	r8, r7, #20
 800c69a:	f109 0114 	add.w	r1, r9, #20
 800c69e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c6a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c6a6:	9302      	str	r3, [sp, #8]
 800c6a8:	1beb      	subs	r3, r5, r7
 800c6aa:	3b15      	subs	r3, #21
 800c6ac:	f023 0303 	bic.w	r3, r3, #3
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	3715      	adds	r7, #21
 800c6b4:	42bd      	cmp	r5, r7
 800c6b6:	bf38      	it	cc
 800c6b8:	2304      	movcc	r3, #4
 800c6ba:	9301      	str	r3, [sp, #4]
 800c6bc:	9b02      	ldr	r3, [sp, #8]
 800c6be:	9103      	str	r1, [sp, #12]
 800c6c0:	428b      	cmp	r3, r1
 800c6c2:	d80c      	bhi.n	800c6de <__multiply+0x9a>
 800c6c4:	2e00      	cmp	r6, #0
 800c6c6:	dd03      	ble.n	800c6d0 <__multiply+0x8c>
 800c6c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d055      	beq.n	800c77c <__multiply+0x138>
 800c6d0:	6106      	str	r6, [r0, #16]
 800c6d2:	b005      	add	sp, #20
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	f843 2b04 	str.w	r2, [r3], #4
 800c6dc:	e7d9      	b.n	800c692 <__multiply+0x4e>
 800c6de:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6e2:	f1ba 0f00 	cmp.w	sl, #0
 800c6e6:	d01f      	beq.n	800c728 <__multiply+0xe4>
 800c6e8:	46c4      	mov	ip, r8
 800c6ea:	46a1      	mov	r9, r4
 800c6ec:	2700      	movs	r7, #0
 800c6ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6f2:	f8d9 3000 	ldr.w	r3, [r9]
 800c6f6:	fa1f fb82 	uxth.w	fp, r2
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	fb0a 330b 	mla	r3, sl, fp, r3
 800c700:	443b      	add	r3, r7
 800c702:	f8d9 7000 	ldr.w	r7, [r9]
 800c706:	0c12      	lsrs	r2, r2, #16
 800c708:	0c3f      	lsrs	r7, r7, #16
 800c70a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c70e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c712:	b29b      	uxth	r3, r3
 800c714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c718:	4565      	cmp	r5, ip
 800c71a:	f849 3b04 	str.w	r3, [r9], #4
 800c71e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c722:	d8e4      	bhi.n	800c6ee <__multiply+0xaa>
 800c724:	9b01      	ldr	r3, [sp, #4]
 800c726:	50e7      	str	r7, [r4, r3]
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c72e:	3104      	adds	r1, #4
 800c730:	f1b9 0f00 	cmp.w	r9, #0
 800c734:	d020      	beq.n	800c778 <__multiply+0x134>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	4647      	mov	r7, r8
 800c73a:	46a4      	mov	ip, r4
 800c73c:	f04f 0a00 	mov.w	sl, #0
 800c740:	f8b7 b000 	ldrh.w	fp, [r7]
 800c744:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c748:	fb09 220b 	mla	r2, r9, fp, r2
 800c74c:	4452      	add	r2, sl
 800c74e:	b29b      	uxth	r3, r3
 800c750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c754:	f84c 3b04 	str.w	r3, [ip], #4
 800c758:	f857 3b04 	ldr.w	r3, [r7], #4
 800c75c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c760:	f8bc 3000 	ldrh.w	r3, [ip]
 800c764:	fb09 330a 	mla	r3, r9, sl, r3
 800c768:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c76c:	42bd      	cmp	r5, r7
 800c76e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c772:	d8e5      	bhi.n	800c740 <__multiply+0xfc>
 800c774:	9a01      	ldr	r2, [sp, #4]
 800c776:	50a3      	str	r3, [r4, r2]
 800c778:	3404      	adds	r4, #4
 800c77a:	e79f      	b.n	800c6bc <__multiply+0x78>
 800c77c:	3e01      	subs	r6, #1
 800c77e:	e7a1      	b.n	800c6c4 <__multiply+0x80>
 800c780:	0800d3ae 	.word	0x0800d3ae
 800c784:	0800d430 	.word	0x0800d430

0800c788 <__pow5mult>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	4615      	mov	r5, r2
 800c78e:	f012 0203 	ands.w	r2, r2, #3
 800c792:	4607      	mov	r7, r0
 800c794:	460e      	mov	r6, r1
 800c796:	d007      	beq.n	800c7a8 <__pow5mult+0x20>
 800c798:	4c25      	ldr	r4, [pc, #148]	@ (800c830 <__pow5mult+0xa8>)
 800c79a:	3a01      	subs	r2, #1
 800c79c:	2300      	movs	r3, #0
 800c79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7a2:	f7ff fe5d 	bl	800c460 <__multadd>
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	10ad      	asrs	r5, r5, #2
 800c7aa:	d03d      	beq.n	800c828 <__pow5mult+0xa0>
 800c7ac:	69fc      	ldr	r4, [r7, #28]
 800c7ae:	b97c      	cbnz	r4, 800c7d0 <__pow5mult+0x48>
 800c7b0:	2010      	movs	r0, #16
 800c7b2:	f7ff fc7f 	bl	800c0b4 <malloc>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	61f8      	str	r0, [r7, #28]
 800c7ba:	b928      	cbnz	r0, 800c7c8 <__pow5mult+0x40>
 800c7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800c834 <__pow5mult+0xac>)
 800c7be:	481e      	ldr	r0, [pc, #120]	@ (800c838 <__pow5mult+0xb0>)
 800c7c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7c4:	f000 fc54 	bl	800d070 <__assert_func>
 800c7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7cc:	6004      	str	r4, [r0, #0]
 800c7ce:	60c4      	str	r4, [r0, #12]
 800c7d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7d8:	b94c      	cbnz	r4, 800c7ee <__pow5mult+0x66>
 800c7da:	f240 2171 	movw	r1, #625	@ 0x271
 800c7de:	4638      	mov	r0, r7
 800c7e0:	f7ff ff1a 	bl	800c618 <__i2b>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	6003      	str	r3, [r0, #0]
 800c7ee:	f04f 0900 	mov.w	r9, #0
 800c7f2:	07eb      	lsls	r3, r5, #31
 800c7f4:	d50a      	bpl.n	800c80c <__pow5mult+0x84>
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	4622      	mov	r2, r4
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	f7ff ff22 	bl	800c644 <__multiply>
 800c800:	4631      	mov	r1, r6
 800c802:	4680      	mov	r8, r0
 800c804:	4638      	mov	r0, r7
 800c806:	f7ff fe09 	bl	800c41c <_Bfree>
 800c80a:	4646      	mov	r6, r8
 800c80c:	106d      	asrs	r5, r5, #1
 800c80e:	d00b      	beq.n	800c828 <__pow5mult+0xa0>
 800c810:	6820      	ldr	r0, [r4, #0]
 800c812:	b938      	cbnz	r0, 800c824 <__pow5mult+0x9c>
 800c814:	4622      	mov	r2, r4
 800c816:	4621      	mov	r1, r4
 800c818:	4638      	mov	r0, r7
 800c81a:	f7ff ff13 	bl	800c644 <__multiply>
 800c81e:	6020      	str	r0, [r4, #0]
 800c820:	f8c0 9000 	str.w	r9, [r0]
 800c824:	4604      	mov	r4, r0
 800c826:	e7e4      	b.n	800c7f2 <__pow5mult+0x6a>
 800c828:	4630      	mov	r0, r6
 800c82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c82e:	bf00      	nop
 800c830:	0800d61c 	.word	0x0800d61c
 800c834:	0800d33f 	.word	0x0800d33f
 800c838:	0800d430 	.word	0x0800d430

0800c83c <__lshift>:
 800c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c840:	460c      	mov	r4, r1
 800c842:	6849      	ldr	r1, [r1, #4]
 800c844:	6923      	ldr	r3, [r4, #16]
 800c846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c84a:	68a3      	ldr	r3, [r4, #8]
 800c84c:	4607      	mov	r7, r0
 800c84e:	4691      	mov	r9, r2
 800c850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c854:	f108 0601 	add.w	r6, r8, #1
 800c858:	42b3      	cmp	r3, r6
 800c85a:	db0b      	blt.n	800c874 <__lshift+0x38>
 800c85c:	4638      	mov	r0, r7
 800c85e:	f7ff fd9d 	bl	800c39c <_Balloc>
 800c862:	4605      	mov	r5, r0
 800c864:	b948      	cbnz	r0, 800c87a <__lshift+0x3e>
 800c866:	4602      	mov	r2, r0
 800c868:	4b28      	ldr	r3, [pc, #160]	@ (800c90c <__lshift+0xd0>)
 800c86a:	4829      	ldr	r0, [pc, #164]	@ (800c910 <__lshift+0xd4>)
 800c86c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c870:	f000 fbfe 	bl	800d070 <__assert_func>
 800c874:	3101      	adds	r1, #1
 800c876:	005b      	lsls	r3, r3, #1
 800c878:	e7ee      	b.n	800c858 <__lshift+0x1c>
 800c87a:	2300      	movs	r3, #0
 800c87c:	f100 0114 	add.w	r1, r0, #20
 800c880:	f100 0210 	add.w	r2, r0, #16
 800c884:	4618      	mov	r0, r3
 800c886:	4553      	cmp	r3, sl
 800c888:	db33      	blt.n	800c8f2 <__lshift+0xb6>
 800c88a:	6920      	ldr	r0, [r4, #16]
 800c88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c890:	f104 0314 	add.w	r3, r4, #20
 800c894:	f019 091f 	ands.w	r9, r9, #31
 800c898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8a0:	d02b      	beq.n	800c8fa <__lshift+0xbe>
 800c8a2:	f1c9 0e20 	rsb	lr, r9, #32
 800c8a6:	468a      	mov	sl, r1
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	6818      	ldr	r0, [r3, #0]
 800c8ac:	fa00 f009 	lsl.w	r0, r0, r9
 800c8b0:	4310      	orrs	r0, r2
 800c8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800c8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ba:	459c      	cmp	ip, r3
 800c8bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8c0:	d8f3      	bhi.n	800c8aa <__lshift+0x6e>
 800c8c2:	ebac 0304 	sub.w	r3, ip, r4
 800c8c6:	3b15      	subs	r3, #21
 800c8c8:	f023 0303 	bic.w	r3, r3, #3
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	f104 0015 	add.w	r0, r4, #21
 800c8d2:	4560      	cmp	r0, ip
 800c8d4:	bf88      	it	hi
 800c8d6:	2304      	movhi	r3, #4
 800c8d8:	50ca      	str	r2, [r1, r3]
 800c8da:	b10a      	cbz	r2, 800c8e0 <__lshift+0xa4>
 800c8dc:	f108 0602 	add.w	r6, r8, #2
 800c8e0:	3e01      	subs	r6, #1
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	612e      	str	r6, [r5, #16]
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	f7ff fd98 	bl	800c41c <_Bfree>
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	e7c5      	b.n	800c886 <__lshift+0x4a>
 800c8fa:	3904      	subs	r1, #4
 800c8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c900:	f841 2f04 	str.w	r2, [r1, #4]!
 800c904:	459c      	cmp	ip, r3
 800c906:	d8f9      	bhi.n	800c8fc <__lshift+0xc0>
 800c908:	e7ea      	b.n	800c8e0 <__lshift+0xa4>
 800c90a:	bf00      	nop
 800c90c:	0800d3ae 	.word	0x0800d3ae
 800c910:	0800d430 	.word	0x0800d430

0800c914 <__mcmp>:
 800c914:	690a      	ldr	r2, [r1, #16]
 800c916:	4603      	mov	r3, r0
 800c918:	6900      	ldr	r0, [r0, #16]
 800c91a:	1a80      	subs	r0, r0, r2
 800c91c:	b530      	push	{r4, r5, lr}
 800c91e:	d10e      	bne.n	800c93e <__mcmp+0x2a>
 800c920:	3314      	adds	r3, #20
 800c922:	3114      	adds	r1, #20
 800c924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c92c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c934:	4295      	cmp	r5, r2
 800c936:	d003      	beq.n	800c940 <__mcmp+0x2c>
 800c938:	d205      	bcs.n	800c946 <__mcmp+0x32>
 800c93a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c93e:	bd30      	pop	{r4, r5, pc}
 800c940:	42a3      	cmp	r3, r4
 800c942:	d3f3      	bcc.n	800c92c <__mcmp+0x18>
 800c944:	e7fb      	b.n	800c93e <__mcmp+0x2a>
 800c946:	2001      	movs	r0, #1
 800c948:	e7f9      	b.n	800c93e <__mcmp+0x2a>
	...

0800c94c <__mdiff>:
 800c94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	4689      	mov	r9, r1
 800c952:	4606      	mov	r6, r0
 800c954:	4611      	mov	r1, r2
 800c956:	4648      	mov	r0, r9
 800c958:	4614      	mov	r4, r2
 800c95a:	f7ff ffdb 	bl	800c914 <__mcmp>
 800c95e:	1e05      	subs	r5, r0, #0
 800c960:	d112      	bne.n	800c988 <__mdiff+0x3c>
 800c962:	4629      	mov	r1, r5
 800c964:	4630      	mov	r0, r6
 800c966:	f7ff fd19 	bl	800c39c <_Balloc>
 800c96a:	4602      	mov	r2, r0
 800c96c:	b928      	cbnz	r0, 800c97a <__mdiff+0x2e>
 800c96e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca6c <__mdiff+0x120>)
 800c970:	f240 2137 	movw	r1, #567	@ 0x237
 800c974:	483e      	ldr	r0, [pc, #248]	@ (800ca70 <__mdiff+0x124>)
 800c976:	f000 fb7b 	bl	800d070 <__assert_func>
 800c97a:	2301      	movs	r3, #1
 800c97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c980:	4610      	mov	r0, r2
 800c982:	b003      	add	sp, #12
 800c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c988:	bfbc      	itt	lt
 800c98a:	464b      	movlt	r3, r9
 800c98c:	46a1      	movlt	r9, r4
 800c98e:	4630      	mov	r0, r6
 800c990:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c994:	bfba      	itte	lt
 800c996:	461c      	movlt	r4, r3
 800c998:	2501      	movlt	r5, #1
 800c99a:	2500      	movge	r5, #0
 800c99c:	f7ff fcfe 	bl	800c39c <_Balloc>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	b918      	cbnz	r0, 800c9ac <__mdiff+0x60>
 800c9a4:	4b31      	ldr	r3, [pc, #196]	@ (800ca6c <__mdiff+0x120>)
 800c9a6:	f240 2145 	movw	r1, #581	@ 0x245
 800c9aa:	e7e3      	b.n	800c974 <__mdiff+0x28>
 800c9ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9b0:	6926      	ldr	r6, [r4, #16]
 800c9b2:	60c5      	str	r5, [r0, #12]
 800c9b4:	f109 0310 	add.w	r3, r9, #16
 800c9b8:	f109 0514 	add.w	r5, r9, #20
 800c9bc:	f104 0e14 	add.w	lr, r4, #20
 800c9c0:	f100 0b14 	add.w	fp, r0, #20
 800c9c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9cc:	9301      	str	r3, [sp, #4]
 800c9ce:	46d9      	mov	r9, fp
 800c9d0:	f04f 0c00 	mov.w	ip, #0
 800c9d4:	9b01      	ldr	r3, [sp, #4]
 800c9d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	fa1f f38a 	uxth.w	r3, sl
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	b283      	uxth	r3, r0
 800c9e8:	1acb      	subs	r3, r1, r3
 800c9ea:	0c00      	lsrs	r0, r0, #16
 800c9ec:	4463      	add	r3, ip
 800c9ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9fc:	4576      	cmp	r6, lr
 800c9fe:	f849 3b04 	str.w	r3, [r9], #4
 800ca02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca06:	d8e5      	bhi.n	800c9d4 <__mdiff+0x88>
 800ca08:	1b33      	subs	r3, r6, r4
 800ca0a:	3b15      	subs	r3, #21
 800ca0c:	f023 0303 	bic.w	r3, r3, #3
 800ca10:	3415      	adds	r4, #21
 800ca12:	3304      	adds	r3, #4
 800ca14:	42a6      	cmp	r6, r4
 800ca16:	bf38      	it	cc
 800ca18:	2304      	movcc	r3, #4
 800ca1a:	441d      	add	r5, r3
 800ca1c:	445b      	add	r3, fp
 800ca1e:	461e      	mov	r6, r3
 800ca20:	462c      	mov	r4, r5
 800ca22:	4544      	cmp	r4, r8
 800ca24:	d30e      	bcc.n	800ca44 <__mdiff+0xf8>
 800ca26:	f108 0103 	add.w	r1, r8, #3
 800ca2a:	1b49      	subs	r1, r1, r5
 800ca2c:	f021 0103 	bic.w	r1, r1, #3
 800ca30:	3d03      	subs	r5, #3
 800ca32:	45a8      	cmp	r8, r5
 800ca34:	bf38      	it	cc
 800ca36:	2100      	movcc	r1, #0
 800ca38:	440b      	add	r3, r1
 800ca3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca3e:	b191      	cbz	r1, 800ca66 <__mdiff+0x11a>
 800ca40:	6117      	str	r7, [r2, #16]
 800ca42:	e79d      	b.n	800c980 <__mdiff+0x34>
 800ca44:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca48:	46e6      	mov	lr, ip
 800ca4a:	0c08      	lsrs	r0, r1, #16
 800ca4c:	fa1c fc81 	uxtah	ip, ip, r1
 800ca50:	4471      	add	r1, lr
 800ca52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca56:	b289      	uxth	r1, r1
 800ca58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca5c:	f846 1b04 	str.w	r1, [r6], #4
 800ca60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca64:	e7dd      	b.n	800ca22 <__mdiff+0xd6>
 800ca66:	3f01      	subs	r7, #1
 800ca68:	e7e7      	b.n	800ca3a <__mdiff+0xee>
 800ca6a:	bf00      	nop
 800ca6c:	0800d3ae 	.word	0x0800d3ae
 800ca70:	0800d430 	.word	0x0800d430

0800ca74 <__ulp>:
 800ca74:	b082      	sub	sp, #8
 800ca76:	ed8d 0b00 	vstr	d0, [sp]
 800ca7a:	9a01      	ldr	r2, [sp, #4]
 800ca7c:	4b0f      	ldr	r3, [pc, #60]	@ (800cabc <__ulp+0x48>)
 800ca7e:	4013      	ands	r3, r2
 800ca80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	dc08      	bgt.n	800ca9a <__ulp+0x26>
 800ca88:	425b      	negs	r3, r3
 800ca8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ca8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca92:	da04      	bge.n	800ca9e <__ulp+0x2a>
 800ca94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ca98:	4113      	asrs	r3, r2
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	e008      	b.n	800cab0 <__ulp+0x3c>
 800ca9e:	f1a2 0314 	sub.w	r3, r2, #20
 800caa2:	2b1e      	cmp	r3, #30
 800caa4:	bfda      	itte	le
 800caa6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800caaa:	40da      	lsrle	r2, r3
 800caac:	2201      	movgt	r2, #1
 800caae:	2300      	movs	r3, #0
 800cab0:	4619      	mov	r1, r3
 800cab2:	4610      	mov	r0, r2
 800cab4:	ec41 0b10 	vmov	d0, r0, r1
 800cab8:	b002      	add	sp, #8
 800caba:	4770      	bx	lr
 800cabc:	7ff00000 	.word	0x7ff00000

0800cac0 <__b2d>:
 800cac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac4:	6906      	ldr	r6, [r0, #16]
 800cac6:	f100 0814 	add.w	r8, r0, #20
 800caca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cace:	1f37      	subs	r7, r6, #4
 800cad0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cad4:	4610      	mov	r0, r2
 800cad6:	f7ff fd53 	bl	800c580 <__hi0bits>
 800cada:	f1c0 0320 	rsb	r3, r0, #32
 800cade:	280a      	cmp	r0, #10
 800cae0:	600b      	str	r3, [r1, #0]
 800cae2:	491b      	ldr	r1, [pc, #108]	@ (800cb50 <__b2d+0x90>)
 800cae4:	dc15      	bgt.n	800cb12 <__b2d+0x52>
 800cae6:	f1c0 0c0b 	rsb	ip, r0, #11
 800caea:	fa22 f30c 	lsr.w	r3, r2, ip
 800caee:	45b8      	cmp	r8, r7
 800caf0:	ea43 0501 	orr.w	r5, r3, r1
 800caf4:	bf34      	ite	cc
 800caf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cafa:	2300      	movcs	r3, #0
 800cafc:	3015      	adds	r0, #21
 800cafe:	fa02 f000 	lsl.w	r0, r2, r0
 800cb02:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb06:	4303      	orrs	r3, r0
 800cb08:	461c      	mov	r4, r3
 800cb0a:	ec45 4b10 	vmov	d0, r4, r5
 800cb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb12:	45b8      	cmp	r8, r7
 800cb14:	bf3a      	itte	cc
 800cb16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb1a:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb1e:	2300      	movcs	r3, #0
 800cb20:	380b      	subs	r0, #11
 800cb22:	d012      	beq.n	800cb4a <__b2d+0x8a>
 800cb24:	f1c0 0120 	rsb	r1, r0, #32
 800cb28:	fa23 f401 	lsr.w	r4, r3, r1
 800cb2c:	4082      	lsls	r2, r0
 800cb2e:	4322      	orrs	r2, r4
 800cb30:	4547      	cmp	r7, r8
 800cb32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cb36:	bf8c      	ite	hi
 800cb38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb3c:	2200      	movls	r2, #0
 800cb3e:	4083      	lsls	r3, r0
 800cb40:	40ca      	lsrs	r2, r1
 800cb42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cb46:	4313      	orrs	r3, r2
 800cb48:	e7de      	b.n	800cb08 <__b2d+0x48>
 800cb4a:	ea42 0501 	orr.w	r5, r2, r1
 800cb4e:	e7db      	b.n	800cb08 <__b2d+0x48>
 800cb50:	3ff00000 	.word	0x3ff00000

0800cb54 <__d2b>:
 800cb54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb58:	460f      	mov	r7, r1
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	ec59 8b10 	vmov	r8, r9, d0
 800cb60:	4616      	mov	r6, r2
 800cb62:	f7ff fc1b 	bl	800c39c <_Balloc>
 800cb66:	4604      	mov	r4, r0
 800cb68:	b930      	cbnz	r0, 800cb78 <__d2b+0x24>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	4b23      	ldr	r3, [pc, #140]	@ (800cbfc <__d2b+0xa8>)
 800cb6e:	4824      	ldr	r0, [pc, #144]	@ (800cc00 <__d2b+0xac>)
 800cb70:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb74:	f000 fa7c 	bl	800d070 <__assert_func>
 800cb78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb80:	b10d      	cbz	r5, 800cb86 <__d2b+0x32>
 800cb82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb86:	9301      	str	r3, [sp, #4]
 800cb88:	f1b8 0300 	subs.w	r3, r8, #0
 800cb8c:	d023      	beq.n	800cbd6 <__d2b+0x82>
 800cb8e:	4668      	mov	r0, sp
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	f7ff fd14 	bl	800c5be <__lo0bits>
 800cb96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb9a:	b1d0      	cbz	r0, 800cbd2 <__d2b+0x7e>
 800cb9c:	f1c0 0320 	rsb	r3, r0, #32
 800cba0:	fa02 f303 	lsl.w	r3, r2, r3
 800cba4:	430b      	orrs	r3, r1
 800cba6:	40c2      	lsrs	r2, r0
 800cba8:	6163      	str	r3, [r4, #20]
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	61a3      	str	r3, [r4, #24]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	bf0c      	ite	eq
 800cbb4:	2201      	moveq	r2, #1
 800cbb6:	2202      	movne	r2, #2
 800cbb8:	6122      	str	r2, [r4, #16]
 800cbba:	b1a5      	cbz	r5, 800cbe6 <__d2b+0x92>
 800cbbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbc0:	4405      	add	r5, r0
 800cbc2:	603d      	str	r5, [r7, #0]
 800cbc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbc8:	6030      	str	r0, [r6, #0]
 800cbca:	4620      	mov	r0, r4
 800cbcc:	b003      	add	sp, #12
 800cbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbd2:	6161      	str	r1, [r4, #20]
 800cbd4:	e7ea      	b.n	800cbac <__d2b+0x58>
 800cbd6:	a801      	add	r0, sp, #4
 800cbd8:	f7ff fcf1 	bl	800c5be <__lo0bits>
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	6163      	str	r3, [r4, #20]
 800cbe0:	3020      	adds	r0, #32
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	e7e8      	b.n	800cbb8 <__d2b+0x64>
 800cbe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cbee:	6038      	str	r0, [r7, #0]
 800cbf0:	6918      	ldr	r0, [r3, #16]
 800cbf2:	f7ff fcc5 	bl	800c580 <__hi0bits>
 800cbf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cbfa:	e7e5      	b.n	800cbc8 <__d2b+0x74>
 800cbfc:	0800d3ae 	.word	0x0800d3ae
 800cc00:	0800d430 	.word	0x0800d430

0800cc04 <__ratio>:
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	b085      	sub	sp, #20
 800cc0a:	e9cd 1000 	strd	r1, r0, [sp]
 800cc0e:	a902      	add	r1, sp, #8
 800cc10:	f7ff ff56 	bl	800cac0 <__b2d>
 800cc14:	9800      	ldr	r0, [sp, #0]
 800cc16:	a903      	add	r1, sp, #12
 800cc18:	ec55 4b10 	vmov	r4, r5, d0
 800cc1c:	f7ff ff50 	bl	800cac0 <__b2d>
 800cc20:	9b01      	ldr	r3, [sp, #4]
 800cc22:	6919      	ldr	r1, [r3, #16]
 800cc24:	9b00      	ldr	r3, [sp, #0]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	1ac9      	subs	r1, r1, r3
 800cc2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc2e:	1a9b      	subs	r3, r3, r2
 800cc30:	ec5b ab10 	vmov	sl, fp, d0
 800cc34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	bfce      	itee	gt
 800cc3c:	462a      	movgt	r2, r5
 800cc3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc42:	465a      	movle	r2, fp
 800cc44:	462f      	mov	r7, r5
 800cc46:	46d9      	mov	r9, fp
 800cc48:	bfcc      	ite	gt
 800cc4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cc4e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cc52:	464b      	mov	r3, r9
 800cc54:	4652      	mov	r2, sl
 800cc56:	4620      	mov	r0, r4
 800cc58:	4639      	mov	r1, r7
 800cc5a:	f7f3 fe17 	bl	800088c <__aeabi_ddiv>
 800cc5e:	ec41 0b10 	vmov	d0, r0, r1
 800cc62:	b005      	add	sp, #20
 800cc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc68 <__copybits>:
 800cc68:	3901      	subs	r1, #1
 800cc6a:	b570      	push	{r4, r5, r6, lr}
 800cc6c:	1149      	asrs	r1, r1, #5
 800cc6e:	6914      	ldr	r4, [r2, #16]
 800cc70:	3101      	adds	r1, #1
 800cc72:	f102 0314 	add.w	r3, r2, #20
 800cc76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc7e:	1f05      	subs	r5, r0, #4
 800cc80:	42a3      	cmp	r3, r4
 800cc82:	d30c      	bcc.n	800cc9e <__copybits+0x36>
 800cc84:	1aa3      	subs	r3, r4, r2
 800cc86:	3b11      	subs	r3, #17
 800cc88:	f023 0303 	bic.w	r3, r3, #3
 800cc8c:	3211      	adds	r2, #17
 800cc8e:	42a2      	cmp	r2, r4
 800cc90:	bf88      	it	hi
 800cc92:	2300      	movhi	r3, #0
 800cc94:	4418      	add	r0, r3
 800cc96:	2300      	movs	r3, #0
 800cc98:	4288      	cmp	r0, r1
 800cc9a:	d305      	bcc.n	800cca8 <__copybits+0x40>
 800cc9c:	bd70      	pop	{r4, r5, r6, pc}
 800cc9e:	f853 6b04 	ldr.w	r6, [r3], #4
 800cca2:	f845 6f04 	str.w	r6, [r5, #4]!
 800cca6:	e7eb      	b.n	800cc80 <__copybits+0x18>
 800cca8:	f840 3b04 	str.w	r3, [r0], #4
 800ccac:	e7f4      	b.n	800cc98 <__copybits+0x30>

0800ccae <__any_on>:
 800ccae:	f100 0214 	add.w	r2, r0, #20
 800ccb2:	6900      	ldr	r0, [r0, #16]
 800ccb4:	114b      	asrs	r3, r1, #5
 800ccb6:	4298      	cmp	r0, r3
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	db11      	blt.n	800cce0 <__any_on+0x32>
 800ccbc:	dd0a      	ble.n	800ccd4 <__any_on+0x26>
 800ccbe:	f011 011f 	ands.w	r1, r1, #31
 800ccc2:	d007      	beq.n	800ccd4 <__any_on+0x26>
 800ccc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ccc8:	fa24 f001 	lsr.w	r0, r4, r1
 800cccc:	fa00 f101 	lsl.w	r1, r0, r1
 800ccd0:	428c      	cmp	r4, r1
 800ccd2:	d10b      	bne.n	800ccec <__any_on+0x3e>
 800ccd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d803      	bhi.n	800cce4 <__any_on+0x36>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	bd10      	pop	{r4, pc}
 800cce0:	4603      	mov	r3, r0
 800cce2:	e7f7      	b.n	800ccd4 <__any_on+0x26>
 800cce4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cce8:	2900      	cmp	r1, #0
 800ccea:	d0f5      	beq.n	800ccd8 <__any_on+0x2a>
 800ccec:	2001      	movs	r0, #1
 800ccee:	e7f6      	b.n	800ccde <__any_on+0x30>

0800ccf0 <__sread>:
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf8:	f000 f964 	bl	800cfc4 <_read_r>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	bfab      	itete	ge
 800cd00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd02:	89a3      	ldrhlt	r3, [r4, #12]
 800cd04:	181b      	addge	r3, r3, r0
 800cd06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd0a:	bfac      	ite	ge
 800cd0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd0e:	81a3      	strhlt	r3, [r4, #12]
 800cd10:	bd10      	pop	{r4, pc}

0800cd12 <__swrite>:
 800cd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd16:	461f      	mov	r7, r3
 800cd18:	898b      	ldrh	r3, [r1, #12]
 800cd1a:	05db      	lsls	r3, r3, #23
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	4616      	mov	r6, r2
 800cd22:	d505      	bpl.n	800cd30 <__swrite+0x1e>
 800cd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd28:	2302      	movs	r3, #2
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f000 f938 	bl	800cfa0 <_lseek_r>
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	4632      	mov	r2, r6
 800cd3e:	463b      	mov	r3, r7
 800cd40:	4628      	mov	r0, r5
 800cd42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd46:	f000 b95f 	b.w	800d008 <_write_r>

0800cd4a <__sseek>:
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd52:	f000 f925 	bl	800cfa0 <_lseek_r>
 800cd56:	1c43      	adds	r3, r0, #1
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	bf15      	itete	ne
 800cd5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd66:	81a3      	strheq	r3, [r4, #12]
 800cd68:	bf18      	it	ne
 800cd6a:	81a3      	strhne	r3, [r4, #12]
 800cd6c:	bd10      	pop	{r4, pc}

0800cd6e <__sclose>:
 800cd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd72:	f000 b95b 	b.w	800d02c <_close_r>

0800cd76 <__swbuf_r>:
 800cd76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd78:	460e      	mov	r6, r1
 800cd7a:	4614      	mov	r4, r2
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	b118      	cbz	r0, 800cd88 <__swbuf_r+0x12>
 800cd80:	6a03      	ldr	r3, [r0, #32]
 800cd82:	b90b      	cbnz	r3, 800cd88 <__swbuf_r+0x12>
 800cd84:	f7fc ffac 	bl	8009ce0 <__sinit>
 800cd88:	69a3      	ldr	r3, [r4, #24]
 800cd8a:	60a3      	str	r3, [r4, #8]
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	071a      	lsls	r2, r3, #28
 800cd90:	d501      	bpl.n	800cd96 <__swbuf_r+0x20>
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	b943      	cbnz	r3, 800cda8 <__swbuf_r+0x32>
 800cd96:	4621      	mov	r1, r4
 800cd98:	4628      	mov	r0, r5
 800cd9a:	f000 f82b 	bl	800cdf4 <__swsetup_r>
 800cd9e:	b118      	cbz	r0, 800cda8 <__swbuf_r+0x32>
 800cda0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cda4:	4638      	mov	r0, r7
 800cda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	6922      	ldr	r2, [r4, #16]
 800cdac:	1a98      	subs	r0, r3, r2
 800cdae:	6963      	ldr	r3, [r4, #20]
 800cdb0:	b2f6      	uxtb	r6, r6
 800cdb2:	4283      	cmp	r3, r0
 800cdb4:	4637      	mov	r7, r6
 800cdb6:	dc05      	bgt.n	800cdc4 <__swbuf_r+0x4e>
 800cdb8:	4621      	mov	r1, r4
 800cdba:	4628      	mov	r0, r5
 800cdbc:	f7ff faba 	bl	800c334 <_fflush_r>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d1ed      	bne.n	800cda0 <__swbuf_r+0x2a>
 800cdc4:	68a3      	ldr	r3, [r4, #8]
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	60a3      	str	r3, [r4, #8]
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	6022      	str	r2, [r4, #0]
 800cdd0:	701e      	strb	r6, [r3, #0]
 800cdd2:	6962      	ldr	r2, [r4, #20]
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d004      	beq.n	800cde4 <__swbuf_r+0x6e>
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	07db      	lsls	r3, r3, #31
 800cdde:	d5e1      	bpl.n	800cda4 <__swbuf_r+0x2e>
 800cde0:	2e0a      	cmp	r6, #10
 800cde2:	d1df      	bne.n	800cda4 <__swbuf_r+0x2e>
 800cde4:	4621      	mov	r1, r4
 800cde6:	4628      	mov	r0, r5
 800cde8:	f7ff faa4 	bl	800c334 <_fflush_r>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d0d9      	beq.n	800cda4 <__swbuf_r+0x2e>
 800cdf0:	e7d6      	b.n	800cda0 <__swbuf_r+0x2a>
	...

0800cdf4 <__swsetup_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4b29      	ldr	r3, [pc, #164]	@ (800ce9c <__swsetup_r+0xa8>)
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	6818      	ldr	r0, [r3, #0]
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	b118      	cbz	r0, 800ce08 <__swsetup_r+0x14>
 800ce00:	6a03      	ldr	r3, [r0, #32]
 800ce02:	b90b      	cbnz	r3, 800ce08 <__swsetup_r+0x14>
 800ce04:	f7fc ff6c 	bl	8009ce0 <__sinit>
 800ce08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce0c:	0719      	lsls	r1, r3, #28
 800ce0e:	d422      	bmi.n	800ce56 <__swsetup_r+0x62>
 800ce10:	06da      	lsls	r2, r3, #27
 800ce12:	d407      	bmi.n	800ce24 <__swsetup_r+0x30>
 800ce14:	2209      	movs	r2, #9
 800ce16:	602a      	str	r2, [r5, #0]
 800ce18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce1c:	81a3      	strh	r3, [r4, #12]
 800ce1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce22:	e033      	b.n	800ce8c <__swsetup_r+0x98>
 800ce24:	0758      	lsls	r0, r3, #29
 800ce26:	d512      	bpl.n	800ce4e <__swsetup_r+0x5a>
 800ce28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce2a:	b141      	cbz	r1, 800ce3e <__swsetup_r+0x4a>
 800ce2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce30:	4299      	cmp	r1, r3
 800ce32:	d002      	beq.n	800ce3a <__swsetup_r+0x46>
 800ce34:	4628      	mov	r0, r5
 800ce36:	f000 f94d 	bl	800d0d4 <_free_r>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce3e:	89a3      	ldrh	r3, [r4, #12]
 800ce40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce44:	81a3      	strh	r3, [r4, #12]
 800ce46:	2300      	movs	r3, #0
 800ce48:	6063      	str	r3, [r4, #4]
 800ce4a:	6923      	ldr	r3, [r4, #16]
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	f043 0308 	orr.w	r3, r3, #8
 800ce54:	81a3      	strh	r3, [r4, #12]
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	b94b      	cbnz	r3, 800ce6e <__swsetup_r+0x7a>
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce64:	d003      	beq.n	800ce6e <__swsetup_r+0x7a>
 800ce66:	4621      	mov	r1, r4
 800ce68:	4628      	mov	r0, r5
 800ce6a:	f000 f84c 	bl	800cf06 <__smakebuf_r>
 800ce6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce72:	f013 0201 	ands.w	r2, r3, #1
 800ce76:	d00a      	beq.n	800ce8e <__swsetup_r+0x9a>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	60a2      	str	r2, [r4, #8]
 800ce7c:	6962      	ldr	r2, [r4, #20]
 800ce7e:	4252      	negs	r2, r2
 800ce80:	61a2      	str	r2, [r4, #24]
 800ce82:	6922      	ldr	r2, [r4, #16]
 800ce84:	b942      	cbnz	r2, 800ce98 <__swsetup_r+0xa4>
 800ce86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce8a:	d1c5      	bne.n	800ce18 <__swsetup_r+0x24>
 800ce8c:	bd38      	pop	{r3, r4, r5, pc}
 800ce8e:	0799      	lsls	r1, r3, #30
 800ce90:	bf58      	it	pl
 800ce92:	6962      	ldrpl	r2, [r4, #20]
 800ce94:	60a2      	str	r2, [r4, #8]
 800ce96:	e7f4      	b.n	800ce82 <__swsetup_r+0x8e>
 800ce98:	2000      	movs	r0, #0
 800ce9a:	e7f7      	b.n	800ce8c <__swsetup_r+0x98>
 800ce9c:	20000188 	.word	0x20000188

0800cea0 <__ascii_wctomb>:
 800cea0:	4603      	mov	r3, r0
 800cea2:	4608      	mov	r0, r1
 800cea4:	b141      	cbz	r1, 800ceb8 <__ascii_wctomb+0x18>
 800cea6:	2aff      	cmp	r2, #255	@ 0xff
 800cea8:	d904      	bls.n	800ceb4 <__ascii_wctomb+0x14>
 800ceaa:	228a      	movs	r2, #138	@ 0x8a
 800ceac:	601a      	str	r2, [r3, #0]
 800ceae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ceb2:	4770      	bx	lr
 800ceb4:	700a      	strb	r2, [r1, #0]
 800ceb6:	2001      	movs	r0, #1
 800ceb8:	4770      	bx	lr

0800ceba <__swhatbuf_r>:
 800ceba:	b570      	push	{r4, r5, r6, lr}
 800cebc:	460c      	mov	r4, r1
 800cebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec2:	2900      	cmp	r1, #0
 800cec4:	b096      	sub	sp, #88	@ 0x58
 800cec6:	4615      	mov	r5, r2
 800cec8:	461e      	mov	r6, r3
 800ceca:	da0d      	bge.n	800cee8 <__swhatbuf_r+0x2e>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ced2:	f04f 0100 	mov.w	r1, #0
 800ced6:	bf14      	ite	ne
 800ced8:	2340      	movne	r3, #64	@ 0x40
 800ceda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cede:	2000      	movs	r0, #0
 800cee0:	6031      	str	r1, [r6, #0]
 800cee2:	602b      	str	r3, [r5, #0]
 800cee4:	b016      	add	sp, #88	@ 0x58
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
 800cee8:	466a      	mov	r2, sp
 800ceea:	f000 f8af 	bl	800d04c <_fstat_r>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	dbec      	blt.n	800cecc <__swhatbuf_r+0x12>
 800cef2:	9901      	ldr	r1, [sp, #4]
 800cef4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cef8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cefc:	4259      	negs	r1, r3
 800cefe:	4159      	adcs	r1, r3
 800cf00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf04:	e7eb      	b.n	800cede <__swhatbuf_r+0x24>

0800cf06 <__smakebuf_r>:
 800cf06:	898b      	ldrh	r3, [r1, #12]
 800cf08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf0a:	079d      	lsls	r5, r3, #30
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	460c      	mov	r4, r1
 800cf10:	d507      	bpl.n	800cf22 <__smakebuf_r+0x1c>
 800cf12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf16:	6023      	str	r3, [r4, #0]
 800cf18:	6123      	str	r3, [r4, #16]
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	6163      	str	r3, [r4, #20]
 800cf1e:	b003      	add	sp, #12
 800cf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf22:	ab01      	add	r3, sp, #4
 800cf24:	466a      	mov	r2, sp
 800cf26:	f7ff ffc8 	bl	800ceba <__swhatbuf_r>
 800cf2a:	9f00      	ldr	r7, [sp, #0]
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	4639      	mov	r1, r7
 800cf30:	4630      	mov	r0, r6
 800cf32:	f7ff f8e9 	bl	800c108 <_malloc_r>
 800cf36:	b948      	cbnz	r0, 800cf4c <__smakebuf_r+0x46>
 800cf38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf3c:	059a      	lsls	r2, r3, #22
 800cf3e:	d4ee      	bmi.n	800cf1e <__smakebuf_r+0x18>
 800cf40:	f023 0303 	bic.w	r3, r3, #3
 800cf44:	f043 0302 	orr.w	r3, r3, #2
 800cf48:	81a3      	strh	r3, [r4, #12]
 800cf4a:	e7e2      	b.n	800cf12 <__smakebuf_r+0xc>
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	6020      	str	r0, [r4, #0]
 800cf50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf54:	81a3      	strh	r3, [r4, #12]
 800cf56:	9b01      	ldr	r3, [sp, #4]
 800cf58:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf5c:	b15b      	cbz	r3, 800cf76 <__smakebuf_r+0x70>
 800cf5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf62:	4630      	mov	r0, r6
 800cf64:	f000 f80c 	bl	800cf80 <_isatty_r>
 800cf68:	b128      	cbz	r0, 800cf76 <__smakebuf_r+0x70>
 800cf6a:	89a3      	ldrh	r3, [r4, #12]
 800cf6c:	f023 0303 	bic.w	r3, r3, #3
 800cf70:	f043 0301 	orr.w	r3, r3, #1
 800cf74:	81a3      	strh	r3, [r4, #12]
 800cf76:	89a3      	ldrh	r3, [r4, #12]
 800cf78:	431d      	orrs	r5, r3
 800cf7a:	81a5      	strh	r5, [r4, #12]
 800cf7c:	e7cf      	b.n	800cf1e <__smakebuf_r+0x18>
	...

0800cf80 <_isatty_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4d06      	ldr	r5, [pc, #24]	@ (800cf9c <_isatty_r+0x1c>)
 800cf84:	2300      	movs	r3, #0
 800cf86:	4604      	mov	r4, r0
 800cf88:	4608      	mov	r0, r1
 800cf8a:	602b      	str	r3, [r5, #0]
 800cf8c:	f7f4 fdbe 	bl	8001b0c <_isatty>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	d102      	bne.n	800cf9a <_isatty_r+0x1a>
 800cf94:	682b      	ldr	r3, [r5, #0]
 800cf96:	b103      	cbz	r3, 800cf9a <_isatty_r+0x1a>
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	20004e44 	.word	0x20004e44

0800cfa0 <_lseek_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d07      	ldr	r5, [pc, #28]	@ (800cfc0 <_lseek_r+0x20>)
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	4608      	mov	r0, r1
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	2200      	movs	r2, #0
 800cfac:	602a      	str	r2, [r5, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	f7f4 fdb7 	bl	8001b22 <_lseek>
 800cfb4:	1c43      	adds	r3, r0, #1
 800cfb6:	d102      	bne.n	800cfbe <_lseek_r+0x1e>
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	b103      	cbz	r3, 800cfbe <_lseek_r+0x1e>
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	bd38      	pop	{r3, r4, r5, pc}
 800cfc0:	20004e44 	.word	0x20004e44

0800cfc4 <_read_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d07      	ldr	r5, [pc, #28]	@ (800cfe4 <_read_r+0x20>)
 800cfc8:	4604      	mov	r4, r0
 800cfca:	4608      	mov	r0, r1
 800cfcc:	4611      	mov	r1, r2
 800cfce:	2200      	movs	r2, #0
 800cfd0:	602a      	str	r2, [r5, #0]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	f7f4 fd45 	bl	8001a62 <_read>
 800cfd8:	1c43      	adds	r3, r0, #1
 800cfda:	d102      	bne.n	800cfe2 <_read_r+0x1e>
 800cfdc:	682b      	ldr	r3, [r5, #0]
 800cfde:	b103      	cbz	r3, 800cfe2 <_read_r+0x1e>
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	bd38      	pop	{r3, r4, r5, pc}
 800cfe4:	20004e44 	.word	0x20004e44

0800cfe8 <_sbrk_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d06      	ldr	r5, [pc, #24]	@ (800d004 <_sbrk_r+0x1c>)
 800cfec:	2300      	movs	r3, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	602b      	str	r3, [r5, #0]
 800cff4:	f7f4 fda2 	bl	8001b3c <_sbrk>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_sbrk_r+0x1a>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_sbrk_r+0x1a>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	20004e44 	.word	0x20004e44

0800d008 <_write_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4d07      	ldr	r5, [pc, #28]	@ (800d028 <_write_r+0x20>)
 800d00c:	4604      	mov	r4, r0
 800d00e:	4608      	mov	r0, r1
 800d010:	4611      	mov	r1, r2
 800d012:	2200      	movs	r2, #0
 800d014:	602a      	str	r2, [r5, #0]
 800d016:	461a      	mov	r2, r3
 800d018:	f7f4 fd40 	bl	8001a9c <_write>
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	d102      	bne.n	800d026 <_write_r+0x1e>
 800d020:	682b      	ldr	r3, [r5, #0]
 800d022:	b103      	cbz	r3, 800d026 <_write_r+0x1e>
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	bd38      	pop	{r3, r4, r5, pc}
 800d028:	20004e44 	.word	0x20004e44

0800d02c <_close_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4d06      	ldr	r5, [pc, #24]	@ (800d048 <_close_r+0x1c>)
 800d030:	2300      	movs	r3, #0
 800d032:	4604      	mov	r4, r0
 800d034:	4608      	mov	r0, r1
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	f7f4 fd4c 	bl	8001ad4 <_close>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_close_r+0x1a>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_close_r+0x1a>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	20004e44 	.word	0x20004e44

0800d04c <_fstat_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4d07      	ldr	r5, [pc, #28]	@ (800d06c <_fstat_r+0x20>)
 800d050:	2300      	movs	r3, #0
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	4611      	mov	r1, r2
 800d058:	602b      	str	r3, [r5, #0]
 800d05a:	f7f4 fd47 	bl	8001aec <_fstat>
 800d05e:	1c43      	adds	r3, r0, #1
 800d060:	d102      	bne.n	800d068 <_fstat_r+0x1c>
 800d062:	682b      	ldr	r3, [r5, #0]
 800d064:	b103      	cbz	r3, 800d068 <_fstat_r+0x1c>
 800d066:	6023      	str	r3, [r4, #0]
 800d068:	bd38      	pop	{r3, r4, r5, pc}
 800d06a:	bf00      	nop
 800d06c:	20004e44 	.word	0x20004e44

0800d070 <__assert_func>:
 800d070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d072:	4614      	mov	r4, r2
 800d074:	461a      	mov	r2, r3
 800d076:	4b09      	ldr	r3, [pc, #36]	@ (800d09c <__assert_func+0x2c>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4605      	mov	r5, r0
 800d07c:	68d8      	ldr	r0, [r3, #12]
 800d07e:	b14c      	cbz	r4, 800d094 <__assert_func+0x24>
 800d080:	4b07      	ldr	r3, [pc, #28]	@ (800d0a0 <__assert_func+0x30>)
 800d082:	9100      	str	r1, [sp, #0]
 800d084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d088:	4906      	ldr	r1, [pc, #24]	@ (800d0a4 <__assert_func+0x34>)
 800d08a:	462b      	mov	r3, r5
 800d08c:	f000 f86c 	bl	800d168 <fiprintf>
 800d090:	f000 f87c 	bl	800d18c <abort>
 800d094:	4b04      	ldr	r3, [pc, #16]	@ (800d0a8 <__assert_func+0x38>)
 800d096:	461c      	mov	r4, r3
 800d098:	e7f3      	b.n	800d082 <__assert_func+0x12>
 800d09a:	bf00      	nop
 800d09c:	20000188 	.word	0x20000188
 800d0a0:	0800d489 	.word	0x0800d489
 800d0a4:	0800d496 	.word	0x0800d496
 800d0a8:	0800d4c4 	.word	0x0800d4c4

0800d0ac <_calloc_r>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	fba1 5402 	umull	r5, r4, r1, r2
 800d0b2:	b934      	cbnz	r4, 800d0c2 <_calloc_r+0x16>
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	f7ff f827 	bl	800c108 <_malloc_r>
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	b928      	cbnz	r0, 800d0ca <_calloc_r+0x1e>
 800d0be:	4630      	mov	r0, r6
 800d0c0:	bd70      	pop	{r4, r5, r6, pc}
 800d0c2:	220c      	movs	r2, #12
 800d0c4:	6002      	str	r2, [r0, #0]
 800d0c6:	2600      	movs	r6, #0
 800d0c8:	e7f9      	b.n	800d0be <_calloc_r+0x12>
 800d0ca:	462a      	mov	r2, r5
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	f7fd fcbd 	bl	800aa4c <memset>
 800d0d2:	e7f4      	b.n	800d0be <_calloc_r+0x12>

0800d0d4 <_free_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	2900      	cmp	r1, #0
 800d0da:	d041      	beq.n	800d160 <_free_r+0x8c>
 800d0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0e0:	1f0c      	subs	r4, r1, #4
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	bfb8      	it	lt
 800d0e6:	18e4      	addlt	r4, r4, r3
 800d0e8:	f7ff f94c 	bl	800c384 <__malloc_lock>
 800d0ec:	4a1d      	ldr	r2, [pc, #116]	@ (800d164 <_free_r+0x90>)
 800d0ee:	6813      	ldr	r3, [r2, #0]
 800d0f0:	b933      	cbnz	r3, 800d100 <_free_r+0x2c>
 800d0f2:	6063      	str	r3, [r4, #4]
 800d0f4:	6014      	str	r4, [r2, #0]
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0fc:	f7ff b948 	b.w	800c390 <__malloc_unlock>
 800d100:	42a3      	cmp	r3, r4
 800d102:	d908      	bls.n	800d116 <_free_r+0x42>
 800d104:	6820      	ldr	r0, [r4, #0]
 800d106:	1821      	adds	r1, r4, r0
 800d108:	428b      	cmp	r3, r1
 800d10a:	bf01      	itttt	eq
 800d10c:	6819      	ldreq	r1, [r3, #0]
 800d10e:	685b      	ldreq	r3, [r3, #4]
 800d110:	1809      	addeq	r1, r1, r0
 800d112:	6021      	streq	r1, [r4, #0]
 800d114:	e7ed      	b.n	800d0f2 <_free_r+0x1e>
 800d116:	461a      	mov	r2, r3
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	b10b      	cbz	r3, 800d120 <_free_r+0x4c>
 800d11c:	42a3      	cmp	r3, r4
 800d11e:	d9fa      	bls.n	800d116 <_free_r+0x42>
 800d120:	6811      	ldr	r1, [r2, #0]
 800d122:	1850      	adds	r0, r2, r1
 800d124:	42a0      	cmp	r0, r4
 800d126:	d10b      	bne.n	800d140 <_free_r+0x6c>
 800d128:	6820      	ldr	r0, [r4, #0]
 800d12a:	4401      	add	r1, r0
 800d12c:	1850      	adds	r0, r2, r1
 800d12e:	4283      	cmp	r3, r0
 800d130:	6011      	str	r1, [r2, #0]
 800d132:	d1e0      	bne.n	800d0f6 <_free_r+0x22>
 800d134:	6818      	ldr	r0, [r3, #0]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	6053      	str	r3, [r2, #4]
 800d13a:	4408      	add	r0, r1
 800d13c:	6010      	str	r0, [r2, #0]
 800d13e:	e7da      	b.n	800d0f6 <_free_r+0x22>
 800d140:	d902      	bls.n	800d148 <_free_r+0x74>
 800d142:	230c      	movs	r3, #12
 800d144:	602b      	str	r3, [r5, #0]
 800d146:	e7d6      	b.n	800d0f6 <_free_r+0x22>
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	1821      	adds	r1, r4, r0
 800d14c:	428b      	cmp	r3, r1
 800d14e:	bf04      	itt	eq
 800d150:	6819      	ldreq	r1, [r3, #0]
 800d152:	685b      	ldreq	r3, [r3, #4]
 800d154:	6063      	str	r3, [r4, #4]
 800d156:	bf04      	itt	eq
 800d158:	1809      	addeq	r1, r1, r0
 800d15a:	6021      	streq	r1, [r4, #0]
 800d15c:	6054      	str	r4, [r2, #4]
 800d15e:	e7ca      	b.n	800d0f6 <_free_r+0x22>
 800d160:	bd38      	pop	{r3, r4, r5, pc}
 800d162:	bf00      	nop
 800d164:	20004e40 	.word	0x20004e40

0800d168 <fiprintf>:
 800d168:	b40e      	push	{r1, r2, r3}
 800d16a:	b503      	push	{r0, r1, lr}
 800d16c:	4601      	mov	r1, r0
 800d16e:	ab03      	add	r3, sp, #12
 800d170:	4805      	ldr	r0, [pc, #20]	@ (800d188 <fiprintf+0x20>)
 800d172:	f853 2b04 	ldr.w	r2, [r3], #4
 800d176:	6800      	ldr	r0, [r0, #0]
 800d178:	9301      	str	r3, [sp, #4]
 800d17a:	f7fe fe83 	bl	800be84 <_vfiprintf_r>
 800d17e:	b002      	add	sp, #8
 800d180:	f85d eb04 	ldr.w	lr, [sp], #4
 800d184:	b003      	add	sp, #12
 800d186:	4770      	bx	lr
 800d188:	20000188 	.word	0x20000188

0800d18c <abort>:
 800d18c:	b508      	push	{r3, lr}
 800d18e:	2006      	movs	r0, #6
 800d190:	f000 f82c 	bl	800d1ec <raise>
 800d194:	2001      	movs	r0, #1
 800d196:	f7f4 fc59 	bl	8001a4c <_exit>

0800d19a <_raise_r>:
 800d19a:	291f      	cmp	r1, #31
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4605      	mov	r5, r0
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	d904      	bls.n	800d1ae <_raise_r+0x14>
 800d1a4:	2316      	movs	r3, #22
 800d1a6:	6003      	str	r3, [r0, #0]
 800d1a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1b0:	b112      	cbz	r2, 800d1b8 <_raise_r+0x1e>
 800d1b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1b6:	b94b      	cbnz	r3, 800d1cc <_raise_r+0x32>
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f000 f831 	bl	800d220 <_getpid_r>
 800d1be:	4622      	mov	r2, r4
 800d1c0:	4601      	mov	r1, r0
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1c8:	f000 b818 	b.w	800d1fc <_kill_r>
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d00a      	beq.n	800d1e6 <_raise_r+0x4c>
 800d1d0:	1c59      	adds	r1, r3, #1
 800d1d2:	d103      	bne.n	800d1dc <_raise_r+0x42>
 800d1d4:	2316      	movs	r3, #22
 800d1d6:	6003      	str	r3, [r0, #0]
 800d1d8:	2001      	movs	r0, #1
 800d1da:	e7e7      	b.n	800d1ac <_raise_r+0x12>
 800d1dc:	2100      	movs	r1, #0
 800d1de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	4798      	blx	r3
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	e7e0      	b.n	800d1ac <_raise_r+0x12>
	...

0800d1ec <raise>:
 800d1ec:	4b02      	ldr	r3, [pc, #8]	@ (800d1f8 <raise+0xc>)
 800d1ee:	4601      	mov	r1, r0
 800d1f0:	6818      	ldr	r0, [r3, #0]
 800d1f2:	f7ff bfd2 	b.w	800d19a <_raise_r>
 800d1f6:	bf00      	nop
 800d1f8:	20000188 	.word	0x20000188

0800d1fc <_kill_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4d07      	ldr	r5, [pc, #28]	@ (800d21c <_kill_r+0x20>)
 800d200:	2300      	movs	r3, #0
 800d202:	4604      	mov	r4, r0
 800d204:	4608      	mov	r0, r1
 800d206:	4611      	mov	r1, r2
 800d208:	602b      	str	r3, [r5, #0]
 800d20a:	f7f4 fc0f 	bl	8001a2c <_kill>
 800d20e:	1c43      	adds	r3, r0, #1
 800d210:	d102      	bne.n	800d218 <_kill_r+0x1c>
 800d212:	682b      	ldr	r3, [r5, #0]
 800d214:	b103      	cbz	r3, 800d218 <_kill_r+0x1c>
 800d216:	6023      	str	r3, [r4, #0]
 800d218:	bd38      	pop	{r3, r4, r5, pc}
 800d21a:	bf00      	nop
 800d21c:	20004e44 	.word	0x20004e44

0800d220 <_getpid_r>:
 800d220:	f7f4 bbfc 	b.w	8001a1c <_getpid>

0800d224 <_init>:
 800d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d226:	bf00      	nop
 800d228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d22a:	bc08      	pop	{r3}
 800d22c:	469e      	mov	lr, r3
 800d22e:	4770      	bx	lr

0800d230 <_fini>:
 800d230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d232:	bf00      	nop
 800d234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d236:	bc08      	pop	{r3}
 800d238:	469e      	mov	lr, r3
 800d23a:	4770      	bx	lr
